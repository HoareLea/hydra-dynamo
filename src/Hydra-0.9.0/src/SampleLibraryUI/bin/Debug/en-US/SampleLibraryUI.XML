<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SampleLibraryUI</name>
    </assembly>
    <members>
        <member name="T:SampleLibraryUI.Controls.HelloDynamoControl">
            <summary>
            Interaction logic for HellowDynamoControl.xaml
            </summary>
            <summary>
            HelloDynamoControl
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Controls.HelloDynamoControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Examples.HydraShare.Message">
            <summary>
            A message that will appear on the button
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Examples.HydraShare.MessageCommand">
            <summary>
            DelegateCommand objects allow you to bind
            UI interaction to methods on your data context.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.HydraShare.#ctor">
            <summary>
            The constructor for a NodeModel is used to create
            the input and output ports and specify the argument
            lacing.
            </summary>
        </member>
        <member name="T:SampleLibraryUI.Examples.CustomNodeModelNodeViewCustomization">
            <summary>
                View customizer for CustomNodeModel Node Model.
            </summary>
        </member>
        <member name="M:SampleLibraryUI.Examples.CustomNodeModelNodeViewCustomization.CustomizeView(SampleLibraryUI.Examples.HydraShare,Dynamo.Controls.NodeView)">
            <summary>
            At run-time, this method is called during the node 
            creation. Here you can create custom UI elements and
            add them to the node view, but we recommend designing
            your UI declaratively using xaml, and binding it to
            properties on this node as the DataContext.
            </summary>
            <param name="model">The NodeModel representing the node's core logic.</param>
            <param name="nodeView">The NodeView representing the node in the graph.</param>
        </member>
        <member name="M:SampleLibraryUI.Examples.CustomNodeModelNodeViewCustomization.Dispose">
            <summary>
            Here you can do any cleanup you require if you've assigned callbacks for particular 
            UI events on your node.
            </summary>
        </member>
        <member name="T:SampleLibraryUI.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.CustomNodeModeDescription">
            <summary>
              Looks up a localized string similar to A sample UI node which displays custom UI..
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.CustomNodeModePortDataInputToolTip">
            <summary>
              Looks up a localized string similar to Input a string..
            </summary>
        </member>
        <member name="P:SampleLibraryUI.Properties.Resources.CustomNodeModePortDataOutputToolTip">
            <summary>
              Looks up a localized string similar to A result..
            </summary>
        </member>
    </members>
</doc>
