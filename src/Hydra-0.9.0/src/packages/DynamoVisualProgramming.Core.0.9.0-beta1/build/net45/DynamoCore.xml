<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynamoCore</name>
    </assembly>
    <members>
        <member name="P:Dynamo.Core.DebugSettings.VerboseLogging">
            <summary>
            Enable verbose logging this is a lot of data
            </summary>
        </member>
        <member name="P:Dynamo.Core.Context.IsUnix">
            <summary>
                Check if the operating system running Dynamo is 
                a Unix-based one or not.  This will return true 
                for both OS X and Linux.  
            
                 https://stackoverflow.com/questions/5116977/how-to-check-the-os-version-at-runtime-e-g-windows-or-linux-without-using-a-con
            </summary>
        </member>
        <member name="T:Dynamo.Core.DynamoMigratorBase">
            <summary>
            Base class for all versions of Dynamo classes relating to
            migrating preferences, packages and definitions from older versions
            For version specific migration, derived classes will override base class methods
            The naming convention for derived classes is "DynamoMigrator{MajorVersion}{MinorVersion}"
            For e.g. derived migrator class for verion 0.7 is "DynamoMigrator07"
            Derived migrator class for version 0.8 is "DynamoMigrator08" and so on.
            Constructors of classes derived from DynamoMigratorBase need to be public
            as their instances are created through reflection.
            </summary>
        </member>
        <member name="M:Dynamo.Core.DynamoMigratorBase.ReadPreferences">
            <summary>
            Reads preference settings from input file and deserializes it into 
            PreferenceSettings object 
            This function can be overridden by version specific migrator classes
            </summary>
            <returns> returns the deserialized preference settings </returns>
        </member>
        <member name="M:Dynamo.Core.DynamoMigratorBase.MigrateFrom(Dynamo.Core.DynamoMigratorBase)">
            <summary>
            Migrates preference settings, packages, custom node definitions, etc. 
            from source migrator version to current version.
            This function can be overridden by version specific migrator classes
            </summary>
            <param name="sourceMigrator"> source migrator version from which to migrate from </param>
            /// <returns>new migrator instance after migration</returns>
        </member>
        <member name="M:Dynamo.Core.DynamoMigratorBase.MigrateBetweenDynamoVersions(Dynamo.Interfaces.IPathManager,Dynamo.Interfaces.IPathResolver)">
            <summary>
            Migrates preference settings and copies packages and custom node 
            definitions from the last but one version to the currently installed Dynamo version
            </summary>
            <param name="pathManager"></param>
            <param name="pathResolver"></param>
            <returns>new migrator instance after migration</returns>
        </member>
        <member name="M:Dynamo.Core.DynamoMigratorBase.GetInstalledVersions(System.String)">
            <summary>
            Get a list of file version objects given a root folder. Assuming the 
            following folders exist:
            
                e:\some\path\0.4
                e:\some\path\0.75
                e:\some\path\1.82
            
            Calling this method with "e:\\some\\path" would return an ordered 
            list in the following way (from largest number to smallest number):
            
                { FileVersion(1, 82), FileVersion(0, 75), FileVersion(0, 4) }
            
            </summary>
            <param name="rootFolder">The root folder under which versioned sub-
            folders are expected to be found. This argument must represent a valid
            local directory.</param>
            <returns>Return a list of FileVersion objects, ordered by newest 
            version to the oldest version. If no versioned sub-folder exists, then 
            the returned list is empty.</returns>
            <exception cref="T:System.ArgumentNullException">This exception is 
            thrown if rootFolder is null or an empty string.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">This exception
            is thrown if rootFolder points to an invalid directory.</exception>
        </member>
        <member name="M:Dynamo.Core.DynamoMigratorBase.Migrate(Dynamo.Interfaces.IPathResolver,Dynamo.Core.FileVersion,Dynamo.Core.FileVersion)">
            <summary>
            Given a root user data directory, this migrates user preferences,
            packages and custom node definition files from one installed version
            into another
            </summary>
            <param name="pathResolver"></param>
            <param name="fromVersion"> source Dynamo version from which to migrate </param>
            <param name="toVersion"> target Dynamo version into which to migrate </param>
            <returns> new migrator instance after migration, null if there's no migration </returns>
        </member>
        <member name="M:Dynamo.Core.DynamoMigratorBase.CreateMigrator(Dynamo.Interfaces.IPathResolver,Dynamo.Core.FileVersion)">
            <summary>
            Given a root user directory, this creates an instance of the migrator
            depending on the input version using reflection. Returns the default
            migrator (DynamoMigratorBase) if version specific migrator does not exist
            </summary>
            <param name="pathResolver"></param>
            <param name="version"> input version for which migrator instance is created </param>
            <returns> instance of migrator specific to input version. </returns>
        </member>
        <member name="T:Dynamo.Core.Threading.AsyncTaskExtensions">
            <summary>
                Tools for working productively with AsyncTask's
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTaskExtensions.Then(Dynamo.Core.Threading.AsyncTask,Dynamo.Core.Threading.AsyncTaskCompletedHandler)">
            <summary>
                Upon completion of the task, invoke the specified action
            </summary>
            <returns>An IDisposable representing the event subscription</returns>
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTaskExtensions.ThenPost(Dynamo.Core.Threading.AsyncTask,Dynamo.Core.Threading.AsyncTaskCompletedHandler,System.Threading.SynchronizationContext)">
            <summary>
                Upon completion of the task, invoke the action asynchronously in the specified
                SynchronizationContext
            </summary>
            <returns>An IDisposable representing the event subscription</returns>
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTaskExtensions.ThenSend(Dynamo.Core.Threading.AsyncTask,Dynamo.Core.Threading.AsyncTaskCompletedHandler,System.Threading.SynchronizationContext)">
            <summary>
                Upon completion of the task, invoke the action synchronously in the specified
                SynchronizationContext
            </summary>
            <returns>An IDisposable representing the event subscription</returns>
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTaskExtensions.AllComplete(System.Collections.Generic.IEnumerable{Dynamo.Core.Threading.AsyncTask},System.Action{System.Collections.Generic.IEnumerable{Dynamo.Core.Threading.AsyncTask}})">
            <summary>
                Await the completion of a collection of scheduled tasks.  The given action
                will only be executed after all events are complete or discarded.  The tasks
                must already be scheduled and not yet completed or this action will never be 
                executed.
            </summary>
            <returns>An IDisposable representing all of the event subscription</returns>
        </member>
        <member name="M:Dynamo.Core.Threading.PreviewGraphAsyncTask.Initialize(Dynamo.Engine.EngineController,Dynamo.Models.WorkspaceModel)">
            <summary>
            This method is called by codes that intent to start a graph update.
            This method is called on the main thread where node collection in a 
            WorkspaceModel can be safely accessed.
            </summary>
            <param name="controller">Reference to an instance of EngineController 
            to assist in generating GraphSyncData object for the given set of nodes.
            </param>
            <param name="workspace">Reference to the WorkspaceModel from which a 
            set of updated nodes is computed. The EngineController generates the 
            resulting GraphSyncData from this list of updated nodes.</param>
            <param name="dynamoLogger"> Logs the error message</param>
            <returns>Returns the list of node id's that will be executed in the next run
            for execution).</returns>
        </member>
        <member name="T:Dynamo.Core.Threading.UpdateRenderPackageAsyncTask">
            <summary>
            An asynchronous task to regenerate render packages for a given node. 
            During execution the task retrieves the corresponding IGraphicItem from 
            EngineController through a set of drawable identifiers supplied by the 
            node. These IGraphicItem objects then fill the IRenderPackage objects 
            with tessellated geometric data. Each of the resulting IRenderPackage 
            objects is then tagged with a label.
            </summary>
            
        </member>
        <member name="T:Dynamo.Core.Threading.AsyncTaskComparer">
            <summary>
            DynamoScheduler makes use of this comparer class to sort its internal 
            task queue. Refer to AsyncTask.Compare for ordering requirements.
            </summary>
            
        </member>
        <member name="T:Dynamo.Core.Threading.AsyncTask.TaskMergeInstruction">
            <summary>
            Merge instruction obtained from a call to AsyncTask.CanMergeWith.
            </summary>
        </member>
        <member name="F:Dynamo.Core.Threading.AsyncTask.TaskMergeInstruction.KeepBoth">
            <summary>
            Both the AsyncTask objects in comparison should be kept.
            </summary>
        </member>
        <member name="F:Dynamo.Core.Threading.AsyncTask.TaskMergeInstruction.KeepThis">
            <summary>
            The current instance of AsyncTask should be kept 
            while discarding the other AsyncTask in comparison.
            </summary>
        </member>
        <member name="F:Dynamo.Core.Threading.AsyncTask.TaskMergeInstruction.KeepOther">
            <summary>
            The current instance of AsyncTask should be discarded 
            while keeping the other AsyncTask in comparison.
            </summary>
        </member>
        <member name="P:Dynamo.Core.Threading.AsyncTask.Priority">
            <summary>
            DynamoScheduler sorts tasks base on two key factors: the priority of
            a task, and the relative importance between two tasks that has the 
            same priority. During task reprioritization process, DynamoScheduler 
            first sorts the tasks in accordance to their AsyncTask.Priority
            property. The resulting ordered list is then sorted again by calling
            AsyncTask.Compare method to determine the relative importance among
            tasks having the same priority.
            </summary>
            
        </member>
        <member name="E:Dynamo.Core.Threading.AsyncTask.Completed">
            <summary>
            This event is raised when the AsyncTask is completed. The event is 
            being raised in the context of ISchedulerThread, any UI element 
            access that is needed should be dispatched onto the UI dispatcher.
            </summary>
            
        </member>
        <member name="E:Dynamo.Core.Threading.AsyncTask.Discarded">
            <summary>
            Raised if the AsyncTask is discarded by an IScheduler and will not be executed
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTask.#ctor(Dynamo.Core.Threading.IScheduler)">
            <summary>
            Constructs an instance of AsyncTask object.
            </summary>
            <param name="scheduler">A reference to the DynamoScheduler, this 
            parameter cannot be null.</param>
            
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTask.MarkTaskAsScheduled">
            <summary>
            This method is invoked when DynamoScheduler places this AsyncTask 
            into its internal task queue. This method is only meant to be used 
            internally by the DynamoScheduler.
            </summary>
            
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTask.CanMergeWith(Dynamo.Core.Threading.AsyncTask)">
            <summary>
            This method is called by DynamoScheduler when it compacts the task 
            queue. The result of this call indicates if either of the tasks in 
            comparison should be dropped from the task queue, or both should be 
            kept. Tasks that are discarded during this phase will not be executed.
            </summary>
            <param name="otherTask">Another task to compare with.</param>
            <returns>Returns the comparison result. See Comparison enumeration 
            for details of the possible values.</returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTask.Compare(Dynamo.Core.Threading.AsyncTask)">
            <summary>
            Call this method to determine the relative priority of two AsyncTask
            objects. DynamoScheduler makes use of this method to determine the 
            order in which AsyncTask objects are sorted in its internal task queue.
            </summary>
            <param name="otherTask">A task to compare this task with.</param>
            <returns>Returns -1 if this AsyncTask object should be processed
            before the other AsyncTask; returns 1 if this AsyncTask object should
            be processed after the other AsyncTask; or 0 if both AsyncTask objects
            have the same priority and can be processed in the current order.
            </returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTask.Execute">
            <summary>
            This method is called when the SchedulerThread decides to execute a 
            scheduled AsyncTask in the task queue. Derived tasks overrides 
            ExecuteCore method to perform relevant operations. This method is 
            invoked in the context of the SchedulerThread and not the main thread.
            </summary>
            <returns>Returns true if execution was successful, or false if an 
            exception was thrown.</returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.AsyncTask.HandleTaskCompletion">
            <summary>
            This method is called by DynamoScheduler after AsyncTask.Execute 
            method returns. It is guaranteed to be called even when exception 
            is thrown from within AsyncTask.Execute.
            </summary>
            
        </member>
        <member name="T:Dynamo.Core.Threading.CompileCustomNodeAsyncTask">
            <summary>
            Schedule this task to compile a CustomNodeDefinition asynchronously.
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.CompileCustomNodeAsyncTask.Initialize(Dynamo.Core.Threading.CompileCustomNodeParams)">
            <summary>
            Call this method to intialize a CompileCustomNodeAsyncTask with an 
            EngineController and an GraphSyncData that is required to compile the 
            associated custom node.
            </summary>
            <param name="initParams">Input parameters required for custom node 
            graph updates.</param>
            <returns>Returns true if GraphSyncData is not empty and that the 
            CompileCustomNodeAsyncTask should be scheduled for execution. Returns
            false otherwise.</returns>
            
        </member>
        <member name="T:Dynamo.Core.Threading.DelegateBasedAsyncTask">
            <summary>
            DelegateBasedAsyncTask allows for a delegate or System.Action object 
            to be scheduled for asynchronous execution on the ISchedulerThread. 
            </summary>
            
        </member>
        <member name="P:Dynamo.Core.Threading.IScheduler.NextTimeStamp">
            <summary>
            AsyncTask base class calls this to obtain the new time-stamp value.
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.IScheduler.ProcessNextTask(System.Boolean)">
            <summary>
            An ISchedulerThread implementation calls this method so scheduler 
            starts to process the next task in the queue, if there is any. Note 
            that this method is meant to process only one task in queue. The 
            implementation of ISchedulerThread is free to call this method again
            in a fashion that matches its task fetching behavior.
            </summary>
            <param name="waitIfTaskQueueIsEmpty">This parameter is only used if 
            the task queue is empty at the time this method is invoked. When the
            task queue becomes empty, setting this to true will cause this call  
            to block until either the next task becomes available, or when the 
            scheduler is requested to shutdown.</param>
            <returns>This method returns true if the task queue is not empty, or
            false otherwise. Note that this method returns false when scheduler
            begins to shutdown, even when the task queue is not empty.</returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.IScheduler.ScheduleForExecution(Dynamo.Core.Threading.AsyncTask)">
            <summary>
            Callers of this method create an instance of AsyncTask derived 
            class and call this method to schedule the task for execution.
            </summary>
            <param name="asyncTask">The task to execute asynchronously.</param>
            
        </member>
        <member name="P:Dynamo.Core.Threading.IScheduler.Tasks">
            <summary>
            The complete collection of all of the currently scheduled tasks
            </summary>
        </member>
        <member name="F:Dynamo.Core.Threading.TaskProcessMode.Synchronous">
            <summary>
            Scheduled task will be processed immediately
            </summary>
        </member>
        <member name="F:Dynamo.Core.Threading.TaskProcessMode.Asynchronous">
            <summary>
            Scheduled task will be processed by schedule
            </summary>
        </member>
        <member name="E:Dynamo.Core.Threading.DynamoScheduler.TaskStateChanged">
            <summary>
            Event that is raised when the state of an AsyncTask is changed.
            The state of an AsyncTask changes when it is scheduled, discarded,
            executed or completed. Note that this event is raised in the context
            of ISchedulerThread, any access to UI components or collections in 
            WorkspaceModel (e.g. Nodes, Connectors, etc.) should be dispatched
            for execution on the UI thread.
            </summary>
        </member>
        <member name="P:Dynamo.Core.Threading.DynamoScheduler.NextTimeStamp">
            <summary>
            AsyncTask base class calls this to obtain the new time-stamp value.
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.DynamoScheduler.Shutdown">
            <summary>
            Call this method to properly shutdown the scheduler and its associated
            ISchedulerThread. This call will be blocked until the ISchedulerThread
            terminates. Note that the implementation of ISchedulerThread may or may 
            not choose to handle all the remaining AsyncTask in queue when shutdown 
            happens -- DynamoScheduler ensures the tasks in queue are cleared when 
            this call returns.
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.DynamoScheduler.ScheduleForExecution(Dynamo.Core.Threading.AsyncTask)">
            <summary>
            Callers of this method create an instance of AsyncTask derived 
            class and call this method to schedule the task for execution.
            </summary>
            <param name="asyncTask">The task to execute asynchronously.</param>
            
        </member>
        <member name="P:Dynamo.Core.Threading.DynamoScheduler.ProcessMode">
            <summary>
            Flag determining whether or not the scheduleed task will be
            processed immediately or not. 
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.DynamoScheduler.ProcessNextTask(System.Boolean)">
            <summary>
            An ISchedulerThread implementation calls this method so scheduler 
            starts to process the next task in the queue, if there is any. Note 
            that this method is meant to process only one task in queue. The 
            implementation of ISchedulerThread is free to call this method again
            in a fashion that matches its task fetching behavior.
            </summary>
            <param name="waitIfTaskQueueIsEmpty">This parameter is only used if 
            the task queue is empty at the time this method is invoked. When the
            task queue becomes empty, setting this to true will cause this call  
            to block until either the next task becomes available, or when the 
            scheduler is requested to shutdown.</param>
            <returns>This method returns true if the task queue is not empty, or
            false otherwise. Note that this method returns false when scheduler
            begins to shutdown, even when the task queue is not empty.</returns>
            
        </member>
        <member name="P:Dynamo.Core.Threading.DynamoScheduler.HasPendingTasks">
            <summary>
            Return true if task queue is not empty.
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.DynamoScheduler.CompactTaskQueue">
            <summary>
            This method is called when ISchedulerThread calls ProcessNextTask 
            method to process next available task in queue. It is only called 
            if the task queue was updated (one or more AsyncTask scheduled)
            before ISchedulerThread picks up the next task.
            </summary>
            <returns>Returns a list of AsyncTask objects that were dropped, if
            any, during task queue compact. The return list can be empty but it 
            will never be null.
            </returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.SetTraceDataAsyncTask.Initialize(Dynamo.Engine.EngineController,Dynamo.Models.HomeWorkspaceModel)">
            <summary>
            This method is called by task creator to associate the trace data with
            the current instance of virtual machine. The given WorkspaceModel can
            optionally contain saved trace data in a previous execution session. As
            a side-effect, this method resets "WorkspaceModel.PreloadedTraceData"
            data member to ensure the correctness of the execution flow.
            </summary>
            <param name="controller">Reference to the EngineController on which the 
            loaded trace data should be set.</param>
            <param name="workspace">The workspace from which the trace data should 
            be retrieved.</param>
            <returns>If the given WorkspaceModel contains saved trace data, this 
            method returns true, in which case the task needs to be scheduled.
            Otherwise, the method returns false.</returns>
            
        </member>
        <member name="F:Dynamo.Core.Threading.TimeStamp.identifier">
            <summary>
            The unique identifier of the time-stamp. This identifier is 
            generated from a centralized TimeStampGenerator class that ensures 
            the identifier is unique for each generated TimeStamp object.
            </summary>
        </member>
        <member name="F:Dynamo.Core.Threading.TimeStamp.tickCount">
            <summary>
            The high resolution tick count obtained from Stopwatch.GetTimestamp.
            This tick count is different from 'identifier' in the way that this 
            represents real elapsed 
            </summary>
        </member>
        <member name="M:Dynamo.Core.Threading.TimeStamp.op_GreaterThan(Dynamo.Core.Threading.TimeStamp,Dynamo.Core.Threading.TimeStamp)">
            <summary>
            The public usage of time stamps should be restricted to these
            methods used to ensure an ordering on timestamps
            </summary>
            <param name="timeStamp0">The first time stamp in comparison.</param>
            <param name="timeStamp1">The second time stamp in comparison.</param>
            <returns>Return true if the first time stamp was created later than 
            the second time steamp, or false otherwise.</returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.TimeStamp.op_LessThan(Dynamo.Core.Threading.TimeStamp,Dynamo.Core.Threading.TimeStamp)">
            <summary>
            The public usage of time stamps should be restricted to these
            methods used to ensure an ordering on timestamps
            </summary>
            <param name="timeStamp0">The first time stamp in comparison.</param>
            <param name="timeStamp1">The second time stamp in comparison.</param>
            <returns>Return true if the first time stamp was created earlier than 
            the second time steamp, or false otherwise.</returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.UpdateGraphAsyncTask.Initialize(Dynamo.Engine.EngineController,Dynamo.Models.WorkspaceModel)">
            <summary>
            This method is called by code that intends to start a graph update.
            This method is called on the main thread where node collection in a 
            WorkspaceModel can be safely accessed.
            </summary>
            <param name="controller">Reference to an instance of EngineController 
            to assist in generating GraphSyncData object for the given set of nodes.
            </param>
            <param name="workspace">Reference to the WorkspaceModel from which a 
            set of updated nodes is computed. The EngineController generates the 
            resulting GraphSyncData from this list of updated nodes.</param>
            <returns>Returns true if there is any GraphSyncData, or false otherwise
            (in which case there will be no need to schedule UpdateGraphAsyncTask 
            for execution).</returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.UpdateGraphAsyncTask.Contains(Dynamo.Core.Threading.UpdateGraphAsyncTask)">
            <summary>
            Return if this task's graph sync data is a super set of the other
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.Threading.UpdateGraphAsyncTask.ComputeModifiedNodes(Dynamo.Models.WorkspaceModel)">
            <summary>
            This method is called to gather all the nodes whose cached values 
            should be updated after graph update is done. This set of nodes 
            includes nodes that are explicitly marked as requiring update, as 
            well as all its downstream nodes.
            </summary>
            <param name="workspace">The WorkspaceModel from which nodes are to
            be retrieved.</param>
            <returns>Returns a list of NodeModel whose cached values are to be 
            updated after the evaluation.</returns>
            
        </member>
        <member name="M:Dynamo.Core.Threading.UpdateGraphAsyncTask.GetDownstreamNodes(Dynamo.Models.NodeModel,System.Collections.Generic.ICollection{Dynamo.Models.NodeModel})">
            <summary>
            Call this method to recursively gather downstream nodes of a given node.
            </summary>
            <param name="node">A NodeModel whose downstream nodes are to be gathered.</param>
            <param name="gathered">A list of all downstream nodes.</param>
            
        </member>
        <member name="M:Dynamo.Core.PulseMaker.#ctor">
            <summary>
            An internal constructor to ensure PulseMaker object can only
            be instantiated from within DynamoModel (i.e. DynamoCore.dll).
            </summary>
            
        </member>
        <member name="M:Dynamo.Core.PulseMaker.Start(System.Int32)">
            <summary>
            Call this method to start the PulseMaker.
            </summary>
            <param name="milliseconds">The interval between two pulses in 
            milliseconds.</param>
            
        </member>
        <member name="M:Dynamo.Core.PulseMaker.Stop">
            <summary>
            Call this method to stop the PulseMaker. Note that any existing 
            scheduled evaluation will still proceed, but this call guarantees 
            that no further evaluation will take place after that.
            </summary>
            
        </member>
        <member name="M:Dynamo.Core.NodeGraph.LoadNodeFromXml(System.Xml.XmlElement,Dynamo.Models.SaveContext,Dynamo.Models.NodeFactory,ProtoCore.Namespace.ElementResolver)">
            <summary>
                Creates and initializes a NodeModel from its Xml representation.
            </summary>
            <param name="elNode">XmlElement for a NodeModel.</param>
            <param name="context">The serialization context for initialization.</param>
            <param name="nodeFactory">A NodeFactory, to be used to create the node.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.NodeGraph.LoadConnectorFromXml(System.Xml.XmlElement,System.Collections.Generic.IDictionary{System.Guid,Dynamo.Models.NodeModel})">
            <summary>
                Creates and initializes a ConnectorModel from its Xml representation.
            </summary>
            <param name="connEl">XmlElement for a ConnectorModel.</param>
            <param name="nodes">Dictionary to be used for looking up a NodeModel by it's Guid.</param>
            <returns>Returns the new instance of ConnectorModel loaded from XmlElement.</returns>
        </member>
        <member name="M:Dynamo.Core.NodeGraph.LoadNoteFromXml(System.Xml.XmlNode)">
            <summary>
                Creates and initializes a NoteModel from its Xml representation.
            </summary>
            <param name="note"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.NodeGraph.LoadGraphFromXml(System.Xml.XmlDocument,Dynamo.Models.NodeFactory)">
            <summary>
                Loads NodeModels, ConnectorModels, and NoteModels from an XmlDocument.
            </summary>
            <param name="xmlDoc">An XmlDocument representing a serialized Dynamo workspace.</param>
            <param name="nodeFactory">A NodeFactory, used to load and instantiate nodes.</param>
            <param name="elementResolver"></param>
            <returns></returns>
        </member>
        <member name="P:Dynamo.Core.PathManagerParams.MajorFileVersion">
            <summary>
            Major version number to be used to form various data file paths.
            If both this and MinorFileVersion are 0, then version information 
            is retrieved from DynamoCore.dll.
            </summary>
        </member>
        <member name="P:Dynamo.Core.PathManagerParams.MinorFileVersion">
            <summary>
            Minor version number to be used to form various data file paths.
            If both this and MajorFileVersion are 0, then version information 
            is retrieved from DynamoCore.dll.
            </summary>
        </member>
        <member name="P:Dynamo.Core.PathManagerParams.CorePath">
            <summary>
            The full path of the directory that contains DynamoCore.dll.
            </summary>
        </member>
        <member name="P:Dynamo.Core.PathManagerParams.PathResolver">
            <summary>
            Reference of an IPathResolver object that supplies 
            additional path information. This argument is optional.
            </summary>
        </member>
        <member name="M:Dynamo.Core.PathManager.ResolveLibraryPath(System.String@)">
            <summary>
            Given an initial file path with the file name, resolve the full path
            to the target file. The search happens in the following order:
            
            1. If the provided file path is valid and points to an existing file, 
               the file path is return as-is.
            2. The file is searched alongside DynamoCore.dll for a match.
            3. The file is searched within AdditionalResolutionPaths.
            4. The search is left to system path resolution.
            
            </summary>
            <param name="library">The initial library file path.</param>
            <returns>Returns true if the requested file can be located, or false
            otherwise.</returns>
            
        </member>
        <member name="M:Dynamo.Core.PathManager.#ctor(Dynamo.Core.PathManagerParams)">
            <summary>
            Constructs an instance of PathManager object.
            </summary>
            <param name="pathManagerParams">Parameters to configure the new 
            instance of PathManager. See PathManagerParams for details of each 
            field.</param>
            
        </member>
        <member name="M:Dynamo.Core.PathManager.EnsureDirectoryExistence(System.Collections.Generic.List{System.Exception})">
            <summary>
            Call this method to force PathManager to create folders that it 
            is referring to. This method call throws exception if any creation 
            fails.
            </summary>
            <param name="exceptions">The output list of exception, if any of 
            the target directories cannot be created during this call.</param>
        </member>
        <member name="M:Dynamo.Core.PathManager.GetBackupFilePath(Dynamo.Models.WorkspaceModel)">
            <summary>
            Get the backup file path for a workspace
            </summary>
            <param name="workspace"></param>
            <returns></returns>
        </member>
        <member name="P:Dynamo.Core.AuthenticationManager.HasAuthProvider">
            <summary>
                Determines if the this.client has login capabilities
            </summary>
        </member>
        <member name="P:Dynamo.Core.AuthenticationManager.LoginState">
            <summary>
                Specifies whether the user is logged in or not.
            </summary>
        </member>
        <member name="P:Dynamo.Core.AuthenticationManager.Username">
            <summary>
                The username of the current user, if logged in.  Otherwise null
            </summary>
        </member>
        <member name="P:Dynamo.Core.AuthenticationManager.AuthProvider">
            <summary>
            Current IAuthProvider
            </summary>
        </member>
        <member name="M:Dynamo.Core.AuthenticationManager.ToggleLoginState(System.Object)">
            <summary>
            Toggle current login state
            </summary>
        </member>
        <member name="M:Dynamo.Core.AuthenticationManager.CanToggleLoginState(System.Object)">
            <summary>
            Check if able to toggle login state
            </summary>
        </member>
        <member name="E:Dynamo.Core.NotificationObject.PropertyChanged">
            <summary>
            Raised when a property on this object has a new value.
            </summary>        
        </member>
        <member name="M:Dynamo.Core.NotificationObject.RaisePropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">The property that has a new value.</param>
        </member>
        <member name="M:Dynamo.Core.NotificationObject.RaisePropertyChanged(System.String[])">
            <summary>
            Raises this object's PropertyChanged event for each of the properties.
            </summary>
            <param name="propertyNames">The properties that have a new value.</param>
        </member>
        <member name="T:Dynamo.Core.IUndoRedoRecorderClient">
            <summary>
            An instance of UndoRedoRecorder is owned by an "undo client" object. In 
            the context of Dynamo, the undo client is "Workspace". The undo recorder 
            calls into the owning undo client in an undo/redo operation, causing the 
            client to delete, reload or create the corresponding model. To qualify
            as an undo client, a class must implement this interface.
            </summary>
        </member>
        <member name="M:Dynamo.Core.IUndoRedoRecorderClient.DeleteModel(System.Xml.XmlElement)">
            <summary>
            UndoRedoRecorder calls this method to delete a model in the client.
            </summary>
            <param name="modelData">The data representing the model to be 
            deleted. It is important that this element contains identifiable 
            information so that the corresponding model can be located in the 
            client for deletion.
            </param>
        </member>
        <member name="M:Dynamo.Core.IUndoRedoRecorderClient.ReloadModel(System.Xml.XmlElement)">
            <summary>
            UndoRedoRecorder calls this method to request the client to reload 
            a given model by giving its data.
            </summary>
            <param name="modelData">The xml data from which the corresponding 
            model can be reloaded from.</param>
        </member>
        <member name="M:Dynamo.Core.IUndoRedoRecorderClient.CreateModel(System.Xml.XmlElement)">
            <summary>
            UndoRedoRecorder calls this method to request a model to be created.
            </summary>
            <param name="modelData">The xml data from which the corresponding 
                model can be re-created from.</param>
        </member>
        <member name="M:Dynamo.Core.IUndoRedoRecorderClient.GetModelForElement(System.Xml.XmlElement)">
            <summary>
            UndoRedoRecorder calls this method to retrieve the up-to-date 
            instance of the model before any undo/redo operation modifies the 
            model. The up-to-date information of the model is important so that
            an undo operation can be redone (repopulated with the up-to-date 
            data before the undo operation happens).
            </summary>
            <param name="modelData">The xml data representing the model which 
            UndoRedoRecorder requires for serialization purposes.</param>
            <returns>Returns the model that modelData corresponds to.</returns>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.BeginActionGroup">
            <summary>
            <para>For a series of actions to be recorded for undo, an "action 
            group" needs to be opened. An action group is the smallest unit in 
            which undo or redo can be done. For example, dragging a set of nodes 
            on the UI results in those nodes getting recorded in a single action 
            group, when undo is done, the set of recorded nodes get reverted in 
            one undo command.</para>
            <para>It is mandatory for the caller of this method to call 
            EndActionGroup when the undo recording is done for the current 
            action group. Failing to do so will result in subsequent calls to 
            BeginActionGroup to throw an exception.</para>
            </summary>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.EndActionGroup">
            <summary>
            Call this method to close the currently opened action group, wrapping 
            all recorded actions as part of the group. Actions in an action group
            get undone/redone at one go with a single undo/redo command.
            </summary>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.Clear">
            <summary>
            Call this method to clear the internal undo/redo stacks, effectively
            destroying all the recorded actions. This is desirable for example,
            when the workspace is cleared to be used as a clean slate for future
            works, causing recorded actions become irrelevant.
            </summary>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.RecordCreationForUndo(Dynamo.Models.ModelBase)">
            <summary>
            Record the given model right after it has been created. This results
            in a creation action to be recorded under the current action group.
            Undoing this action will result in the model being deleted.
            </summary>
            <param name="model">The model to be recorded.</param>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.RecordDeletionForUndo(Dynamo.Models.ModelBase)">
            <summary>
            Record the given model right before it has been deleted. This 
            results in a deletion action to be recorded under the current action 
            group. Undoing this action will result in the model being created 
            and re-inserted into the current workspace.
            </summary>
            <param name="model">The model to be recorded.</param>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.RecordModificationForUndo(Dynamo.Models.ModelBase)">
            <summary>
            Record the given model right before it is modified. This results
            in a modification action to be recorded under the current action 
            group. Undoing this action will result in the model being reverted
            to the states that it was in before the modification took place.
            </summary>
            <param name="model">The model to be recorded.</param>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.PopFromUndoGroup">
            <summary>
            This function removes the top most item from the UndoStack. In 
            order to preserve continuity of both undo and redo stacks, a pop 
            action cannot be done when undo has unwinded some user actions, 
            leaving them on the redo stack. This partially helps making sure 
            the method is only called when the caller recognizes the most 
            recent item that was pushed onto the undo stack (and that it does 
            not accidentally pop an action that is irrelevant).
            </summary>
            <returns>Returns the XmlElement representing the action group that 
            is on top of the stack at the time pop is requested.</returns>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.RecordModelAsOffTrack(System.Guid)">
            <summary>
            A model is recorded as an off-track object means it is modified
            somewhere else, but that modification operation is not recorded in
            undo/redo stack. UndoRedoRecorder will ignore all excpetions that
            related to this kind of objects during undo/redo.
            
            For example, a connector that connects to an input port of a custom
            node instance could be deleted because of the removal of that input
            port in custom workspace. As this deletion in the custom workspace 
            is not recorded by UndoRedoRecorder in home workspace, the connector
            should be marked as off-track.
            </summary>
            <param name="modelGuid"></param>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.EnsureValidRecorderStates">
            <summary>
            This method is called at the beginning of any method that requires 
            any existing undo group to be closed before proceeding. For example,
            UndoRedoRecorder.OpenGroup cannot be called again while there is an
            existing undo group that is left open.
            </summary>
        </member>
        <member name="M:Dynamo.Core.UndoRedoRecorder.IsRecordedInActionGroup(System.Xml.XmlElement,Dynamo.Models.ModelBase)">
            <summary>
            The recorder calls this method to determine if a given model has 
            already been recorded in the active action group. For an example,
            if there is a connection between NodeA and NodeB, selecting both 
            the nodes and deleting them will cause the connection model to be 
            recorded twice (when a node is deleted, its connections are being 
            recorded for undo).
            </summary>
            <param name="group">The action group to check against.</param>
            <param name="model">The model to check against.</param>
            <returns>Returns true if the model has already been recorded in the
            current action group, or false otherwise.</returns>
        </member>
        <member name="T:Dynamo.Core.CustomNodeManager">
            <summary>
                Manages instantiation of custom nodes.  All custom nodes known to Dynamo should be stored
                with this type.  This object implements late initialization of custom nodes by providing a 
                single interface to initialize custom nodes.  
            </summary>
        </member>
        <member name="P:Dynamo.Core.CustomNodeManager.LoadedDefinitions">
            <summary>
                CustomNodeDefinitions for all loaded custom nodes, in load order.
            </summary>
        </member>
        <member name="F:Dynamo.Core.CustomNodeManager.NodeInfos">
            <summary>
                Registry of all NodeInfos corresponding to discovered custom nodes. These
                custom nodes are not all necessarily initialized.
            </summary>
        </member>
        <member name="P:Dynamo.Core.CustomNodeManager.LoadedWorkspaces">
            <summary>
                All loaded custom node workspaces.
            </summary>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.GetWorkspaceById(System.Guid)">
            <summary>
            Gets custom node workspace by a specified custom node ID
            </summary>
            <param name="customNodeId">Custom node ID of a requested workspace</param>
            <returns>Custom node workspace by a specified ID</returns>
        </member>
        <member name="E:Dynamo.Core.CustomNodeManager.DefinitionUpdated">
            <summary>
                An event that is fired when a definition is updated
            </summary>
        </member>
        <member name="E:Dynamo.Core.CustomNodeManager.InfoUpdated">
            <summary>
                An event that is fired when new or updated info is available for
                a custom node.
            </summary>
        </member>
        <member name="E:Dynamo.Core.CustomNodeManager.CustomNodeRemoved">
            <summary>
                An event that is fired when a custom node is removed from Dynamo.
            </summary>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.CreateCustomNodeInstance(System.Guid,System.String,System.Boolean)">
            <summary>
                Creates a new Custom Node Instance.
            </summary>
            <param name="id">Identifier referring to a custom node definition.</param>
            <param name="nickname">
                Nickname for the custom node to be instantiated, used for error recovery if
                the given id could not be found.
            </param>
            <param name="isTestMode">
                Flag specifying whether or not this should operate in "test mode".
            </param>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.GuidFromPath(System.String)">
            <summary> 
                Get a function id from a guid assuming that the file is already loaded.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.AddUninitializedCustomNode(System.String,System.Boolean,Dynamo.CustomNodeInfo@)">
            <summary>
                Import a dyf file for eventual initialization.  
            </summary>
            <param name="file">Path to a custom node file on disk.</param>
            <param name="isTestMode">
                Flag specifying whether or not this should operate in "test mode".
            </param>
            <param name="info">
                If the info was successfully processed, this parameter will be set to
                it. Otherwise, it will be set to null.
            </param>
            <returns>True on success, false if the file could not be read properly.</returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.Remove(System.Guid)">
            <summary>
                Attempts to remove all traces of a particular custom node from Dynamo, assuming the node is not in a loaded workspace.
            </summary>
            <param name="guid">Custom node identifier.</param>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.Uninitialize(System.Guid)">
            <summary>
                Uninitialized a custom node. The information for the node is still retained, but the next time
                the node is queried for it's workspace / definition / an instace it will be re-initialized from
                disk.
            </summary>
            <param name="guid">Custom node identifier.</param>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.AddUninitializedCustomNodesInPath(System.String,System.Boolean,System.Boolean)">
            <summary>
                Scans the given path for custom node files, retaining their information in the manager for later
                potential initialization.
            </summary>
            <param name="path">Path on disk to scan for custom nodes.</param>
            <param name="isTestMode">
                Flag specifying whether or not this should operate in "test mode".
            </param>
            <param name="isPackageMember">
                Indicates whether custom node comes from package or not.
            </param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.ScanNodeHeadersInDirectory(System.String,System.Boolean)">
            <summary>
                Enumerates all of the files in the search path and get's their guids.
                Does not instantiate the nodes.
            </summary>
            <returns>False if SearchPath is not a valid directory, otherwise true</returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.SetNodeInfo(Dynamo.CustomNodeInfo)">
            <summary>
            Stores the path and function definition without initializing a node.  Overwrites
            the existing NodeInfo if necessary
            </summary>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.TryGetFunctionWorkspace(System.Guid,System.Boolean,Dynamo.Models.CustomNodeWorkspaceModel@)">
            <summary>
                Get the function workspace from a guid
            </summary>
            <param name="id">The unique id for the node.</param>
            <param name="isTestMode">
                Flag specifying whether or not this should operate in "test mode".
            </param>
            <param name="ws"></param>
            <returns>The path to the node or null if it wasn't found.</returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.TryGetFunctionDefinition(System.Guid,System.Boolean,Dynamo.CustomNodeDefinition@)">
            <summary>
                Get the function definition from a guid.
            </summary>
            <param name="id">Custom node identifier.</param>
            <param name="isTestMode">
                Flag specifying whether or not this should operate in "test mode".
            </param>
            <param name="definition"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.Contains(System.Guid)">
            <summary>
                Tells whether the custom node's unique identifier is inside of the manager (initialized or not)
            </summary>
            <param name="guid">The FunctionId</param>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.Contains(System.String)">
            <summary>
                Tells whether the custom node's name is inside of the manager (initialized or not)
            </summary>
            <param name="name">The name of the custom node.</param>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.IsInitialized(System.String)">
            <summary>
                Tells whether the custom node is initialized in the manager
            </summary>
            <param name="name">The name of the node</param>
            <returns>The name of the </returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.IsInitialized(System.Guid)">
            <summary>
                Tells whether the custom node is initialized in the manager
            </summary>
            <param name="guid">Whether the definition is stored with the manager.</param>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.TryGetInfoFromPath(System.String,System.Boolean,Dynamo.CustomNodeInfo@)">
            <summary>
                Get a guid from a specific path, internally this first calls GetDefinitionFromPath
            </summary>
            <param name="path">The path from which to get the guid</param>
            <param name="isTestMode">
                Flag specifying whether or not this should operate in "test mode".
            </param>
            <param name="info"></param>
            <returns>The custom node info object - null if we failed</returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.OpenCustomNodeWorkspace(System.Xml.XmlDocument,Dynamo.Models.WorkspaceInfo,System.Boolean,Dynamo.Models.WorkspaceModel@)">
            <summary>
                Opens a Custom Node workspace from an XmlDocument, given a pre-constructed WorkspaceInfo.
            </summary>
            <param name="xmlDoc">XmlDocument representing the parsed custom node file.</param>
            <param name="workspaceInfo">Workspace header describing the custom node file.</param>
            <param name="isTestMode">
                Flag specifying whether or not this should operate in "test mode".
            </param>
            <param name="workspace"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.InitializeCustomNode(System.Guid,System.Boolean,Dynamo.Models.CustomNodeWorkspaceModel@)">
            <summary>
                Deserialize a function definition from a given path.  A side effect of this function is that
                the node is added to the dictionary of loadedNodes.  
            </summary>
            <param name="functionId">The function guid we're currently loading</param>
            <param name="isTestMode"></param>
            <param name="workspace">The resultant function definition</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.CreateCustomNode(System.String,System.String,System.String,System.Nullable{System.Guid})">
            <summary>
                Creates a new Custom Node in the manager.
            </summary>
            <param name="name">Name of the custom node.</param>
            <param name="category">Category for the custom node.</param>
            <param name="description">Description of the custom node.</param>
            <param name="functionId">
                Optional identifier to be used for the custom node. By default, will make a new unique one.
            </param>
            <returns>Newly created Custom Node Workspace.</returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.TryGetNodeInfo(System.Guid,Dynamo.CustomNodeInfo@)">
            <summary>
                Attempts to retrieve information for the given custom node identifier.
            </summary>
            <param name="id">Custom node identifier.</param>
            <param name="info"></param>
            <returns>Success or failure.</returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.TryGetNodeInfo(System.String,Dynamo.CustomNodeInfo@)">
            <summary>
                Attempts to retrieve information for the given custom node name. If there are multiple
                custom nodes matching the given name, this method will return any one of them.
            </summary>
            <param name="name">Name of a custom node.</param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Core.CustomNodeManager.Collapse(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},Dynamo.Models.WorkspaceModel,System.Boolean,Dynamo.Models.FunctionNamePromptEventArgs)">
            <summary>
                Collapse a set of nodes in a given workspace.
            </summary>
            <param name="selectedNodes"> The function definition for the user-defined node </param>
            <param name="currentWorkspace"> The workspace where</param>
            <param name="isTestMode"></param>
            <param name="args"></param>
        </member>
        <member name="T:Dynamo.Engine.LinkedListOfList`2">
            <summary>
                A linked list of list (each node in linked list is a list), and node
                can be accessed through a key.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Dynamo.Engine.MemberDocumentNode.#ctor(System.String,System.String)">
            <summary>
            Constructs an instance of MemberDocumentNode object from its 
            given assembly and member name. 
            </summary>
            <param name="assemblyName">The assembly inside which this member 
            resides. If this parameter is null or empty, ArgumentNullException
            is thrown.</param>
            <param name="memberName">The fully qualified name that can be used
            to uniquely identify the member within the same assembly. For an 
            example:
            
                "M:Autodesk.DesignScript.Geometry.Point.ByCoordinates(System.Double,System.Double)"
            
            </param>
            
        </member>
        <member name="T:Dynamo.Engine.CodeCompletion.CodeCompletionServices">
            <summary>
            Interacts with the VM core to provide code completion data to the UI
            </summary>
        </member>
        <member name="M:Dynamo.Engine.CodeCompletion.CodeCompletionServices.GetCompletionsOnType(System.String,System.String,ProtoCore.Namespace.ElementResolver)">
            <summary>
            Determines if the completion string is a valid type and 
            enumerates the list of completion members on the type
            </summary>
            <param name="code"> code typed in the code block </param>
            <param name="stringToComplete"> Class name or declared variable </param>
            <returns> list of method and property members of the type </returns>
        </member>
        <member name="M:Dynamo.Engine.CodeCompletion.CodeCompletionServices.GetClasses">
            <summary>
            Returns the list of names of classes loaded in the Core
            </summary>
            <returns> list of class names </returns>
        </member>
        <member name="M:Dynamo.Engine.CodeCompletion.CodeCompletionServices.GetGlobals">
            <summary>
            Returns the list of names of global methods and properties in Core
            </summary>
            <returns> list of names of global methods and properties </returns>
        </member>
        <member name="M:Dynamo.Engine.CodeCompletion.CodeCompletionServices.SearchCompletions(System.String,System.Guid,ProtoCore.Namespace.ElementResolver)">
            <summary>
            Matches the completion string with classes and
            global methods and properties loaded in the session
            </summary>
            <param name="stringToComplete"> current string being typed which is to be completed </param>
            <param name="guid"> code block node guid to identify current node being typed </param>
            <param name="resolver"></param>
            <returns> list of classes, global methods and properties that match with string being completed </returns>
        </member>
        <member name="M:Dynamo.Engine.CodeCompletion.CodeCompletionServices.SearchTypes(System.String,ProtoCore.Namespace.ElementResolver)">
            <summary>
             Matches the completion string with classes, including primitive types.
            </summary>
            <param name="stringToComplete"></param>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.CodeCompletion.CodeCompletionServices.GetFunctionSignatures(System.String,System.String,System.String,ProtoCore.Namespace.ElementResolver)">
            <summary>
            Returns the list of function signatures of all overloads of a given method
            </summary>
            <param name="code"> code being typed in code block </param>
            <param name="functionName"> given method name for which signature is queried </param>
            <param name="functionPrefix"> class name in case of constructor or static method, OR
            declared instance variable on which method is invoked </param>
            <returns> list of method overload signatures </returns>
        </member>
        <member name="T:Dynamo.Engine.CodeCompletion.CompletionData">
            <summary>
            Code completion data that typically gets displayed on a list as part of 
            the auto-completion feature. This class represents a common currency that
            is view-independent. 
            </summary>
        </member>
        <member name="P:Dynamo.Engine.CodeCompletion.CompletionData.Text">
            <summary>
            Displayed text in completion list
            Class name or fully qualified name
            Method, property name or keyword
            </summary>
        </member>
        <member name="P:Dynamo.Engine.CodeCompletion.CompletionData.Stub">
            <summary>
            Method signatures or any stub description for classes etc.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.CodeCompletion.CompletionData.Description">
            <summary>
            Description of completion item - class, method or property
            </summary>
        </member>
        <member name="P:Dynamo.Engine.CodeCompletion.CompletionData.Type">
            <summary>
            Type of completion item
            </summary>
        </member>
        <member name="T:Dynamo.Engine.SyncDataManager">
            <summary>
                SyncDataManager is to manage the state of a Dynamo node and the
                corresponding AST nodes of that Dynamo node. It is responsible for
                generating GraphSyncData that will be consumed by LiveRunner.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.SyncDataManager.GetSyncData">
            <summary>
                Return graph sync data that will be executed by LiveRunner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.SyncDataManager.Clone">
            <summary>
                Return a clone of current SyncDataManager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.SyncDataManager.ResetStates">
            <summary>
                Reset states of all nodes to State.NoChange. It should be called
                before each running.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.SyncDataManager.MarkForAdding(System.Guid)">
            <summary>
                Notify SyncDataManager that is going to add AST nodes.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:Dynamo.Engine.SyncDataManager.AddNode(System.Guid,ProtoCore.AST.AssociativeAST.AssociativeNode)">
            <summary>
                Add an AST node to the existing AST node list.
            </summary>
            <param name="guid"></param>
            <param name="node"></param>
        </member>
        <member name="M:Dynamo.Engine.SyncDataManager.DeleteNodes(System.Guid)">
            <summary>
                Delete all AST nodes for this Dynamo node.
            </summary>
            <param name="guid"></param>
        </member>
        <member name="T:Dynamo.Engine.IFunctionDescriptor">
            <summary>
                Describes a function, whether imported or defined in a custom node.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.IFunctionDescriptor.DisplayName">
            <summary>
                Name to be displayed for the function.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.IFunctionDescriptor.MangledName">
            <summary>
                An unique name to identify a function. It is used to create 
                a corresponding node instance
            </summary>
        </member>
        <member name="P:Dynamo.Engine.IFunctionDescriptor.ReturnKeys">
            <summary>
                Return keys for multi-output functions.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.IFunctionDescriptor.Parameters">
            <summary>
                Function parameters
            </summary>
        </member>
        <member name="P:Dynamo.Engine.IFunctionDescriptor.FunctionName">
            <summary>
                Function name.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.IFunctionDescriptor.ReturnType">
            <summary>
                Return Type
            </summary>
        </member>
        <member name="T:Dynamo.Engine.FunctionDescriptor">
            <summary>
                Describe a DesignScript function in a imported library
            </summary>
        </member>
        <member name="F:Dynamo.Engine.FunctionDescriptor.summary">
            <summary>
                A comment describing the Function
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.Assembly">
            <summary>
                Full path to the assembly the defined this function
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.ClassName">
            <summary>
                Class name of this function. If the functino is global function,
                return String.Empty.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.FunctionName">
            <summary>
                Function name.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.Parameters">
            <summary>
                Function parameters.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.ReturnType">
            <summary>
                Function return type.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.ReturnKeys">
            <summary>
                If the function returns a dictionary, ReturnKeys is the key collection
                used in returned dictionary.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.IsVarArg">
            <summary>
                Does the function accept a variable number of arguments?
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.Type">
            <summary>
                Function type.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.Description">
            <summary>
                A comment describing the function along with the signature
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.Returns">
            <summary>
                If the XML documentation for the function includes a returns field,
                this parameter contains a collection of tuples of output names to
                descriptions.
            
                Otherwise, this list will be empty.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.InputParameters">
            <summary>
                Inputs for Node
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.Category">
            <summary>
                The category of this function.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.QualifiedName">
            <summary>
                The string that is used to search for this function.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.MangledName">
            <summary>
                A unique name to identify a function. It is necessary when a
                function is overloaded.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.Signature">
            <summary>
                The full signature of the function.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.UserFriendlyName">
            <summary>
                Return a user friendly name. E.g., for operator '+' it will return
                'Add'
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.DisplayName">
            <summary>
                QualifiedName with leading namespaces removed.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.IsVisibleInLibrary">
            <summary>
                This attribute sets, if this function is shown in library or not.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.FunctionDescriptor.CanUpdatePeriodically">
            <summary>
            This attribute sets whether the function enables periodic update of the workspace.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.FunctionGroup">
            <summary>
                A group of overloaded functions
            </summary>
        </member>
        <member name="M:Dynamo.Engine.FunctionGroup.AddFunctionDescriptor(Dynamo.Engine.FunctionDescriptor)">
            <summary>
                Add a function descriptor to the group
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.FunctionGroup.GetFunctionDescriptor(System.String)">
            <summary>
                Get function descriptor from mangled function name
            </summary>
            <param name="managledName"></param>
            <returns></returns>
        </member>
        <member name="P:Dynamo.Engine.LibraryCustomization.ResourceAssembly">
            <summary>
            Resources assembly. Assembly where icons are saved.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.LibraryServices">
            <summary>
                LibraryServices is a singleton class which manages builtin libraries
                as well as imported libraries. It is across different sessions.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.UpdateLibraryCoreData">
            <summary>
            Copy properties from the liveCore
            The properties to copy are only those used by the library core
            </summary>
        </member>
        <member name="P:Dynamo.Engine.LibraryServices.ImportedLibraries">
            <summary>
                Get a list of imported libraries.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.LibraryServices.BuiltinFunctionGroups">
            <summary>
                Get builtin function groups.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dynamo.Engine.LibraryServices.ImportedFunctionGroups">
            <summary>
                Get all imported function groups.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.GetFunctionGroups(System.String)">
            <summary>
                Get function groups from an imported library.
            </summary>
            <param name="library">Library path</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.GetAllFunctionGroups">
            <summary>
            Return all function groups.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.GetFunctionDescriptor(System.String,System.String)">
            <summary>
                Get function descriptor from the managled function name.
                name.
            </summary>
            <param name="library">Library path</param>
            <param name="mangledName">Mangled function name</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.GetFunctionDescriptor(System.String)">
            <summary>
                Get function descriptor from the managed function name.
            </summary>
            <param name="managledName"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.IsLibraryLoaded(System.String)">
            <summary>
            Checks if a given library is already loaded or not.
            Only unique assembly names are allowed to be loaded
            </summary>
            <param name="library"> can be either the full path or the assembly name </param>
            <returns> true even if the same library name is loaded from different paths </returns>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.ImportLibrary(System.String)">
            <summary>
                Import a library (if it hasn't been imported yet).
            </summary>
            <param name="library"></param>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.PopulateBuiltIns">
            <summary>
                Add DesignScript builtin functions to the library.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.PopulateOperators">
            <summary>
                Add operators to the library.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.PopulatePreloadLibraries">
            <summary>
                Polulate preloaded libraries.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.LibraryServices.TryGetDefaultArgumentFromAttribute(ProtoCore.DSASM.ArgumentInfo,ProtoCore.AST.AssociativeAST.AssociativeNode@)">
            <summary>
            Try get default argument expression from DefaultArgumentAttribute, 
            and parse into Associaitve AST node. 
            </summary>
            <param name="arg"></param>
            <param name="defaultArgumentNode"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Engine.XmlDocumentationExtensions">
            <summary>
            Provides extension methods for reading XML documentation from reflected members.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.XmlDocumentationExtensions.GetDescription(Dynamo.Library.TypedParameter,System.Xml.XmlReader)">
            <summary>
            Get a description of a parameter from the its documentation xml,
            using the corresponding FunctionDescriptor.
            </summary>
            <param name="parameter">The TypedParameter object corresponding to the parameter.</param>
            <param name="xml"></param>
            <returns>The contents of the documentation description for the parameter.</returns>
        </member>
        <member name="M:Dynamo.Engine.XmlDocumentationExtensions.GetSummary(Dynamo.Engine.FunctionDescriptor,System.Xml.XmlReader)">
            <summary>
            Get a summary of a method from its documentation xml, 
            using the corresponding FunctionDescriptor object.
            </summary>
            <param name="member">The FunctionDescriptor object corresponding to the method.</param>
            <param name="xml"></param>
            <returns>The contents of the documentation summary tag.</returns>
        </member>
        <member name="M:Dynamo.Engine.XmlDocumentationExtensions.GetSearchTags(Dynamo.Engine.FunctionDescriptor,System.Xml.XmlReader)">
            <summary>
            Get a collection of search tags for a method from its documentation xml,
            using the corresponding FunctionDescriptor object.
            </summary>
            <param name="member">The FunctionDescriptor object corresponding to the method.</param>
            <param name="xml"></param>
            <returns>A collection of search tags.</returns>
        </member>
        <member name="M:Dynamo.Engine.XmlDocumentationExtensions.GetSearchTagWeights(Dynamo.Engine.FunctionDescriptor,System.Xml.XmlReader)">
            <summary>
            Get a collection of search tag weights for a method from its documentation xml,
            using the corresponding FunctionDescriptor object.
            </summary>
            <param name="member">The FunctionDescriptor object corresponding to the method.</param>
            <param name="xml"></param>
            <returns>A collection of search weights, or an empty collection if the search weights tag is emtpy.</returns>
        </member>
        <member name="M:Dynamo.Engine.XmlDocumentationExtensions.GetReturns(Dynamo.Engine.FunctionDescriptor,System.Xml.XmlReader)">
            <summary>
            Get a collection of return descriptions for a method from its documentation xml,
            using the corresponding FunctionDescriptor object.
            </summary>
            <param name="member">The FunctionDescriptor object corresponding to the method.</param>
            <param name="xml"></param>
            <returns>A collection of return descriptions from the documentation returns tag.</returns>
        </member>
        <member name="T:Dynamo.Engine.CodeGeneration.IAstNodeContainer">
            <summary>
            Get notification for AST compilation events.                                                 
            </summary>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.IAstNodeContainer.OnCompiling(System.Guid)">
            <summary>
            Indicates to start compiling a NodeModel to AST nodes.
            </summary>
            <param name="nodeGuid"></param>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.IAstNodeContainer.OnCompiled(System.Guid,System.Collections.Generic.IEnumerable{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            Indicates a NodeModel has been compiled to AST nodes. 
            </summary>
            <param name="nodeGuid"></param>
            <param name="astNodes"></param>
        </member>
        <member name="T:Dynamo.Engine.CodeGeneration.CompilingEventArgs">
            <summary>
            This event is triggerred when compiling a NodeModel to AST nodes.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.CompilingEventArgs.#ctor(System.Guid)">
            Construct ASTBuildingEventArgs with NodeModel.
        </member>
        <member name="P:Dynamo.Engine.CodeGeneration.CompilingEventArgs.Node">
            <summary>
            Guid of NodeModel that is being compiled to AST.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.CodeGeneration.CompiledEventArgs">
            <summary>
            This event is triggered when a NodeModel has been compiled to a list of
            AST nodes.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.CompiledEventArgs.#ctor(System.Guid,System.Collections.Generic.IEnumerable{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            Construct ASTBuiltEventArgs with NodeModel and AST nodes.
            </summary>
            <param name="node"></param>
            <param name="astNodes"></param>
        </member>
        <member name="P:Dynamo.Engine.CodeGeneration.CompiledEventArgs.Node">
            <summary>
            Guid of node that has been built to AST nodes.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.CodeGeneration.CompiledEventArgs.AstNodes">
            <summary>
            Built AST nodes.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.CodeGeneration.CompilationContext">
            <summary>
            The context of AST compilation
            </summary>
        </member>
        <member name="F:Dynamo.Engine.CodeGeneration.CompilationContext.None">
            <summary>
            No specific context.
            </summary>
        </member>
        <member name="F:Dynamo.Engine.CodeGeneration.CompilationContext.DeltaExecution">
            <summary>
            Compiled AST nodes finally will be executed.
            </summary>
        </member>
        <member name="F:Dynamo.Engine.CodeGeneration.CompilationContext.NodeToCode">
            <summary>
            Compiled AST nodes used in node to code.
            </summary>
        </member>
        <member name="F:Dynamo.Engine.CodeGeneration.CompilationContext.PreviewGraph">
            <summary>
            Compiled AST nodes used in previwing graph.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.CodeGeneration.AstBuilder">
            <summary>
            AstBuilder is a factory class to create different kinds of AST nodes.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.AstBuilder.#ctor(Dynamo.Engine.CodeGeneration.IAstNodeContainer)">
            <summary>
            Construct a AstBuilder with AST node contiainer.
            </summary>
            <param name="nodeContainer"></param>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.AstBuilder.TopologicalSort(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel})">
            <summary>
                Sort nodes in topological order.
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.AstBuilder.BfsTraverse(Dynamo.Models.NodeModel,System.Collections.Generic.Dictionary{Dynamo.Models.NodeModel,Dynamo.Engine.CodeGeneration.AstBuilder.MarkFlag},System.Collections.Generic.Queue{Dynamo.Models.NodeModel})">
            <summary>
            Starts from the input node as root, do breadth-first and post-order
            traversal of the graph (inputs nodes as children nodes). Breadth-first
            traversal ensures all inputs nodes are visited in their input order 
            and post-order traversal ensures all upstream nodes are visited 
            firstly. 
            </summary>
            <param name="node">Root node</param>
            <param name="nodeFlags">Dictionary to record if a node has been visited or not</param>
            <param name="sortedNodes">Record all visited nodes</param>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.AstBuilder.TopologicalSortForGraph(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel})">
             <summary>
             Topological sort *the whole graph*. If the input nodes are part of a
             graph, it does not promise to generate a good topological order. For 
             example, for the following graph:
             
                     +---+
                     | A | -----+
                     +---+      +----> +---+
                                       | C |
                                +----> +---+
                     +---+      |
                     | B | -----+
                     +---+
             
             Their ideal topological order is A -> B -> C. If the input is only {A, B}, 
             it may return {B, A} which is not OK in node to code.
            
             Note it is much slower than TopologicalSort().
             </summary>
             <param name="nodes"></param>
             <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.AstBuilder.CompileToAstNodes(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},Dynamo.Engine.CodeGeneration.CompilationContext,System.Boolean)">
            <summary>
            Compile a collection of NodeModel to AST nodes in different contexts.
            If the context is ForNodeToCode, nodes should already be sorted in 
            topological order.
            </summary>
            <param name="nodes"></param>
            <param name="context"></param>
            <param name="verboseLogging"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.AstBuilder.CompileCustomNodeDefinition(System.Guid,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Collections.Generic.IEnumerable{ProtoCore.AST.AssociativeAST.AssociativeNode},System.Collections.Generic.IEnumerable{Dynamo.Library.TypedParameter},System.Boolean)">
            <summary>
                Compiles a collection of Dynamo nodes into a function definition for a custom node.
            </summary>
            <param name="functionId"></param>
            <param name="returnKeys"></param>
            <param name="functionName"></param>
            <param name="funcBody"></param>
            <param name="outputNodes"></param>
            <param name="parameters"></param>
            <param name="verboseLogging"></param>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.AstBuilder.OnAstNodeBuilding(System.Guid)">
            <summary>
                Notify IAstNodeContainer that starts building AST nodes.
            </summary>
            <param name="nodeGuid"></param>
        </member>
        <member name="M:Dynamo.Engine.CodeGeneration.AstBuilder.OnAstNodeBuilt(System.Guid,System.Collections.Generic.IEnumerable{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
                Notify IAstNodeContainer that AST nodes have been built.
            </summary>
            <param name="nodeGuid"></param>
            <param name="astNodes"></param>
        </member>
        <member name="T:Dynamo.Engine.FunctionType">
            <summary>
                The type of a function.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.EngineController">
            <summary>
            A controller to coordinate the interactions between some DesignScript
            sub components like library managment, live runner and so on.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.EngineController.LiveRunnerCore">
            <summary>
            Get DesignScript core.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.EngineController.LiveRunnerRuntimeCore">
            <summary>
            Get DesignScript runtime core.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.EngineController.LibraryServices">
            <summary>
            Return libary service instance.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.EngineController.IsDisposed">
            <summary>
            A property defining whether the EngineController has been disposed or not.
            This is a conservative field, as there should only be one owner of a valid
            EngineController or not.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.EngineController.GetFunctionGroups">
            <summary>
            Return all function groups.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.EngineController.ImportLibrary(System.String)">
            <summary>
            Import library.
            </summary>
            <param name="library"></param>
        </member>
        <member name="M:Dynamo.Engine.EngineController.GetMirror(System.String)">
            <summary>
            Get runtime mirror for variable.
            </summary>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.EngineController.GetGraphicItems(System.String)">
            <summary>
            Get a list of IGraphicItem of variable if it is a geometry object;
            otherwise returns null.
            </summary>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.EngineController.GenerateGraphSyncData(System.Collections.Generic.ICollection{Dynamo.Models.NodeModel},System.Boolean)">
            <summary>
            Generate graph sync data based on the input Dynamo nodes. Return 
            false if all nodes are clean.
            </summary>
            <param name="nodes"></param>
            <param name="verboseLogging"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.EngineController.ComputeSyncData(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Boolean)">
            <summary>
            This method is called on the main thread from UpdateGraphAsyncTask
            to generate GraphSyncData for a list of updated nodes.
            </summary>
            <param name="nodes"></param>
            <param name="updatedNodes">The list of all updated nodes.</param>
            <param name="verboseLogging"></param>
            <returns>This method returns true if GraphSyncData is generated from 
            the list of updated nodes. If updatedNodes is empty or does not 
            result in any GraphSyncData, then this method returns false.</returns>
        </member>
        <member name="M:Dynamo.Engine.EngineController.PreviewGraphSyncData(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Boolean)">
            <summary>
             This is called on the main thread from PreviewGraphSyncData
             to generate the list of node id's that will be executed on the next run
            </summary>
            <param name="updatedNodes">The updated nodes.</param>
            <returns>This method returns the list of all reachable node id's from the given
            updated nodes</returns>
        </member>
        <member name="P:Dynamo.Engine.EngineController.HasPendingGraphSyncData">
            <summary>
            Return true if there are graph sync data in the queue waiting for
            being executed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.EngineController.GenerateGraphSyncDataForCustomNode(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},Dynamo.CustomNodeDefinition,System.Boolean)">
            <summary>
            Generate graph sync data based on the input Dynamo custom node information.
            Return false if all nodes are clean.
            </summary>
            <param name="nodes"></param>
            <param name="definition"></param>
            <param name="verboseLogging"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.EngineController.ProcessPendingCustomNodeSyncData(Dynamo.Core.Threading.IScheduler)">
            <summary>
            DynamoModel calls this method prior to scheduling a graph update for
            the home workspace. This method is called to schedule custom node 
            compilation since the home workspace update may depend on it. Any 
            updates to a CustomNodeDefinition will cause GraphSyncData to be added 
            to "pendingCustomNodeSyncData" queue.
            </summary>
            <param name="scheduler">The scheduler on which custom node compilation 
            task can be scheduled.</param>
            
        </member>
        <member name="M:Dynamo.Engine.EngineController.UpdateGraphImmediate(ProtoScript.Runners.GraphSyncData)">
            <summary>
            This method is called by UpdateGraphAsyncTask in the context of 
            ISchedulerThread to kick start an update through LiveRunner.
            </summary>
            <param name="graphSyncData">The GraphSyncData that was generated by 
            a prior call to ComputeSyncData at the time UpdateGraphAsyncTask was 
            scheduled.</param>
            
        </member>
        <member name="M:Dynamo.Engine.EngineController.UpdateGraph(System.Collections.Generic.ICollection{Dynamo.Models.NodeModel},System.Exception@)">
            <summary>
            Update graph with graph sync data.
            </summary>
            <param name="nodes"></param>
            <param name="fatalException">The exception that is not handled 
            anywhere within the LiveRunnerServices.UpdateGraph method. This 
            parameter will always be set to null if there is no unhandled 
            exception thrown from within the UpdateGraph call.</param>
            <returns>Returns true if any update has taken place, or false 
            otherwise.</returns>
        </member>
        <member name="M:Dynamo.Engine.EngineController.LibraryLoaded(System.Object,Dynamo.Engine.LibraryServices.LibraryLoadedEventArgs)">
            <summary>
                LibraryLoaded event handler.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.EngineController.NodeDeleted(Dynamo.Models.NodeModel)">
            <summary>
            NodeDeleted event handler.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Dynamo.Engine.TraceReconciliationEventArgs.CallsiteToOrphanMap">
            <summary>
            A list of ISerializable items.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.LiveRunnerServices.GetMirror(System.String,System.Boolean)">
            <summary>
            TPDP
            </summary>
            <param name="var"></param>
            <param name="verboseLogging"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.LiveRunnerServices.UpdateGraph(ProtoScript.Runners.GraphSyncData,System.Boolean)">
            <summary>
            Update graph with graph sync data.
            </summary>
            <param name="graphData"></param>
            <param name="verboseLogging"></param>
        </member>
        <member name="M:Dynamo.Engine.LiveRunnerServices.PreviewGraph(ProtoScript.Runners.GraphSyncData,System.Boolean)">
            <summary>
            Preview graph with graph sync data.
            </summary>
            <param name="graphData"></param>
        </member>
        <member name="M:Dynamo.Engine.LiveRunnerServices.GetRuntimeWarnings">
            <summary>
            Return runtime warnings for this run.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.LiveRunnerServices.GetBuildWarnings">
            <summary>
            Return build warnings for this run.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.LiveRunnerServices.ReloadAllLibraries(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Each time when a new library is imported, LiveRunner need to reload
            all libraries and reset VM.
            </summary>
            <param name="libraries"></param>
        </member>
        <member name="M:Dynamo.Engine.LiveRunnerServices.GraphUpdateReady(System.Object,ProtoScript.Runners.GraphUpdateReadyEventArgs)">
            <summary>
            GraphUpdateReady event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamo.Engine.LiveRunnerServices.NodeValueReady(System.Object,ProtoScript.Runners.NodeValueReadyEventArgs)">
            <summary>
            NodeValueReady event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.INamingProvider">
            <summary>
            Node to code will create some variables, and if it is able to know the
            type of expression, it could give a more meaningful variable prefix. 
            </summary>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.INamingProvider.GetTypeDependentName(ProtoCore.Type)">
            <summary>
            Get a name for specified type. This name will be used as the prefix
            for variable that created in node to code. It should return a empty
            string if fails to generate one.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.NodeToCodeResult">
            <summary>
            The result of converting nodes to code. As when a node is converted to 
            code, its inputs and outputs may be renamed to avoid confliction, the
            result contains maps for inputs/new-inputs and outputs/new-outputs.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.NodeToCode.NodeToCodeResult.AstNodes">
            <summary>
            AST nodes that compiled from NodeModel.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.NodeToCode.NodeToCodeResult.InputMap">
            <summary>
            The map between original input name and new name.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.NodeToCode.NodeToCodeResult.OutputMap">
            <summary>
            The map between original output name and new name.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.NodeToCodeUndoHelper">
            <summary>
            An undo helper class that is used in node-to-code conversion. It helps to 
            avoid recording redundant user actions (e.g. deletion right after creation 
            will not be recorded). This typically happens when there are multiple code 
            block nodes being created as part of node-to-code conversion, during which 
            some connectors will be created and later on deleted all within the same 
            conversion process.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeUndoHelper.RecordCreation(Dynamo.Models.ModelBase)">
            <summary>
            Add a creation action.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeUndoHelper.RecordDeletion(Dynamo.Models.ModelBase)">
            <summary>
            Add a deletion action. If a creation action for the same model has
            been added, that creation action will be removed and this deletion
            action won't be added.
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeUndoHelper.ApplyActions(Dynamo.Core.UndoRedoRecorder)">
            <summary>
            Record all actions in recorder.
            </summary>
            <param name="recorder"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeUndoHelper.ActionCount">
            <summary>
            Return the count of recorded actions.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.IdentifierVisitor">
            <summary>
            Traverse all identifiers in depth-first order and for each 
            identifier apply a function to it.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.IdentifierReplacer">
            <summary>
            Replace an identifier with a constant value.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.ShortestQualifiedNameReplacer">
            <summary>
            Replace a fully qualified function call with short name. 
            </summary>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.IdentifierFinder">
            <summary>
            Check if an identifier is used.
            </summary>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NumberingState">
            <summary>
            The numbering state of a variable.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NumberingState.Variable">
            <summary>
            Variable name.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NumberingState.NumberedVariable">
            <summary>
            Variable name with number suffix.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NumberingState.ID">
            <summary>
            Number suffix.
            </summary>
        </member>
        <member name="P:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NumberingState.IsNewSession">
            <summary>
            Indicate it is for ASTs in a new code block
            </summary>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NumberingState.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="variable"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NumberingState.BumpID">
            <summary>
            Increase number. 
            </summary>
        </member>
        <member name="T:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.TypeDependentNameGenetrator">
            <summary>
            Generate type-dependent short variable name in format: type+ID.
            </summary>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.GetCliques(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel})">
            <summary>
            For a selection, output partitions that each group of node can be
            converted to code.
            </summary>
            <param name="selection"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.GetInputOutputMap(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.Dictionary{System.String,ProtoCore.Type}@)">
             <summary>
             Collect input, output and renaming maps.
            
             Inputs are input variables from external node models, finally
             shorter names will be given for these inputs. Note when the
             function returns, values in inputMap are always empty strings.
            
             Outputs are variables that output to external node models. 
             Shorter names will be given for these outupts. But if outputs are
             from code block node, as variables may be re-named during variable
             numbering, we can't simply record orignal output variable names. So
             when function returns, if a variable is from output port of non 
             code block node, there is an entry:
             
                 outputMap[var_node_model_guid] = "" 
              
             If a variable, say "foo", is from code block node, there are two 
             entries:
             
                 outputMap[foo_node_model_guid] = "foo"
                 outputMap[foo%node_model_guid] = foo_node_model_guid
             
             We need second entry because because finally we will use outputMap
             to restore the connection, and if "foo" is renamed to something 
             else, say "foo21", we can find the value of key from the second 
             entry and update the first entry to:
             
                 outputMap[foo_ndoe_mode_guid] = "foo21".
             
             Renaming map are similar to output map. The difference is these
             variables used internally and they may be renamed as well. In 
             some sense, it is just subset of outputMap.
             </summary>
             <param name="nodes"></param>
             <param name="inputMap"></param>
             <param name="outputMap"></param>
             <param name="renamingMap"></param>
             <param name="typeHintMap"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.IsTempVarFromCodeBlockNode(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Check if this identifier is a temporary variable that output from
            other code block node. 
            </summary>
            <param name="ident"></param>
            <param name="renamingMap"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.VariableNumbering(ProtoCore.Core,ProtoCore.AST.AssociativeAST.AssociativeNode,Dynamo.Models.NodeModel,System.Collections.Generic.Dictionary{System.String,Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NumberingState},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Renumber variables used in astNode.
            </summary>
            <param name="astNode"></param>
            <param name="numberingMap"></param>
            <param name="variableMap"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.VariableRemapping(ProtoCore.Core,ProtoCore.AST.AssociativeAST.AssociativeNode,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            Remap variables.
            </summary>
            <param name="astNode"></param>
            <param name="renamingMap"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.ShortNameMapping(ProtoCore.Core,ProtoCore.AST.AssociativeAST.AssociativeNode,System.Collections.Generic.Dictionary{System.String,System.String},Dynamo.Engine.NodeToCode.NodeToCodeCompiler.TypeDependentNameGenetrator,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,ProtoCore.Type})">
            <summary>
            Map variable to shorter name.
            </summary>
            <param name="core"></param>
            <param name="astNode"></param>
            <param name="shortNameMap"></param>
            <param name="nameGenerator"></param>
            <param name="mappedVariables"></param>
            <param name="typeHints"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.GetNextShortName(Dynamo.Engine.NodeToCode.NodeToCodeCompiler.TypeDependentNameGenetrator,System.Collections.Generic.Dictionary{System.String,ProtoCore.Type},System.Collections.Generic.HashSet{System.String},System.String)">
            <summary>
            Get type-dependent short name based on the type hint of input variable
            </summary>
            <param name="generator"></param>
            <param name="typeHints"></param>
            <param name="mappedVariables"></param>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.ConstantPropagationForTemp(Dynamo.Engine.NodeToCode.NodeToCodeResult,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove temporary assignment from the result. That is, removing 
            assignment "t1 = x" where t1 is a temporary variable. This kind
            of assginment can be safely removed, but now all nodes that 
            connect to "t1" should re-connect to "x". For example, "a = t1" 
            now should be updated to "a = x".
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.ReplaceWithShortestQualifiedName(ProtoCore.DSASM.ClassTable,System.Collections.Generic.IEnumerable{ProtoCore.AST.AssociativeAST.AssociativeNode},ProtoCore.Namespace.ElementResolver)">
            <summary>
            Replace fully qualified class name with shortest uniquely qualified name. 
            
            For example, in presence of Rhino.Geometry.Point, replace
            
                Autodesk.Geometry.Point.ByCoordinates(...)
                
            with
            
                Autodesk.Point.ByCoordinates(...)
            </summary>
            <param name="classTable"></param>
            <param name="asts">Input ASTs</param>
            <param name="resolver"></param>
        </member>
        <member name="M:Dynamo.Engine.NodeToCode.NodeToCodeCompiler.NodeToCode(ProtoCore.Core,System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},Dynamo.Engine.NodeToCode.INamingProvider)">
             <summary>
             Compile a set of nodes to ASTs. 
            
             Note: 
             1. Nodes should be a clique with regarding to convertibility and 
                selection state. That is, these nodes can be safely to be 
                converted into a single code block node. It shouldn't have 
                unconvertible or unselected node on any path (if there is) that 
                connects any two of these nodes, otherwise there will be 
                circular references between unconvertible/unselected node and
                code block node.
                
                To split arbitary node set into cliques, use 
                NodeToCodeUtils.GetCliques().
            
             2. WorkspaceNodes are all nodes in current workspace. We need the
                whole graph so that each to-be-converted node will have correct
                order in the final code block node.
             </summary>
             <param name="core">Library core</param>
             <param name="workspaceNodes">The whole workspace nodes</param>
             <param name="nodes">Selected node that can be converted to a single code block node</param>
             <param name="namingProvider"></param>
             <returns></returns>
        </member>
        <member name="T:Dynamo.Extensions.IExtensionLoader">
            <summary>
            Handles loading extensions given an extension definition files path
            </summary>
        </member>
        <member name="T:Dynamo.Extensions.IExtensionManager">
            <summary>
            This class handles registration, lookup, and disposal of extensions.  There should only 
            be one of these per application instance.
            </summary>
        </member>
        <member name="M:Dynamo.Extensions.IExtensionManager.Add(Dynamo.Extensions.IExtension)">
            <summary>
            Add an extension to the current application session.
            </summary>
        </member>
        <member name="M:Dynamo.Extensions.IExtensionManager.Remove(Dynamo.Extensions.IExtension)">
            <summary>
            Remove an extension from the current application session.
            </summary>
        </member>
        <member name="P:Dynamo.Extensions.IExtensionManager.Extensions">
            <summary>
            The collection of currently registered extensions
            </summary>
        </member>
        <member name="E:Dynamo.Extensions.IExtensionManager.ExtensionAdded">
            <summary>
            Event raised when an extension is added
            </summary>
        </member>
        <member name="E:Dynamo.Extensions.IExtensionManager.ExtensionRemoved">
            <summary>
            Event raised when an extension is removed
            </summary>
        </member>
        <member name="T:Dynamo.Extensions.IExtension">
            <summary>
            An extension to the model layer of Dynamo
            </summary>
        </member>
        <member name="P:Dynamo.Extensions.IExtension.UniqueId">
            <summary>
            A unique id for this extension instance.  
            
            There may be multiple instances of the same type, but the application 
            will *not* allow two instances to coexist with the same id.
            </summary>
        </member>
        <member name="P:Dynamo.Extensions.IExtension.Name">
            <summary>
            A name for the Extension.  This is used for more user-readable logging.
            </summary>
        </member>
        <member name="M:Dynamo.Extensions.IExtension.Startup(Dynamo.Extensions.StartupParams)">
            <summary>
            Action to be invoked when Dynamo begins to start up. 
            
            This action is *not* guaranteed to be invoked unless the extension is 
            already installed at startup. 
            
            Exceptions thrown from this method will be caught by Dynamo and 
            logged.
            </summary>
        </member>
        <member name="M:Dynamo.Extensions.IExtension.Ready(Dynamo.Extensions.ReadyParams)">
            <summary>
            Action to be invoked when the Dynamo has started up and is ready
            for user interaction.
            
            This action is guaranteed to be called even if the extension is installed
            after startup.  
            
            Exceptions thrown from this method will be caught by Dynamo and 
            logged.
            </summary>
        </member>
        <member name="M:Dynamo.Extensions.IExtension.Shutdown">
            <summary>
            Action to be invoked when shutdown has begun.
            </summary>
        </member>
        <member name="T:Dynamo.Extensions.ReadyParams">
            <summary>
            Application-level handles provided to an extension when 
            Dynamo has started and is ready for interaction
            </summary>
        </member>
        <member name="T:Dynamo.Extensions.StartupParams">
            <summary>
            Application-level handles provided to an extension when
            Dynamo is starting up and is not yet ready for interaction.  
            </summary>
        </member>
        <member name="E:Dynamo.Interfaces.IRenderPackageSource`1.RenderPackagesUpdated">
            <summary>
            An event raised then the source has updated IRenderPackages.
            </summary>
        </member>
        <member name="T:Dynamo.Interfaces.IRenderPackageFactory">
            <summary>
            IRenderPackageFactory is used to create IRenderPackage objects suitable 
            for a specific rednering pipeline. IRenderPackages generated from IRenderPackageFactory 
            classes contain tessellated geometry for rendering, which may be stored 
            in different forms depending on the rendering pipeline being used. 
            </summary>
        </member>
        <member name="M:Dynamo.Interfaces.IRenderPackageFactory.CreateRenderPackage">
            <summary>
            Create an IRenderPackage object of the type manufactured by this factory.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathResolver.AdditionalResolutionPaths">
            <summary>
            Additional directories that should be considered when path resolution
            is done for a library that does not contain full path information. 
            The return value of this property should never be null. Each entry 
            must represent a valid directory, otherwise DirectoryNotFoundException
            exception is thrown.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathResolver.AdditionalNodeDirectories">
            <summary>
            Additional directories in which node assemblies can be located. The 
            return value of this property should never be null. Each entry must 
            represent a valid directory, otherwise DirectoryNotFoundException
            exception is thrown.  
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathResolver.PreloadedLibraryPaths">
            <summary>
            Libraries to be preloaded as part of Dynamo start up sequence. Each
            entry in this list can either represent full path to a library, or 
            just the assembly name. If absolute path information is not supplied,
            the library will be looked up through both predefined and additional 
            resolution paths. The return value of this property should never be 
            null.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathResolver.UserDataRootFolder">
            <summary>
            This property represents the root folder where user specific data files 
            are stored. If this property returns a null or empty string, then 
            PathManager falls back to using "%ProgramData%\Dynamo". If this property
            returns a string that does not represent an existing folder, PathManager 
            will attempt to create a new directory. If the property does not represent
            a valid path string, an exception will be thrown by the underlying system 
            IO API invoked. Note that this path should not include the version number 
            as it will be appended by PathManager.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathResolver.CommonDataRootFolder">
            <summary>
            This property represents the root folder where application common data 
            files (i.e. shared among all users on the same machine) are stored. If 
            this property returns a null or empty string, then PathManager falls 
            back to using "%AppData%\Dynamo". If this property returns a string 
            that does not represent an existing folder, PathManager will attempt 
            to create a new directory. If the property does not represent a valid 
            path string, an exception will be thrown by the underlying system IO 
            API invoked. Note that this path should not include the version number 
            as it will be appended by PathManager.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.DynamoCoreDirectory">
            <summary>
            The directory in which DynamoCore.dll is guaranteed to be found.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.UserDataDirectory">
            <summary>
            The local directory that contains user specific data files.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.CommonDataDirectory">
            <summary>
            The local directory that contains common data files among users.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.DefaultUserDefinitions">
            <summary>
            The default directory that contains custom nodes created by the user.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.DefinitionDirectories">
            <summary>
            Directories from where custom nodes are to be loaded. The implementor
            of this interface method should always guarantee that a non-empty 
            list is returned, and that the first entry represents the default 
            custom node directory. Custom nodes created are stored in the
            default directory, which is specific to the current user. Changes to
            custom nodes may or may not be saved to their current location depeding
            on write access.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.CommonDefinitions">
            <summary>
            The local directory that contains custom nodes created by all users.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.LogDirectory">
            <summary>
            The local directory where log files are generated. This directory is 
            specific to the current user.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.DefaultPackagesDirectory">
            <summary>
            The default directory for saving packages downloaded through
            the package manager. This directory is specific to the current user.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.PackagesDirectories">
            <summary>
            Directories from where packages are to be loaded. The implementor
            of this interface method should always guarantee that a non-empty 
            list is returned, and that the first entry represents the default 
            package directory. Packages downloaded through package manager are 
            stored in the default package directory, which is specific to the 
            current user.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.ExtensionsDirectory">
            <summary>
            The directory, which contains ExtensionDefinition .xml files
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.ViewExtensionsDirectory">
            <summary>
            The directory, which contains ViewExtensionDefinition.xml files
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.SamplesDirectory">
            <summary>
            The root directory where all sample files are stored. This directory
            is common to all users on the machine.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.BackupDirectory">
            <summary>
            The directory where the automatically saved files will be stored.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.PreferenceFilePath">
            <summary>
            Full path to the preference xml file. This setting file is specific 
            to the current user.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.GalleryFilePath">
            <summary>
            Full path to the GalleryContent xml file. The file is located in
            the AppData/Dynamo/version/locale/
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.NodeDirectories">
            <summary>
            Folders in which node assemblies can be located.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.PreloadedLibraries">
            <summary>
            A list of node assembly names to be preloaded with Dynamo.
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.MajorFileVersion">
            <summary>
            Major version of assembly file
            </summary>
        </member>
        <member name="P:Dynamo.Interfaces.IPathManager.MinorFileVersion">
            <summary>
            Minor version of assembly file
            </summary>
        </member>
        <member name="M:Dynamo.Interfaces.IPathManager.AddResolutionPath(System.String)">
            <summary>
            Call this method to add additional path for consideration when path 
            resolution take place.
            </summary>
            <param name="path">The full path to be considered when PathManager
            attempt to resolve a file path. If this argument does not represent 
            a valid directory path, this method throws an exception.</param>
        </member>
        <member name="M:Dynamo.Interfaces.IPathManager.ResolveLibraryPath(System.String@)">
            <summary>
            Given an initial file path with the file name, resolve the full path
            to the target file.
            </summary>
            <param name="library">The initial library file path. This argument 
            can optionally include the full path with a target file name. If a 
            full path is given and it represents an invalid file path, the file 
            name will be searched for in additional resolution paths.</param>
            <returns>Returns true if the requested file can be located, or false
            otherwise.</returns>
        </member>
        <member name="M:Dynamo.Interfaces.IPathManager.ResolveDocumentPath(System.String@)">
            <summary>
            Given an initial RTF document file name, this method returns the 
            absolute path of the file, if one exists.
            </summary>
            <param name="document">The name of the RTF file. This argument cannot 
            be null or empty.</param>
            <returns>Returns true if the requested document can be located, or 
            false otherwise.</returns>
        </member>
        <member name="T:Dynamo.Interfaces.ISource`1">
            <summary>
                Has an event that produces items.
            </summary>
            <typeparam name="TItem">Type of items produced.</typeparam>
        </member>
        <member name="E:Dynamo.Interfaces.ISource`1.ItemProduced">
            <summary>
                Produces items, potentially asynchronously.
            </summary>
        </member>
        <member name="M:Dynamo.Interfaces.ICustomNodeSource.CreateCustomNodeInstance(System.Guid,System.String,System.Boolean)">
            <summary>
                Creates a new Custom Node Instance.
            </summary>
            <param name="id">Identifier referring to a custom node definition.</param>
            <param name="nickname"></param>
            <param name="isTestMode"></param>
        </member>
        <member name="M:Dynamo.Interfaces.ISchedulerThread.Initialize(Dynamo.Core.Threading.IScheduler)">
            <summary>
            DynamoScheduler calls this method to initialize and start this 
            instance of scheduler thread. This call marks the point from which 
            it is safe to call into DynamoScheduler.
            </summary>
            <param name="owningScheduler">A reference to the DynamoScheduler 
            object which owns this instance of scheduler thread.</param>
        </member>
        <member name="M:Dynamo.Interfaces.ISchedulerThread.Shutdown">
            <summary>
            DynamoScheduler calls this method to shutdown the scheduler thread.
            </summary>
        </member>
        <member name="T:Dynamo.Interfaces.ILogger">
            <summary>
                Consumes messages to be used for logging.
            </summary>
        </member>
        <member name="T:Dynamo.Interfaces.ILogMessage">
            <summary>
                A message that can be logged with an ILogger.
            </summary>
        </member>
        <member name="T:Dynamo.Interfaces.ILogSource">
            <summary>
                An object that emits log messages.
            </summary>
        </member>
        <member name="E:Dynamo.Interfaces.ILogSource.MessageLogged">
            <summary>
                Emits LogMessages.
            </summary>
        </member>
        <member name="M:Dynamo.Interfaces.IPreferences.Save(System.String)">
            <summary>
            Call this method to serialize PreferenceSettings given the output 
            file path.
            </summary>
            <param name="filePath">The full path of the output file to serialize
            PreferenceSettings to.</param>
            <returns>Returns true if the serialization is successful, or false 
            otherwise.</returns>
        </member>
        <member name="T:Dynamo.Logging.LogMessage">
            <summary>
                Factory methods for creating log messages.
            </summary>
        </member>
        <member name="M:Dynamo.Logging.LogMessage.Warning(System.String,Dynamo.WarningLevel)">
            <summary>
                Creates a LogMessage representing a warning.
            </summary>
            <param name="message"></param>
            <param name="severity"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Logging.LogMessage.Error(System.String)">
            <summary>
                Creates a LogMessage representing an error.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Logging.LogMessage.Error(System.Exception)">
            <summary>
                Creates a LogMessage representing an error.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Logging.LogMessage.Info(System.String)">
            <summary>
                Creates a basic LogMessage.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Logging.LogMessage.Log(Dynamo.Interfaces.ILogger,Dynamo.Interfaces.ILogMessage)">
            <summary>
                Logs a LogMessage.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="T:Dynamo.Logging.LogSource">
            <summary>
                Utility methods for ILogSource.
            </summary>
        </member>
        <member name="T:Dynamo.Logging.LogSource.DispatchedLogger">
            <summary>
                Class used to convert a LogSourceBase into an ILogger, by dispatching
                the ILogger methods to the MessageLogged event of ILogSource.
            </summary>
        </member>
        <member name="T:Dynamo.Logging.LogSourceBase">
            <summary>
                An object that can log messages.
            </summary>
        </member>
        <member name="E:Dynamo.Logging.LogSourceBase.MessageLogged">
            <summary>
                Emits LogMessages.
            </summary>
        </member>
        <member name="M:Dynamo.Logging.LogSourceBase.AsLogger">
            <summary>
                Creates an ILogger out of this LogSourceBase; logging to the ILogger
                will send messages out of the LogMessage event.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Models.NodeLoaders.CodeBlockNodeLoader">
            <summary>
                Xml Loader for CodeBlock nodes.
            </summary>
        </member>
        <member name="T:Dynamo.Models.NodeLoaders.CustomNodeLoader">
            <summary>
                Xml Loader for Custom Nodes.
            </summary>
        </member>
        <member name="T:Dynamo.Models.NodeLoaders.ZeroTouchNodeLoader">
            <summary>
                Xml Loader for ZeroTouch nodes.
            </summary>
        </member>
        <member name="P:Dynamo.Models.AnnotationModel.Rect">
            <summary>
            Overriding the Rect from Modelbase
            This gets the actual RECT of the group. 
            This is required to make the group as ILocatable.
            </summary>      
        </member>
        <member name="M:Dynamo.Models.AnnotationModel.#ctor(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Collections.Generic.IEnumerable{Dynamo.Models.NoteModel})">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamo.Models.AnnotationModel"/> class.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="notes">The notes.</param>
            <param name="loadFromGraph">This is true when graph is loaded from XML</param>
        </member>
        <member name="M:Dynamo.Models.AnnotationModel.model_Disposed(Dynamo.Models.ModelBase)">
            <summary>
            Recalculate the group when a node is disposed
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Dynamo.Models.AnnotationModel.UpdateBoundaryFromSelection">
            <summary>
            Updates the group boundary based on the nodes / notes selection.
            </summary>      
        </member>
        <member name="M:Dynamo.Models.AnnotationModel.CalculateWidthAndHeight">
            <summary>
            Group the Models based on Height and Width
            </summary>
            <returns> the width and height of the last model </returns>
        </member>
        <member name="M:Dynamo.Models.AnnotationModel.AddToSelectedModels(Dynamo.Models.ModelBase,System.Boolean)">
            <summary>
            This is called when a model is deleted from a group
            and UNDO is clicked.
            </summary>
            <param name="model">The model.</param>
            <param name="checkOverlap"> checkoverlap determines whether the selected model is 
            completely inside that group</param>
        </member>
        <member name="M:Dynamo.Models.AnnotationModel.Select">
            <summary>
            Overriding the Select behavior
            because selecting the  group should select the models
            within that group
            </summary>
        </member>
        <member name="M:Dynamo.Models.AnnotationModel.Deselect">
            <summary>
            Overriding the Deselect behavior
            because deselecting the  group should deselect the models
            within that group
            </summary>
        </member>
        <member name="T:Dynamo.Models.PresetModel">
            <summary>
            This class references a set of nodemodels, and a set of serialized versions of those nodemodels
            a client can use this class to store the state of a set of nodes from a graph
            </summary>
        </member>
        <member name="P:Dynamo.Models.PresetModel.Nodes">
            <summary>
            list of nodemodels that this state serializes
            </summary>
        </member>
        <member name="P:Dynamo.Models.PresetModel.SerializedNodes">
            <summary>
            list of serialized nodes
            </summary>
        </member>
        <member name="M:Dynamo.Models.PresetModel.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel})">
            <summary>
            create a new presetsState, this will serialize all the referenced nodes by calling their serialize method, 
            the resulting XML elements will be used to save this state when the presetModel is saved on workspace save
            </summary>
            <param name="name">name for the state, must not be null </param>
            <param name="description">description of the state, can be null</param>
            <param name="inputsToSave">set of nodeModels, must not be null</param>
            <param name="id">an id GUID, can be empty GUID</param>
        </member>
        <member name="M:Dynamo.Models.PresetModel.#ctor(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel})">
            <summary>
            this overload is used for loading with deserializeCore, we must pass the nodesInTheGraph to the instance of the Preset so that
            we can detect missing nodes
            </summary>
            <param name="nodesInGraph"></param>
        </member>
        <member name="T:Dynamo.Models.RunType">
            <summary>
            The RunType enumeration provides values for
            specifying the type of run that will be conducted.
            </summary>
        </member>
        <member name="T:Dynamo.Models.RunSettings">
            <summary>
            The RunSettings object contains properties which control
            how execution is carried out.
            </summary>
        </member>
        <member name="P:Dynamo.Models.RunSettings.RunPeriod">
            <summary>
            The length, in milliseconds, of the period
            between requests to execute.
            </summary>
        </member>
        <member name="P:Dynamo.Models.RunSettings.RunType">
            <summary>
            The current RunType.
            </summary>
        </member>
        <member name="P:Dynamo.Models.RunSettings.RunEnabled">
            <summary>
            A flag which indicates whether running is possible. This 
            flag is set to false during execution and is set to true
            when execution is completed.
            </summary>
        </member>
        <member name="T:Dynamo.Models.DynamoModel">
            <summary>
            The core model of Dynamo.
            </summary>
        </member>
        <member name="T:Dynamo.Models.DynamoModel.RecordableCommand">
            <summary>
            This is the base class of all recordable commands. It provides the 
            contract between a UI event handler (e.g. delegate command method or 
            a button event handler) and the actual command handler in the 
            DynamoViewModel. It is mandatory for each RecordableCommand-derived 
            class to be serializable to/deserializable from an XmlElement.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.RecordableCommand.jsonSettings">
            <summary>
            Settings that is used for serializing commands
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.#cctor">
            <summary>
            Initialize commands serializing settings
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.#ctor">
            <summary>
            Constructs an instance of RecordableCommand derived class. This 
            constructor is made protected to indicate that the class instance 
            can only be instantiated through a derived class.
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.#ctor(System.String)">
            <summary>
            Constructs an instance of RecordableCommand derived class, 
            assigning a new tag to it.
            </summary>
            <param name="tag">A string tag to be assigned to the command.
            This parameter can be any string, even an empty one. However, 
            it should not be null. A null "tag" parameter causes the 
            ArgumentNullException to be thrown.</param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.Execute(Dynamo.Models.DynamoModel)">
            <summary>
            Call this method to execute a RecordableCommand. A RecordableCommand 
            must be executed in the context of an existing DynamoViewModel.
            </summary>
            <param name="dynamoModel">The DynamoModel object this 
            RecordableCommand is targeting.</param>
            
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.Serialize(System.Xml.XmlDocument)">
            <summary>
            This method serializes the RecordableCommand object in the form of 
            XmlElement for storage. The resulting XmlElement contains all the 
            arguments that are required by this command.
            </summary>
            <param name="document">The XmlDocument from which an XmlElement can
            be created.</param>
            <returns>The XmlElement representation of this RecordableCommand 
            object. It will be used in RecordableCommand.Deserialize method to 
            completely reconstruct the RecordableCommand it represents.</returns>
            
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.Serialize">
            <summary>
            This method serializes the RecordableCommand object in the json form. 
            The resulting string contains command type name and all the 
            arguments that are required by this command.
            </summary>
            <returns>The string can be used for reconstructing RecordableCommand 
            using Deserialize method</returns>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.Deserialize(System.Xml.XmlElement)">
            <summary>
            Call this static method to reconstruct a RecordableCommand-derived 
            object given an XmlElement that was previously saved with Serialize 
            method. This method simply redirects the XmlElement to respective 
            RecordableCommand-derived classes based on its type.
            </summary>
            <param name="element">The XmlElement from which the RecordableCommand
            can be reconstructed.</param>
            <returns>Returns the reconstructed RecordableCommand object. If a 
            RecordableCommand cannot be reconstructed, this method throws a 
            relevant exception.</returns>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.Deserialize(System.String)">
            <summary>
            Call this static method to reconstruct a RecordableCommand from json 
            string that contains command name - name of corresponding class inherited 
            from RecordableCommand, - and all the arguments that are required by this 
            command.
            </summary>
            <param name="jsonString">Json string that contains command name and all 
            its arguments.</param>
            <returns>Reconstructed RecordableCommand</returns>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.RecordableCommand.Redundant">
            <summary>
            Some commands are fired at high frequency (e.g. dragging and window 
            selection related commands), and can be simulated during playback by
            issuing the final occurrence of the command. For example, window 
            selection command is fired for each mouse-move event, but the end 
            result will be same if only the final selection command is recorded.
            If this property is set to 'true', then only the last occurrence will
            be recorded for playback.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.RecordableCommand.IsInPlaybackMode">
            <summary>
            This flag will be set to true only during playback. Derived classes
            can use this to decide their actions accordingly. For example, 
            UpdateModelValueCommand doesn't change the value of a property 
            during recording time, it is created for the sole purpose of being
            recorded. During playback, then UpdateModelValueCommand will update
            the property that it is bound to. This is a runtime flag, it is not 
            serialized in anyway.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.RecordableCommand.Tag">
            <summary>
            This is an optional tag for each of the recorded commands in a 
            command Xml file. A command can only be tagged from within a 
            command Xml file manually, and a tag is useful for unit test 
            verification passes. See PlaybackStateChangedEventArgs class for 
            possible usage of command tags. If a command is not tagged, its 
            default tag value is an empty string.
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.ExecuteCore(Dynamo.Models.DynamoModel)">
            <summary>
            Derived classes must implement this method to perform the actual
            command execution. A typical implementation of this method involves
            calling a corresponding method on DynamoModel by passing itself as
            the only argument.
            </summary>
            <param name="dynamoModel">The DynamoModel object on which 
            this command should be executed.</param>
            
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RecordableCommand.SerializeCore(System.Xml.XmlElement)">
            <summary>
            Derived classes must implement this method to serialize all relevant
            information into the XmlElement supplied to it. Typically the method
            is a direct mirror of DeserializeCore.
            </summary>
            <param name="element">All arguments that are required for this 
            command are written into this XmlElement. The information written 
            here must be exactly what DeserializeCore method expects.</param>
            
        </member>
        <member name="T:Dynamo.Models.DynamoModel.ModelBasedRecordableCommand">
            <summary>
            This class is base for those RecordableCommands that should have 
            Guid that causes the problems during deserialization
            </summary>
        </member>
        <member name="T:Dynamo.Models.DynamoModel.CreateProxyNodeCommand">
            <summary>
            Contains additional information needed for creating proxy custom node
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.UpdateModelValueCommand.#ctor(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            </summary>
            <param name="workspaceGuid">Guid of the target workspace. Guid.Empty means current workspace</param>
            <param name="modelGuid">Guid of node model</param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.UpdateModelValueCommand.#ctor(System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="workspaceGuid">Guid of the target workspace. Guid.Empty means current workspace</param>
            <param name="modelGuids"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="E:Dynamo.Models.DynamoModel.CleaningUp">
            <summary>
            An event triggered when the workspace is being cleaned.
            </summary>
        </member>
        <member name="E:Dynamo.Models.DynamoModel.WorkspaceHidden">
            <summary>
            Event called when a workspace is hidden
            </summary>
        </member>
        <member name="E:Dynamo.Models.DynamoModel.RequestNodeSelect">
            <summary>
            An event which requests that a node be selected
            </summary>
        </member>
        <member name="E:Dynamo.Models.DynamoModel.EvaluationCompleted">
            <summary>
            An event triggered when a single graph evaluation completes.
            </summary>
        </member>
        <member name="E:Dynamo.Models.DynamoModel.RefreshCompleted">
            <summary>
            An event triggered when all tasks in scheduler are completed.
            </summary>
        </member>
        <member name="E:Dynamo.Models.DynamoModel.WorkspaceOpening">
            <summary>
            Event that is fired during the opening of the workspace.
            
            Use the XmlDocument object provided to conduct additional
            workspace opening operations.
            </summary>
        </member>
        <member name="E:Dynamo.Models.DynamoModel.ShutdownStarted">
            <summary>
            This event is raised right before the shutdown of DynamoModel started.
            When this event is raised, the shutdown is guaranteed to take place
            (i.e. user has had a chance to save the work and decided to proceed 
            with shutting down Dynamo). Handlers of this event can still safely 
            access the DynamoModel, the WorkspaceModel (along with its contents), 
            and the DynamoScheduler.
            </summary>
            
        </member>
        <member name="E:Dynamo.Models.DynamoModel.ShutdownCompleted">
            <summary>
            This event is raised after DynamoModel has been shut down. At this 
            point the DynamoModel is no longer valid and access to it should be 
            avoided.
            </summary>
            
        </member>
        <member name="P:Dynamo.Models.DynamoModel.IsTestMode">
            <summary>
            Testing flag is used to defer calls to run in the idle thread
            with the assumption that the entire test will be wrapped in an
            idle thread call.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.IsCrashing">
            <summary>
                Specifies whether or not Dynamo is in a crash-state.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.EnableMigrationLogging">
            <summary>
            Setting this flag enables creation of an XML in following format that records 
            node mapping information - which old node has been converted to which to new node(s) 
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.EngineController">
            <summary>
                DesignScript VM EngineController, used for this instance of Dynamo.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.LibraryServices">
            <summary>
                Manages all loaded ZeroTouch libraries.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.ShutdownRequested">
            <summary>
                Flag specifying whether a shutdown of Dynamo was requested.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.Version">
            <summary>
                This version of Dynamo.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.UpdateManager">
            <summary>
            UpdateManager to handle automatic upgrade to higher version.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.PathManager">
            <summary>
                The path manager that configures path information required for 
                Dynamo to function properly. See IPathManager interface for more 
                details.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.Context">
            <summary>
                The context that Dynamo is running under.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.ExtensionManager">
            <summary>
                Manages all extensions for Dynamo
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.Loader">
            <summary>
                Manages all loaded NodeModel libraries.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.CustomNodeManager">
            <summary>
                Custom Node Manager instance, manages all loaded custom nodes.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.Logger">
            <summary>
                The Dynamo Logger, receives and manages all log messages.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.Scheduler">
            <summary>
                The Dynamo Scheduler, handles scheduling of asynchronous tasks on different
                threads.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.SearchModel">
            <summary>
                The Dynamo Node Library, complete with Search.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.AppVersion">
            <summary>
                The application version string for analytics reporting APIs
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.DebugSettings">
            <summary>
                Debugging settings for this instance of Dynamo.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.PreferenceSettings">
            <summary>
                Preference settings for this instance of Dynamo.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.NodeFactory">
            <summary>
                Node Factory, used for creating and intantiating loaded Dynamo nodes.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel.MigrationManager">
            <summary>
                Migration Manager, upgrades old Dynamo file formats to the current version.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.CurrentWorkspace">
            <summary>
                The active workspace in Dynamo.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.ClipBoard">
            <summary>
                The copy/paste clipboard.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.IsShowingConnectors">
            <summary>
                Specifies whether connectors are displayed in Dynamo.
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.ConnectorType">
            <summary>
                Specifies how connectors are displayed in Dynamo.
            </summary>
        </member>
        <member name="F:Dynamo.Models.DynamoModel._workspaces">
            <summary>
                The private collection of visible workspaces in Dynamo
            </summary>
        </member>
        <member name="P:Dynamo.Models.DynamoModel.TraceReconciliationProcessor">
            <summary>
            An object which implements the ITraceReconciliationProcessor interface,
            and is used for handlling the results of a trace reconciliation.
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.ShutDown(System.Boolean)">
            <summary>
            External components call this method to shutdown DynamoModel. This 
            method marks 'ShutdownRequested' property to 'true'. This method is 
            used rather than a public virtual method to ensure that the value of
            ShutdownRequested is set to true.
            </summary>
            <param name="shutdownHost">Set this parameter to true to shutdown 
            the host application.</param>
            
        </member>
        <member name="T:Dynamo.Models.DynamoModel.DefaultStartConfiguration">
            <summary>
            Initialization settings for DynamoModel.
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.Start">
            <summary>
                Start DynamoModel with all default configuration options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.Start(Dynamo.Models.DynamoModel.IStartConfiguration)">
            <summary>
            Start DynamoModel with custom configuration.  Defaults will be assigned not provided.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.LibraryLoaded(System.Object,Dynamo.Engine.LibraryServices.LibraryLoadedEventArgs)">
            <summary>
            LibraryLoaded event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.OnAsyncTaskStateChanged(Dynamo.Core.Threading.DynamoScheduler,Dynamo.Core.Threading.TaskStateChangedEventArgs)">
            <summary>
            This event handler is invoked when DynamoScheduler changes the state 
            of an AsyncTask object. See TaskStateChangedEventArgs.State for more 
            details of these state changes.
            </summary>
            <param name="sender">The scheduler which raised the event.</param>
            <param name="e">Task state changed event argument.</param>
            
        </member>
        <member name="M:Dynamo.Models.DynamoModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.PreferenceSettings_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Responds to property update notifications on the preferences,
            and synchronizes with the Units Manager.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.LogWarningMessage(DynamoServices.LogWarningMessageEventArgs)">
            <summary>
            This warning message is displayed on the node associated with the FFI dll
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.UpdateCustomNodeDefinition(Dynamo.CustomNodeDefinition)">
            <summary>
                Register custom node defintion and execute all custom node 
                instances.
            </summary>
            <param name="??"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RegisterCustomNodeDefinitionWithEngine(Dynamo.CustomNodeDefinition)">
            <summary>
                Registers (or re-registers) a Custom Node definition with the DesignScript VM,
                so that instances of the custom node can be evaluated.
            </summary>
            <param name="definition"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.MarkAllDependenciesAsModified(Dynamo.CustomNodeDefinition)">
            <summary>
            Get all function instances or directly or indrectly dependo on the 
            specified function definition and mark them as modified so that 
            their values will be re-queryed.
            </summary>
            <param name="functionId"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.ResetEngine(System.Boolean)">
             <summary>
             Call this method to reset the virtual machine, avoiding a race 
             condition by using a thread join inside the vm executive.
             TODO(Luke): Push this into a resync call with the engine controller
            
             Tracked in MAGN-5167.
             As some async tasks use engine controller, for example 
             CompileCustomNodeAsyncTask and UpdateGraphAsyncTask, it is possible
             that engine controller is reset *before* tasks get executed. For
             example, opening custom node will schedule a CompileCustomNodeAsyncTask
             firstly and then reset engine controller. 
             
             We should make sure engine controller is reset after all tasks that
             depend on it get executed, or those tasks are thrown away if safe to 
             do that. 
             </summary>
             <param name="markNodesAsDirty">Set this parameter to true to force 
                 reset of the execution substrait. Note that setting this parameter 
                 to true will have a negative performance impact.</param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.ForceRun">
            <summary>
                Forces an evaluation of the current workspace by resetting the DesignScript VM.
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.OpenFileFromPath(System.String,System.Boolean)">
            <summary>
                Opens a Dynamo workspace from a path to an Xml file on disk.
            </summary>
            <param name="xmlPath"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.SaveBackupFiles(System.Object)">
            <summary>
            Backup all the files
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.StartBackupFilesTimer">
            <summary>
            Start the timer to backup files periodically
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.AddHomeWorkspace">
            <summary>
                Add a new HomeWorkspace and set as current
            </summary>
            <api_stability>1</api_stability>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.AddCustomNodeWorkspace(Dynamo.Models.CustomNodeWorkspaceModel)">
            <summary>
                Add a new, visible Custom Node workspace to Dynamo
            </summary>
            <param name="workspace"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.RemoveWorkspace(Dynamo.Models.WorkspaceModel)">
            <summary>
                Remove a workspace from the dynamo model.
            </summary>
            <param name="workspace"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.OpenCustomNodeWorkspace(System.Guid)">
            <summary>
                Opens an existing custom node workspace.
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.AddNodeToCurrentWorkspace(Dynamo.Models.NodeModel,System.Boolean)">
            <summary>
                Adds a node to the current workspace.
            </summary>
            <param name="node"></param>
            <param name="centered"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.Copy">
            <summary>
            Copy selected ISelectable objects to the clipboard.
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.Paste">
            <summary>
                Paste ISelectable objects from the clipboard to the workspace 
            so that the nodes appear in their original location with a slight offset
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.Paste(Dynamo.Utilities.Point2D)">
            <summary>
                Paste ISelectable objects from the clipboard to the workspace at specified point.
            </summary>
            <param name="targetPoint">Location where data will be pasted</param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.AddToSelection(System.Object)">
            <summary>
                Add an ISelectable object to the selection.
            </summary>
            <param name="parameters">The object to add to the selection.</param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.ClearCurrentWorkspace">
            <summary>
                Clear the workspace. Removes all nodes, notes, and connectors from the current workspace.
            </summary>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.AddWorkspace(Dynamo.Models.WorkspaceModel)">
            <summary>
                Adds a workspace to the dynamo model.
            </summary>
            <param name="workspace"></param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.DisplayObsoleteFileMessage(System.String,System.Version,System.Version)">
            <summary>
            Call this method to display a message box when a file of an older 
            version cannot be opened by the current version of Dynamo.
            </summary>
            <param name="fullFilePath"></param>
            <param name="fileVersion">Version of the input file.</param>
            <param name="currVersion">Current version of the Dynamo.</param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.DisplayEngineFailureMessage(System.Exception)">
            <summary>
            Call this method to display an error message in an event when live 
            runner throws an exception that is not handled anywhere else. This 
            message instructs user to save their work and restart Dynamo.
            </summary>
            <param name="exception">The exception to display.</param>
        </member>
        <member name="M:Dynamo.Models.DynamoModel.DisplayFutureFileMessage(System.String,System.Version,System.Version)">
            <summary>
            Displays file open error dialog if the file is of a future version than the currently installed version
            </summary>
            <param name="fullFilePath"></param>
            <param name="fileVersion"></param>
            <param name="currVersion"></param>
            <returns> true if the file must be opened and false otherwise </returns>
        </member>
        <member name="T:Dynamo.Models.INodeLoader`1">
            <summary>
                An object which can load a NodeModel from Xml.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dynamo.Models.INodeLoader`1.CreateNodeFromXml(System.Xml.XmlElement,Dynamo.Models.SaveContext,ProtoCore.Namespace.ElementResolver)">
            <summary>
                Create a new NodeModel from its serialized form.
            </summary>
            <param name="elNode">Serialized NodeModel</param>
            <param name="context">Serialization context</param>
            <param name="resolver">Element resolver for resolve namespace conflict</param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Models.INodeFactory`1">
            <summary>
                An object which can create a new NodeModel.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dynamo.Models.INodeFactory`1.CreateNode">
            <summary>
                Creates a new NodeModel instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Models.NodeFactory">
            <summary>
                Manages factories and loaders for NodeModels. Can use registered factories
                and loaders to instantiate and load new NodeModels.
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.AddLoader``1(Dynamo.Models.INodeLoader{``0})">
            <summary>
                Adds a node loader to this manager.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="loader"></param>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.AddLoader``1(System.Type,Dynamo.Models.INodeLoader{``0})">
            <summary>
                Adds a node loader to this manager, for the given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nodeType"></param>
            <param name="loader"></param>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.AddFactory``1(Dynamo.Models.INodeFactory{``0})">
            <summary>
                Adds a node factory to this manager.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="loader"></param>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.AddFactory``1(System.Type,Dynamo.Models.INodeFactory{``0})">
            <summary>
                Adds a node factory to this manager, for a given type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nodeType"></param>
            <param name="loader"></param>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.AddTypeFactoryAndLoader``1">
            <summary>
                Attempts to create a new factory and loader for a given type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.CreateProxyNodeInstance(System.Guid,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                A proxy custom node is a custom node without its definition loaded 
                in Dynamo. The creation of a proxy custom node relies on information 
                provided by the caller since the definition is not readily available 
                for reading. The actual definition may become available at a later 
                time by means of user uploading the definition.
            </summary>
            <param name="id">Identifier of the custom node instance.</param>
            <param name="name">The name represents the GUID of the custom node 
            definition that is used for creating the custom node instance.</param>
            <param name="nickName">The display name of the custom node.</param>
            <param name="inputs">Number of input ports.</param>
            <param name="outputs">Number of output ports.</param>
            <returns>Returns the custom node instance if creation was successful, 
            or null otherwise.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.AddTypeFactoryAndLoader(System.Type)">
            <summary>
                Attempts to create a new factory and loader for a given type.
            </summary>
            <param name="nodeType"></param>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.AddAlsoKnownAs(System.Type,System.String,System.Boolean)">
            <summary>
                Registers a type with another name that it may go by.
            </summary>
            <param name="realType"></param>
            <param name="aka"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.AddAlsoKnownAs(System.Type,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
                Registers a type with other names that it may go by.
            </summary>
            <param name="realType"></param>
            <param name="names"></param>
            <param name="overwrite"></param>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.ResolveType(System.String,System.Type@)">
            <summary>
                Given a type name, attempts to get the type associated with that name.
            </summary>
            <param name="fullyQualifiedName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.CreateNodeFromXml(System.Xml.XmlElement,Dynamo.Models.SaveContext,ProtoCore.Namespace.ElementResolver)">
            <summary>
                Creates and Loads a new NodeModel from its Serialized form, using the node loaders
                registered in this factory. If loading fails, a Dummy Node is produced.
            </summary>
            <param name="elNode"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.NodeFactory.CreateNodeFromTypeName(System.String,Dynamo.Models.NodeModel@)">
            <summary>
                Creates a new NodeModel from its typeName, using the node factories registered
                in this factory.
            </summary>
            <param name="typeName"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:Dynamo.Models.TypeLoadData.Assembly">
            <summary>
                Assembly containing the type.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.Type">
            <summary>
                The type this data is associated with.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.ObsoleteMessage">
            <summary>
                Information about why this type is obsolete, if it is actually obsolete.
            </summary>
        </member>
        <member name="P:Dynamo.Models.TypeLoadData.IsObsolete">
            <summary>
                Specifies whether or not this Type is obsolete.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.AlsoKnownAs">
            <summary>
                Other names this type might go by inside of Dynamo.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.IsDeprecated">
            <summary>
                Specifies whether or not this type is deprecated by Dynamo.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.IsMetaNode">
            <summary>
                Specifies whether or not this type is considered a "meta node"
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.IsDSCompatible">
            <summary>
                Specifies whether or not this type is considered "DesignScript compatible"
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.IsHidden">
            <summary>
                Specifies whether or not this type should be hidden from users in search.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.Name">
            <summary>
                The Name associated with this type.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.SearchKeys">
            <summary>
                Search keys that can be used to search for this type.
            </summary>
        </member>
        <member name="P:Dynamo.Models.TypeLoadData.Category">
            <summary>
                The category of this type, used in search.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.Description">
            <summary>
                The description of this type.
            </summary>
        </member>
        <member name="F:Dynamo.Models.TypeLoadData.IsPackageMember">
            <summary>
                Indicates if the type is loaded from a package.
            </summary>
        </member>
        <member name="T:Dynamo.Models.ScopedNodeModel">
            <summary>
            ScopedNodeModel will put its children in its scope so that they won't 
            get compiled in global scope.
            </summary>
        </member>
        <member name="M:Dynamo.Models.ScopedNodeModel.IsNodeInScope(Dynamo.Models.NodeModel,System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel})">
            <summary>
            If all nodes that the node outputs to are in scopes list. I.e.,
            </summary>
            <param name="node"></param>
            <param name="scopes"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.ScopedNodeModel.IsScopedInport(System.Int32)">
            <summary>
            Specify if the corresponding inport has scope or not. 
            </summary>
            <param name="portIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.ScopedNodeModel.GetInScopeNodesForInport(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get all nodes that in its input ports's scope. A node is in its 
            scope if that node is one of its upstream nodes. 
            </summary>
            <param name="portIndex">Inport index</param>
            <param name="checkEscape">
            If need to exclude nodes that one of their downstream nodes are not 
            in the scope
            </param>
            <param name="isInclusive">
            If a upstream node is ScopedNodeModel, need to include all upstream 
            nodes of that node.
            </param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.ScopedNodeModel.GetInScopeNodes(System.Boolean,System.Boolean)">
            <summary>
            Return all nodes that are in the scope of this node. 
            nodes are not in the scope.
            </summary>
            <param name="checkEscape">
            Specifies if need to exclude nodes that one of their downstream
            nodes are not in the scope
            </param>
            <param name="isInclusive">
            If one of its upstream node is ScopedNodeModel, if need to include 
            all upstream nodes of that node.
            </param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.ScopedNodeModel.GetNodesInTopScope(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel})">
            <summary>
            Iterate over nodes and remove all nodes that are in the scope of
            some scoped node. So all returned nodes are in global scope.
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.ScopedNodeModel.BuildOutputAstInScope(System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode},System.Boolean,Dynamo.Engine.CodeGeneration.AstBuilder)">
            <summary>
            Similar to NodeModel.BuildOutputAst(). When compiled to AST, for
            ScopedNodeModel this method will be called when all requirements are
            satisfied. The derived class needs to implement this method to 
            compile its children into some scopes.
            </summary>
            <param name="inputAstNodes"></param>
            <param name="verboseLogging"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.ScopedNodeModel.BuildAstInScope(System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode},System.Boolean,Dynamo.Engine.CodeGeneration.AstBuilder)">
            <summary>
            Similar to NodeModel.BuildAst(). When compiled to AST, for 
            ScopedNodeModel this method will be called when all requirements
            are satisfied. 
            </summary>
            <param name="inputAstNodes"></param>
            <param name="verboseLogging"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="P:Dynamo.Models.CustomNodeWorkspaceModel.CustomNodeDependencies">
            <summary>
                All CustomNodeDefinitions which this Custom Node depends on.
            </summary>
        </member>
        <member name="P:Dynamo.Models.CustomNodeWorkspaceModel.CustomNodeDefinition">
            <summary>
                The definition of this custom node, based on the current state of this workspace.
            </summary>
        </member>
        <member name="P:Dynamo.Models.CustomNodeWorkspaceModel.CustomNodeInfo">
            <summary>
                The information about this custom node, based on the current state of this workspace.
            </summary>
        </member>
        <member name="P:Dynamo.Models.CustomNodeWorkspaceModel.Category">
            <summary>
                Search category for this workspace, if it is a Custom Node.
            </summary>
        </member>
        <member name="P:Dynamo.Models.CustomNodeWorkspaceModel.Description">
            <summary>
                A description of the workspace
            </summary>
        </member>
        <member name="P:Dynamo.Models.CustomNodeWorkspaceModel.IsVisibleInDynamoLibrary">
            <summary>
                Custom node visibility in the Dynamo library
            </summary>
        </member>
        <member name="P:Dynamo.Models.HomeWorkspaceModel.IsTestMode">
            <summary>
                Flag specifying if this workspace is operating in "test mode".
            </summary>
        </member>
        <member name="P:Dynamo.Models.HomeWorkspaceModel.HasRunWithoutCrash">
            <summary>
                Indicates whether a run has completed successfully.   
            
                This flag is critical to ensuring that crashing run-auto files
                are not left in run-auto upon reopening.  
            </summary>
        </member>
        <member name="F:Dynamo.Models.HomeWorkspaceModel.silenceNodeModifications">
            <summary>
                Before the Workspace has been built the first time, we do not respond to 
                NodeModification events.
            </summary>
        </member>
        <member name="P:Dynamo.Models.HomeWorkspaceModel.EvaluationCount">
            <summary>
            Evaluation count is incremented whenever the graph is evaluated. 
            It is set to zero when the graph is Cleared.
            </summary>
        </member>
        <member name="P:Dynamo.Models.HomeWorkspaceModel.PreloadedTraceData">
            <summary>
            In near future, the file loading mechanism will be completely moved 
            into WorkspaceModel, that's the time we removed this property setter below.
            </summary>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.RequestRun">
            <summary>
                Invoked when a change to the workspace that requires re-execution
                has taken place.  If in run-automatic, a new run will take place,
                otherwise nothing will happen.
            </summary>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.NodeModified(Dynamo.Models.NodeModel)">
            <summary>
            Called when a Node is modified in the workspace
            </summary>
            <param name="node">The node itself</param>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.RegisterNode(Dynamo.Models.NodeModel)">
            <summary>
            Called when a node is added to the workspace and event handlers are to be added
            </summary>
            <param name="node">The node itself</param>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.DisposeNode(Dynamo.Models.NodeModel)">
            <summary>
            Called when a node is disposed and removed from the workspace
            </summary>
            <param name="node">The node itself</param>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.NodeOnRequestSilenceNodeModifiedEvents(Dynamo.Models.NodeModel,System.Boolean)">
            <summary>
            Called when the RequestSilenceNodeModifiedEvents event is emitted from a Node
            </summary>
            <param name="node">The node itself</param>
            <param name="value">A boolean value indicating whether to silence or not</param>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.Clear">
            <summary>
                Clears this workspace of nodes, notes, and connectors.
            </summary>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.StartPeriodicEvaluation">
            <summary>
            Start periodic evaluation using the currently set RunPeriod
            </summary>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.StopPeriodicEvaluation">
            <summary>
            Stop the on-going periodic evaluation, if there is any.
            </summary>
            
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.ResetEngine(Dynamo.Engine.EngineController,System.Boolean)">
            <summary>
            Call this method to reset the virtual machine, avoiding a race 
            condition by using a thread join inside the vm executive.
            TODO(Luke): Push this into a resync call with the engine controller
            </summary>
            <param name="controller"></param>
            <param name="markNodesAsDirty">Set this parameter to true to force 
                reset of the execution substrait. Note that setting this parameter 
                to true will have a negative performance impact.</param>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.MarkNodesAsModifiedAndRequestRun(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Boolean)">
            <summary>
            Mark the input nodes as modified
            </summary>
            <param name="nodes">The nodes to modify</param>
            <param name="forceExecute">The argument to NodeModel.MarkNodeAsModified</param>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.OnUpdateGraphCompleted(Dynamo.Core.Threading.AsyncTask)">
            <summary>
            This callback method is invoked in the context of ISchedulerThread 
            when UpdateGraphAsyncTask is completed.
            </summary>
            <param name="task">The original UpdateGraphAsyncTask instance.</param>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.Run">
            <summary>
            This method is typically called from the main application thread (as 
            a result of user actions such as button click or node UI changes) to
            schedule an update of the graph. This call may or may not represent 
            an actual update. In the event that the user action does not result 
            in actual graph update (e.g. moving of node on UI), the update task 
            will not be scheduled for execution.
            </summary>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.GetExecutingNodes(System.Boolean)">
            <summary>
            This function gets the set of nodes that will get executed in the next run.
            This function will be called when the nodes are modified or when showrunpreview is set
            the executing nodes will be sent via SetNodeDeltaState event.
            </summary>
            <param name="showRunPreview">This parameter controls the delta state computation </param>
        </member>
        <member name="M:Dynamo.Models.HomeWorkspaceModel.GetOrphanedSerializablesAndClearHistoricalTraceData">
            <summary>
            Returns a list of ISerializable items which exist in the preloaded 
            trace data but do not exist in the current CallSite data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Models.UpdateValueParams">
            <summary>
            This class encapsulates the input parameters that need to be passed into nodes
            when they are updated in the UI.
            </summary>
        </member>
        <member name="M:Dynamo.Models.UpdateValueParams.#ctor(System.String,System.String,ProtoCore.Namespace.ElementResolver)">
            <summary>
            
            </summary>
            <param name="propertyName">Name of the property whose value is to be updated.
            This parameter cannot be empty or null.</param>
            <param name="propertyValue">Value of the named property whose value is to be 
            updated. This parameter can either be null or empty if the targeted property 
            allows such values.This value comes directly
            from DynamoTextBox after user commits it. Overridden methods then use 
            a specific IValueConverter to turn this string into another data type 
            that it expects</param>
            <param name="elementResolver">responsible for resolving class namespaces</param>
        </member>
        <member name="E:Dynamo.Models.ModelBase.Disposed">
            <summary>
            Fired when this Model is disposed.
            </summary>
        </member>
        <member name="P:Dynamo.Models.ModelBase.X">
            <summary>
            The X coordinate of the node in canvas space.
            </summary>
        </member>
        <member name="P:Dynamo.Models.ModelBase.Y">
            <summary>
            The Y coordinate of the node in canvas space.
            </summary>
        </member>
        <member name="P:Dynamo.Models.ModelBase.Position">
            <summary>
            A position defined by the x and y components.
            Used for notification in situations where you don't
            want to have property notifications for X and Y
            </summary>
        </member>
        <member name="P:Dynamo.Models.ModelBase.Height">
            <summary>
            The height of the node.
            </summary>
        </member>
        <member name="P:Dynamo.Models.ModelBase.Width">
            <summary>
            The width of the node.
            </summary>
        </member>
        <member name="M:Dynamo.Models.ModelBase.SetSize(System.Double,System.Double)">
            <summary>
            Set the width and the height of the node model
            and report once.
            </summary>
            <param name="w"></param>
            <param name="h"></param>
        </member>
        <member name="M:Dynamo.Models.ModelBase.HandleModelEvent(System.String,Dynamo.Core.UndoRedoRecorder)">
            <summary>
            This method is currently used as a way to send an event to ModelBase 
            derived objects. Its primary use is in DynamoNodeButton class, which 
            sends this event when clicked.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="recorder"></param>
            <returns>Returns true if the call has been handled, or false otherwise.
            </returns>
        </member>
        <member name="M:Dynamo.Models.ModelBase.UpdateValueCore(Dynamo.Models.UpdateValueParams)">
            <summary>
            This method is supplied as a generic way for command framework to update
            a given named-value in a ModelBase (which has to work under both user 
            and playback scenarios). During playback, the command framework issues 
            pre-recorded UpdateModelValueCommand that targets a model. Since there
            is no data-binding at play here, there will not be IValueConverter. This
            method takes only string input (the way they appear in DynamoTextBox),
            which overridden method can use for value conversion.
            </summary>
            <param name="updateValueParams">Please see UpdateValueParams for details.</param>
            <returns>Returns true if the call has been handled, or false otherwise.
            </returns>
        </member>
        <member name="T:Dynamo.Models.PortType">
            <summary>
            Interaction logic for dynPort.xaml
            </summary>
        </member>
        <member name="E:Dynamo.Models.PortModel.PortConnected">
            <summary>
            Event triggered when a port is connected.
            </summary>
        </member>
        <member name="E:Dynamo.Models.PortModel.PortDisconnected">
            <summary>
            Event triggered when a port is disconnected.
            </summary>
        </member>
        <member name="P:Dynamo.Models.PortModel.Center">
            <summary>
            Center is used by connected connectors to update their shape
            The "center" of a port is derived from the type of port and
            offsets from the node origin based on the port's index in the 
            ports collection.
            </summary>
        </member>
        <member name="P:Dynamo.Models.PortModel.UsingDefaultValue">
            <summary>
            Controls whether this port is set to use it's default value (true) or yield a closure (false).
            </summary>
        </member>
        <member name="P:Dynamo.Models.PortModel.DefaultValueEnabled">
            <summary>
            Controls whether the Use Default Value option is available.
            </summary>
        </member>
        <member name="P:Dynamo.Models.PortModel.MarginThickness">
            <summary>
            Controls the space between successive output ports
            </summary>
        </member>
        <member name="M:Dynamo.Models.PortModel.DestroyConnectors">
            <summary>
            Deletes all connectors attached to this PortModel.
            </summary>
        </member>
        <member name="M:Dynamo.Models.PortModel.OnPortConnected(Dynamo.Models.ConnectorModel)">
            <summary>
            Called when a port is connected.
            </summary>
            <param name="connector"></param>
        </member>
        <member name="M:Dynamo.Models.PortModel.OnPortDisconnected">
            <summary>
            Called when a port is disconnected.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Dynamo.Models.NodeModelAssemblyLoader">
            <summary>
                This class is responsible for loading types that derive
                from NodeModel. For information about package loading see the
                PackageLoader. For information about loading other libraries, 
                see LibraryServices.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModelAssemblyLoader.LoadedAssemblies">
            <summary>
                All assemblies that have been loaded into Dynamo.
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModelAssemblyLoader.LoadNodeModelsAndMigrations(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.List{Dynamo.Models.TypeLoadData}@,System.Collections.Generic.List{Dynamo.Models.TypeLoadData}@)">
            <summary>
            Load all types which inherit from NodeModel whose assemblies are located in
            the bin/nodes directory. Add the types to the searchviewmodel and
            the controller's dictionaries.
            </summary>
            <param name="nodeDirectories">Directories that contain node assemblies.</param>
            <param name="context"></param>
            <param name="modelTypes"></param>
            <param name="migrationTypes"></param>
        </member>
        <member name="M:Dynamo.Models.NodeModelAssemblyLoader.IsNodeSubType(System.Type)">
            <summary>
                Determine if a Type is a node.  Used by LoadNodesFromAssembly to figure
                out what nodes to load from other libraries (.dlls).
            </summary>
            <parameter>The type</parameter>
            <returns>True if the type is node.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModelAssemblyLoader.LoadNodesFromAssembly(System.Reflection.Assembly,System.String,System.Collections.Generic.List{Dynamo.Models.TypeLoadData},System.Collections.Generic.List{Dynamo.Models.TypeLoadData})">
            <summary>
                Enumerate the types in an assembly and add them to DynamoController's
                dictionaries and the search view model.  Internally catches exceptions and sends the error 
                to the console.
            </summary>
            <Returns>The list of node types loaded from this assembly</Returns>
        </member>
        <member name="M:Dynamo.Models.ConnectorModel.Make(Dynamo.Models.NodeModel,Dynamo.Models.NodeModel,System.Int32,System.Int32,System.Nullable{System.Guid})">
            <summary>
            Factory method to create a connector.  Checks to make sure that the start and end ports are valid, 
            otherwise returns null.
            </summary>
            <param name="start">The port where the connector starts</param>
            <param name="end">The port where the connector ends</param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="guid"></param>
            <returns>The valid connector model or null if the connector is invalid</returns>
        </member>
        <member name="M:Dynamo.Models.ConnectorModel.Delete(System.Boolean)">
            <summary>
            Delete the connector.
            </summary>
            <param name="silent">If silent is true, the start and end ports will be disconnected
            without raising port disconnection events.</param>
        </member>
        <member name="F:Dynamo.Models.NodeModel.cachedValue">
            <summary>
            The cached value of this node. The cachedValue object is protected by the cachedValueMutex
            as it may be accessed from multiple threads concurrently. 
            
            However, generally access to the cachedValue property should be protected by usage
            of the Scheduler. 
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.CreationName">
            <summary>
            The unique name that was created the node by
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.DispatchOnUIThread(System.Action)">
            <summary>
                Called by nodes for behavior that they want to dispatch on the UI thread
                Triggers event to be received by the UI. If no UI exists, behavior will not be executed.
            </summary>
            <param name="a"></param>
        </member>
        <member name="P:Dynamo.Models.NodeModel.InPortData">
            <summary>
                Definitions for the Input Ports of this NodeModel.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.OutPortData">
            <summary>
                Definitions for the Output Ports of this NodeModel.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.AllConnectors">
            <summary>
                All of the connectors entering and exiting the NodeModel.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsCustomFunction">
            <summary>
                Returns whether this node represents a built-in or custom function.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsVisible">
            <summary>
                Returns whether the node is to be included in visualizations.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsUpstreamVisible">
            <summary>
                Returns whether the node aggregates its upstream connections
                for visualizations.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsInputNode">
            <summary>
            Input nodes are used in Customizer and Presets. Input nodes can be numbers, number sliders,
            strings, bool, code blocks and custom nodes, which don't specify path.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsSelectedInput">
            <summary>
            Specifies whether an input node should be included in a preset. 
            By default, this field is set to true.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.State">
            <summary>
                The Node's state, which determines the coloring of the Node in the canvas.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsInErrorState">
            <summary>
              If the state of node is Error or AstBuildBroken
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.ToolTipText">
            <summary>
                Text that is displayed as this Node's tooltip.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.OverrideNameWithNickName">
            <summary>
                Should we override the displayed name with this Node's NickName property?
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.NickName">
            <summary>
                The name that is displayed in the UI for this NodeModel.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.InPorts">
            <summary>
                Collection of PortModels representing all Input ports.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.OutPorts">
            <summary>
                Collection of PortModels representing all Output ports.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.ArgumentLacing">
            <summary>
                Control how arguments lists of various sizes are laced.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.Name">
            <summary>
                Name property
            </summary>
            <value>
                If the node has a name attribute, return it.  Otherwise return empty string.
            </value>
        </member>
        <member name="P:Dynamo.Models.NodeModel.Category">
            <summary>
                Category property
            </summary>
            <value>
                If the node has a category, return it.  Other wise return empty string.
            </value>
        </member>
        <member name="P:Dynamo.Models.NodeModel.CachedValue">
            <summary>
            The value of this node after the most recent computation
            
            As this property could be modified by the virtual machine, it's dangerous 
            to access this value without using the active Scheduler. Use the Scheduler to 
            remove the possibility of race conditions.
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.GetCachedValueFromEngine(Dynamo.Engine.EngineController)">
            <summary>
            WARNING: This method is meant for unit test only. It directly accesses
            the EngineController for the mirror data without waiting for any 
            possible execution to complete (which, in single-threaded nature of 
            unit test, is an okay thing to do). The right way to get the cached 
            value for a NodeModel is by going through its RequestValueUpdateAsync
            method).
            </summary>
            <param name="engine">Instance of EngineController from which the node
            value is to be retrieved.</param>
            <returns>Returns the MirrorData if the node's value is computed, or 
            null otherwise.</returns>
            
        </member>
        <member name="P:Dynamo.Models.NodeModel.WasInvolvedInExecution">
            <summary>
            Use to indicated if a node was involved in the most recent graph evaluation.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.Tags">
            <summary>
                Search tags for this Node.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.Description">
            <summary>
                Description of this Node.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.AstIdentifierForPreview">
            <summary>
                ProtoAST Identifier for result of the node before any output unpacking has taken place.
                If there is only one output for the node, this is equivalent to GetAstIdentifierForOutputIndex(0).
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsConvertible">
            <summary>
                If this node is allowed to be converted to AST node in nodes to code conversion.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.AstIdentifierBase">
            <summary>
                Return a variable whose value will be displayed in preview window.
                Derived nodes may overwrite this function to display default value
                of this node. E.g., code block node may want to display the value
                of the left hand side variable of last statement.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.DisplayLabels">
            <summary>
                Enable or disable label display. Default is false.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsPartiallyApplied">
            <summary>
                Is this node being applied partially, resulting in a partial function?
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.GetDescriptionStringFromAttributes">
            <summary>
                Get the description from type information
            </summary>
            <returns>The value or "No description provided"</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.GetAstIdentifierForOutputIndex(System.Int32)">
            <summary>
                Fetches the ProtoAST Identifier for a given output port.
            </summary>
            <param name="outputIndex">Index of the output port.</param>
            <returns>Identifier corresponding to the given output port.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.GetTypeHintForOutput(System.Int32)">
            <summary>
                 The possible type of output at specified port. This 
                 type information is not necessary to be accurate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.GetValue(System.Int32,Dynamo.Engine.EngineController)">
            <summary>
                Gets the most recent value of this node stored in an EngineController that has evaluated it.
            </summary>
            <param name="outPortIndex"></param>
            <param name="engine"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.SetNickNameFromAttribute">
            <summary>
                Sets the nickname of this node from the attributes on the class definining it.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.RaisesModificationEvents">
            <summary>
                Indicate if the node should respond to NodeModified event. It
                always should be true, unless is temporarily set to false to 
                avoid flood of Modified event. 
            </summary>
        </member>
        <member name="E:Dynamo.Models.NodeModel.Modified">
            <summary>
                Event fired when the node's DesignScript AST should be recompiled
            </summary>
        </member>
        <member name="E:Dynamo.Models.NodeModel.RequestSilenceNodeModifiedEvents">
            <summary>
            Called when a node is requesting that the workspace's node modified events be
            silenced. This is particularly critical for code block nodes, whose modification can 
            mutate the workspace.
            
            As opposed to RaisesModificationEvents, this modifies the entire parent workspace
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.BuildOutputAst(System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            Override this to declare the outputs for each of this Node's output ports.
            </summary>
            <param name="inputAstNodes">Ast for inputs indexed by input port index.</param>
            <returns>Sequence of AssociativeNodes representing this Node's code output.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.BuildAst(System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode},Dynamo.Engine.CodeGeneration.CompilationContext)">
            <summary>
            Wraps the publically overrideable `BuildOutputAst` method so that it works with Preview.
            </summary>
            <param name="inputAstNodes"></param>
            <param name="context">Compilation context</param>
        </member>
        <member name="M:Dynamo.Models.NodeModel.OnBuilt">
            <summary>
                Callback for when this NodeModel has been compiled.
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.AppendReplicationGuides(System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
            Apppend replication guide to the input parameter based on lacing
            strategy.
            </summary>
            <param name="inputs"></param>
            <returns></returns>
        </member>
        <member name="E:Dynamo.Models.NodeModel.ConnectorAdded">
            <summary>
                Event fired when a new ConnectorModel has been attached to one of this node's inputs.
            </summary>
        </member>
        <member name="P:Dynamo.Models.NodeModel.IsTopMostNode">
            <summary>
            If node is connected to some other node(other than Output) then it is not a 'top' node
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.TryGetInput(System.Int32,System.Tuple{System.Int32,Dynamo.Models.NodeModel}@)">
            <summary>
                Attempts to get the input for a certain port.
            </summary>
            <param name="data">PortData to look for an input for.</param>
            <param name="input">If an input is found, it will be assigned.</param>
            <returns>True if there is an input, false otherwise.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.TryGetOutput(System.Int32,System.Collections.Generic.HashSet{System.Tuple{System.Int32,Dynamo.Models.NodeModel}}@)">
            <summary>
                Attempts to get the output for a certain port.
            </summary>
            <param name="output">Index to look for an output for.</param>
            <param name="newOutputs">If an output is found, it will be assigned.</param>
            <returns>True if there is an output, false otherwise.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.HasInput(System.Int32)">
            <summary>
                Checks if there is an input for a certain port.
            </summary>
            <param name="data">Index of the port to look for an input for.</param>
            <returns>True if there is an input, false otherwise.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.HasConnectedInput(System.Int32)">
            <summary>
                Checks if there is a connected input for a certain port. This does
                not count default values as an input.
            </summary>
            <param name="data">Index of the port to look for an input for.</param>
            <returns>True if there is an input, false otherwise.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.HasOutput(System.Int32)">
            <summary>
                Checks if there is an output for a certain port.
            </summary>
            <param name="portData">Index of the port to look for an output for.</param>
            <returns>True if there is an output, false otherwise.</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.ClearRuntimeError">
            <summary>
            Clears the errors/warnings that are generated when running the graph.
            If the node has a value supplied for the persistentWarning, then the
            node's State will be set to ElementState.Persistent and the ToolTipText will
            be set to the persistent warning. Otherwise, the State will be 
            set to ElementState.Dead
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.Warning(System.String,System.Boolean)">
            <summary>
            Set a warning on a node. 
            </summary>
            <param name="p">The warning text.</param>
            <param name="isPersistent">Is the warning persistent? If true, the warning will not be
            cleared when the node is next evaluated and any additional warning messages will be concatenated
            to the persistent error message. If false, the warning will be cleared on the next evaluation.</param>
        </member>
        <member name="M:Dynamo.Models.NodeModel.NotifyAstBuildBroken(System.String)">
            <summary>
            Change the state of node to ElementState.AstBuildBroken and display
            "p" in tooltip window. 
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Dynamo.Models.NodeModel.GetPortVerticalOffset(Dynamo.Models.PortModel)">
            <summary>
            If a "PortModel.LineIndex" property isn't "-1", then it is a PortModel
            meant to match up with a line in code block node. A code block node may 
            contain empty lines in it, resulting in one PortModel being spaced out 
            from another one. In such cases, the vertical position of PortModel is 
            dependent of its "LineIndex".
            
            If a "PortModel.LineIndex" property is "-1", then it is a regular 
            PortModel. Regular PortModel stacks up on one another with equal spacing,
            so their positions are based solely on "PortModel.Index".
            </summary>
            <param name="portModel">The portModel whose vertical offset is to be computed.</param>
            <returns>Returns the offset of the given port from the top of the ports</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.RegisterInputPorts">
            <summary>
                Reads inputs list and adds ports for each input.
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.RegisterOutputPorts">
            <summary>
                Reads outputs list and adds ports for each output
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.ConfigureSnapEdges(System.Collections.Generic.IList{Dynamo.Models.PortModel})">
            <summary>
            Configures the snap edges.
            </summary>
            <param name="ports">The ports.</param>
        </member>
        <member name="M:Dynamo.Models.NodeModel.RegisterAllPorts">
            <summary>
                Updates UI so that all ports reflect current state of InPortData and OutPortData.
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.AddPort(Dynamo.Models.PortType,Dynamo.Models.PortData,System.Int32)">
            <summary>
                Add a port to this node. If the port already exists, return that port.
            </summary>
            <param name="portType"></param>
            <param name="data"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.PrintExpression">
            <summary>
                Creates a Scheme representation of this dynNode and all connected dynNodes.
            </summary>
            <returns>S-Expression</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.OnSave">
            <summary>
                Called when the node's Workspace has been saved.
            </summary>
        </member>
        <member name="T:Dynamo.Models.NodeModel.ExecutionHints">
            <summary>
            Execution scenarios for a Node to be re-executed
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.RequestValueUpdateAsync(Dynamo.Core.Threading.IScheduler,Dynamo.Engine.EngineController)">
            <summary>
            Call this method to asynchronously update the cached MirrorData for 
            this NodeModel through DynamoScheduler. AstIdentifierForPreview is 
            being accessed within this method, therefore the method is typically
            called from the main/UI thread.
            </summary>
            
        </member>
        <member name="M:Dynamo.Models.NodeModel.RequestVisualUpdateAsync(Dynamo.Core.Threading.IScheduler,Dynamo.Engine.EngineController,Dynamo.Interfaces.IRenderPackageFactory,System.Boolean)">
            <summary>
            Call this method to asynchronously regenerate render package for 
            this node. This method accesses core properties of a NodeModel and 
            therefore is typically called on the main/UI thread.
            </summary>
            <param name="scheduler">An IScheduler on which the task will be scheduled.</param>
            <param name="engine">The EngineController which will be used to get MirrorData for the node.</param>
            <param name="factory">An IRenderPackageFactory which will be used to generate IRenderPackage objects.</param>
            <param name="forceUpdate">Normally, render packages are only generated when the node's IsUpdated parameter is true.
            By setting forceUpdate to true, the render packages will be updated.</param>
        </member>
        <member name="M:Dynamo.Models.NodeModel.OnRenderPackageUpdateCompleted(Dynamo.Core.Threading.AsyncTask)">
            <summary>
            This event handler is invoked when UpdateRenderPackageAsyncTask is 
            completed, at which point the render packages (specific to this node) 
            become available. 
            </summary>
            <param name="asyncTask">The instance of UpdateRenderPackageAsyncTask
            that was responsible of generating the render packages.</param>
            
        </member>
        <member name="E:Dynamo.Models.NodeModel.RequestRenderPackages">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.OnRequestRenderPackages">
            <summary>
            This event handler is invoked when the render packages (specific to this node)  
            become available and in addition the node requests for associated render packages 
            if any for example, packages used for associated node manipulators
            </summary>
        </member>
        <member name="M:Dynamo.Models.NodeModel.GetDrawableIds">
            <summary>
            Gets list of drawable Ids as registered with visualization manager 
            for all the output port of the given node.
            </summary>
            <returns>List of Drawable Ids</returns>
        </member>
        <member name="M:Dynamo.Models.NodeModel.GetDrawableId(System.Int32)">
            <summary>
            Gets the drawable Id as registered with visualization manager for
            the given output port on the given node.
            </summary>
            <param name="outPortIndex">Output port index</param>
            <returns>Drawable Id</returns>
        </member>
        <member name="F:Dynamo.Models.WorkspaceModel.currentPasteOffset">
            <summary>
                The offset of the elements in the current paste operation
            </summary>
        </member>
        <member name="F:Dynamo.Models.WorkspaceModel.PasteOffsetStep">
            <summary>
                The step to offset elements between subsequent paste operations
            </summary>
        </member>
        <member name="F:Dynamo.Models.WorkspaceModel.PasteOffsetMax">
            <summary>
                The maximum paste offset before reset
            </summary>
        </member>
        <member name="T:Dynamo.Models.WorkspaceModel.WorkspaceSavedEvent">
            <summary>
                Function that can be used to repsond to a saved workspace.
            </summary>
            <param name="model"></param>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.RequestNodeCentered">
            <summary>
                Event that is fired when a workspace requests that a Node or Note model is
                centered.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.OnRequestNodeCentered(System.Object,Dynamo.Models.ModelEventArgs)">
            <summary>
                Requests that a Node or Note model should be centered.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dynamo.Models.WorkspaceModel.ZoomEventHandler">
            <summary>
                Function that can be used to respond to a changed workspace Zoom amount.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.ZoomChanged">
            <summary>
                Event that is fired every time the zoom factor of a workspace changes.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.OnZoomChanged(System.Object,Dynamo.Models.ZoomEventArgs)">
            <summary>
            Used during open and workspace changes to set the zoom of the workspace
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dynamo.Models.WorkspaceModel.PointEventHandler">
            <summary>
                Function that can be used to respond to a "point event"
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.CurrentOffsetChanged">
            <summary>
                Event that is fired every time the position offset of a workspace changes.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.OnCurrentOffsetChanged(System.Object,Dynamo.Models.PointEventArgs)">
            <summary>
                Used during open and workspace changes to set the location of the workspace
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.WorkspaceSaved">
            <summary>
                Event that is fired when the workspace is saved.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.NodeAdded">
            <summary>
                Event that is fired when a node is added to the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.NodeRemoved">
            <summary>
                Event that is fired when a node is removed from the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.NodesCleared">
            <summary>
                Event that is fired when nodes are cleared from the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.NoteAdded">
            <summary>
                Event that is fired when a note is added to the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.NoteRemoved">
            <summary>
                Event that is fired when a note is removed from the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.NotesCleared">
            <summary>
                Event that is fired when notes are cleared from the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.AnnotationAdded">
            <summary>
                Event that is fired when an annotation is added to the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.AnnotationRemoved">
            <summary>
                Event that is fired when an annotation is removed from the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.AnnotationsCleared">
            <summary>
                Event that is fired when annotations are cleared from the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.ConnectorAdded">
            <summary>
                Event that is fired when a connector is added to the workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.ConnectorDeleted">
            <summary>
                Event that is fired when a connector is deleted from a workspace.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.Disposed">
            <summary>
                Event that is fired when this workspace is disposed of.
            </summary>
        </member>
        <member name="E:Dynamo.Models.WorkspaceModel.Saving">
            <summary>
            Event that is fired during the saving of the workspace.
            
            Add additional XmlNode objects to the XmlDocument provided,
            in order to save data to the file.
            </summary>
        </member>
        <member name="F:Dynamo.Models.WorkspaceModel.NodeFactory">
            <summary>
                A NodeFactory used by this workspace to create Nodes.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Presets">
            <summary>
                A set of input parameter states, this can be used to set the graph to a serialized state.       
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.LastSaved">
            <summary>
                The date of the last save.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Author">
            <summary>
                An author of the workspace
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Description">
            <summary>
                A description of the workspace
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.HasUnsavedChanges">
            <summary>
                Are there unsaved changes in the workspace?
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Nodes">
            <summary>
                All of the nodes currently in the workspace.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Connectors">
            <summary>
                All of the connectors currently in the workspace.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Notes">
            <summary>
                All of the notes currently in the workspace.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.FileName">
            <summary>
                Path to the file this workspace is associated with. If null or empty, this workspace has never been saved.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Name">
            <summary>
                The name of this workspace.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.X">
            <summary>
                Get or set the X position of the workspace.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Y">
            <summary>
                Get or set the Y position of the workspace
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Height">
            <summary>
                Get the height of the workspace's bounds.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Width">
            <summary>
                Get the width of the workspace's bounds.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Rect">
            <summary>
                Get the bounds of the workspace.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.CanUndo">
            <summary>
                Determine if undo operation is currently possible.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.CanRedo">
            <summary>
                Determine if redo operation is currently possible.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.UndoRecorder">
            <summary>
            Get the current UndoRedoRecorder that is associated with the current 
            WorkspaceModel. Note that external parties should not have the needs 
            to access the recorder directly, so this property is exposed just as 
            a "temporary solution". Before using this property, consider using 
            WorkspaceModel.RecordModelsForUndo method which allows for multiple 
            modifications in a single action group.
            </summary>
        </member>
        <member name="P:Dynamo.Models.WorkspaceModel.Guid">
            <summary>
            A unique identifier for the workspace.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.Clear">
            <summary>
                Clears this workspace of nodes, notes, and connectors.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.SaveAs(System.String,ProtoCore.RuntimeCore,System.Boolean)">
            <summary>
                Save to a specific file path, if the path is null or empty, does nothing.
                If successful, the CurrentWorkspace.FilePath field is updated as a side effect
            </summary>
            <param name="newPath">The path to save to</param>
            <param name="core"></param>
            <param name="isBackup">Indicates whether saved workspace is backup or not. If it's not backup,
            we should add it to recent files. Otherwise leave it.</param>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.AddAndRegisterNode(Dynamo.Models.NodeModel,System.Boolean)">
            <summary>
                Adds a node to this workspace.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.NodeModified(Dynamo.Models.NodeModel)">
            <summary>
                Indicates that the AST for a node in this workspace requires recompilation
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.RemoveNode(Dynamo.Models.NodeModel)">
            <summary>
            Removes a node from this workspace. 
            This method does not raise a NodesModified event. (LC notes this is clearly not true)
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.DoGraphAutoLayout">
            <summary>
            This function wraps a few methods on the workspace model layer
            to set up and run the graph layout algorithm.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.GenerateCombinedGraph(System.Boolean)">
            <summary>
            This method extracts all models from the workspace and puts them
            into the combined graph object, LayoutSubgraphs.First()
            <param name="isGroupLayout">True if all the selected models are groups.</param>
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.RecordUndoGraphLayout(System.Boolean)">
            <summary>
            This method adds relevant models to the undo recorder.
            </summary>
            <param name="isGroupLayout">True if all the selected models are groups.</param>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.GenerateSeparateSubgraphs">
            <summary>
            This method repeatedly takes a selected node in the combined graph and
            uses breadth-first search to find all other nodes in the same subgraph
            until all selected nodes have been processed.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.RunLayoutSubgraph(GraphLayout.Graph,System.Boolean)">
            <summary>
            This function calls the graph layout algorithm methods.
            </summary>
            <param name="graph">The subgraph to be processed.</param>
            <param name="isGroupLayout">True if all selected models are groups.</param>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.AvoidSubgraphOverlap">
            <summary>
            This method repeatedly shifts subgraphs away vertically from each other
            when there are any two nodes from different subgraphs overlapping.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.SaveLayoutGraph">
            <summary>
            This method pushes changes from the GraphLayout.Graph objects
            back to the workspace models.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dynamo.Models.WorkspaceModel.SetModelEventOnAnnotation" -->
        <member name="M:Dynamo.Models.WorkspaceModel.annotationModel_GetModelBase(System.Guid)">
            <summary>
            Get the model from Workspace
            </summary>
            <param name="modelGuid">The model unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.CheckIfModelExistsInSameGroup(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},System.Collections.Generic.IEnumerable{Dynamo.Models.NoteModel})">
            <summary>
            Checks if model exists in same group.
            </summary>
            <param name="selectNodes">The select nodes.</param>
            <param name="selectNotes">The select notes.</param>
            <returns>true if the models are already in the same group</returns>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.Save(ProtoCore.RuntimeCore)">
            <summary>
            Save assuming that the Filepath attribute is set.
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.ResetWorkspaceCore">
            <summary>
            Derived workspace classes can choose to override 
            this method to perform clean-up specific to them.
            </summary>
            
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.IncrementPasteOffset">
            <summary>
                Increment the current paste offset to prevent overlapping pasted elements
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.AddPresetCore(System.String,System.String,System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel})">
            <summary>
             this method creates a new preset state from a set of NodeModels and adds this new state to this presets collection
            </summary>
            <param name="name">the name of preset state</param>
            <param name="description">a description of what the state does</param>
            <param name="currentSelection">a set of NodeModels that are to be serialized in this state</param>
            <param name="id">a GUID id for the state, if not supplied, a new GUID will be generated, cannot be a duplicate</param>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.RecordModelsForModification(System.Collections.Generic.List{Dynamo.Models.ModelBase},Dynamo.Core.UndoRedoRecorder)">
            <summary>
            TODO(Ben): This method is exposed this way for external codes (e.g. 
            the DragCanvas) to record models before they are modified. This is 
            by no means ideal. The ideal case of course is for ALL codes that 
            end up modifying models to be folded back into WorkspaceViewModel in 
            the form of commands. These commands then internally record those
            affected models before updating them. We need this method to be gone
            sooner than later.
            </summary>
            <param name="models">The models to be recorded for undo.</param>
            <param name="recorder"></param>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.IsInternalNodeToCodeConnection(System.Collections.Generic.IEnumerable{Dynamo.Models.NodeModel},Dynamo.Models.ConnectorModel)">
            <summary>
            Checks whether the given connection is inside the node to code set or outside it. 
            This determines if it should be redrawn(if it is external) or if it should be 
            deleted (if it is internal)
            </summary>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.ReConnectOutputConnections(System.Collections.Generic.Dictionary{Dynamo.Models.ConnectorModel,System.String},Dynamo.Nodes.CodeBlockNodeModel)">
            <summary>
            Forms new connections from the external nodes to the Node To Code Node,
            based on the connectors passed as inputs.
            </summary>
            <param name="externalOutputConnections">List of connectors to remake, along with the port names of the new port</param>
            <param name="cbn">The new Node To Code created Code Block Node</param>
        </member>
        <member name="M:Dynamo.Models.WorkspaceModel.ReConnectInputConnections(System.Collections.Generic.Dictionary{Dynamo.Models.ConnectorModel,System.String},Dynamo.Nodes.CodeBlockNodeModel)">
            <summary>
            Forms new connections from the external nodes to the Node To Code Node,
            based on the connectors passed as inputs.
            </summary>
            <param name="externalInputConnections">List of connectors to remake, along with the port names of the new port</param>
            <param name="cbn">The new Node To Code created Code Block Node</param>
        </member>
        <member name="T:Dynamo.Nodes.DoNotLoadOnPlatformsAttribute">
            <summary>
                The DoNotLoadOnPlatforms attribute allows the node implementor
                to define an array of contexts in which the node will not
                be loaded.
            </summary>
        </member>
        <member name="T:Dynamo.Nodes.NodeDeprecatedAttribute">
            <summary>
                Flag to hide deprecated nodes in search, but allow in workflows
            </summary>
        </member>
        <member name="T:Dynamo.Nodes.AlsoKnownAsAttribute">
            <summary>
                The AlsoKnownAs attribute allows the node implementor to
                define an array of names that this node might have had
                in the past.
            </summary>
        </member>
        <member name="T:Dynamo.Nodes.IsMetaNodeAttribute">
            <summary>
                The MetaNode attribute means this node shouldn't be added to the category,
                only its instances are allowed
            </summary>
        </member>
        <member name="T:Dynamo.Nodes.IsDesignScriptCompatibleAttribute">
            <summary>
                The IsDesignScriptCompatibleAttribute indicates if the node is able
                to work with DesignScript evaluation engine.
            </summary>
        </member>
        <member name="T:Dynamo.Nodes.NodeObsoleteAttribute">
            <summary>
               The NodeDescriptionAttribute indicates this node is obsolete
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockUtils.NormalizeLineBreaks(System.String)">
            <summary>
            Call this method to turn all "\r\n" and "\r" 
            occurrences in the given string into "\n".
            </summary>
            <param name="text">The text to be normalized</param>
            <returns>Returns the normalized string.</returns>
            
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockUtils.GenerateInputPortData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Call this method to generate a list of PortData from given set of 
            unbound identifiers. This method ensures that the generated ports 
            are only having names that do not exceed a preconfigured length.
            </summary>
            <param name="unboundIdents">A list of unbound identifiers for which 
            input port data is to be generated. This list can be empty but it 
            cannot be null.</param>
            <returns>Returns a list of input port data generated based on the 
            input unbound identifier list.</returns>
            
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockUtils.GetStatementVariables(System.Collections.Generic.IEnumerable{Dynamo.Nodes.Statement},System.Boolean)">
            <summary>
            Call this method to get a list of lists of variables defined in 
            the given set of Statement objects. This method is typically used 
            in conjunction with DoesStatementRequireOutputPort method.
            </summary>
            <param name="statements">A list of Statement objects whose defined 
            variables are to be retrieved. This list can be empty but it cannot 
            be null.</param>
            <param name="onlyTopLevel">Set this parameter to false to retrieve 
            all variables defined in nested Statement objects.</param>
            <returns>Returns a list of lists of variables defined by the given 
            set of Statement objects.</returns>
            
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockUtils.DoesStatementRequireOutputPort(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}},System.Int32)">
            <summary>
            Checks wheter an outport is required for a Statement with the given 
            index. An outport is not required if there are no defined variables 
            or if any of the defined variables have been declared again later on
            in the same code block.
            </summary>
            <param name="statementVariables">A list of lists, each of which 
            contains variables defined by a Statement at the index. This list 
            can be obtained from calling GetStatementVariables method.</param>
            <param name="index">The index of the Statement for which this call 
            is made.</param>
            <returns>Returns true if an output port is required, or false 
            otherwise.</returns>
            
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockUtils.FormatUserText(System.String)">
            <summary>
            Call this method to format user codes in the following ways:
            
            1. Leading and trailing whitespaces are removed from the original 
               string. Characters that qualify as "whitespaces" are: '\n', '\t'
               and ' '.
            
            2. Multiple statements on a single line will be broken down further 
               into multiple statements. For example, "a = 1; b = 2;" will be 
               broken down into two lines: "a = 1;\nb = 2;" (line break denoted 
               by the new \n character).
            
            3. Leading whitespaces will be removed ony for the first line. This 
               is to preserve the indentation for lines other than the first.
            
            4. If the resulting codes do not end with a closing curly bracket '}',
               then a semi-colon is appended to the code. This ensures codes like 
               "a" will result in codes becoming "a;"
            
            </summary>
            <param name="inputCode">Original code content as typed in by the user.
            </param>
            <returns>Returns the formatted code with the above process.</returns>
            
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockUtils.GetDefinitionLineIndexMap(System.Collections.Generic.IEnumerable{Dynamo.Nodes.Statement})">
            <summary>
            Returns a list of defined variables, along with the line number on which 
            they are defined last. A variable can be defined multiple times in a single 
            code block node, but the output port is only shown on the last definition.
            </summary>
            <returns>Returns a map between defined variables and the line index on 
            which they are defined last.</returns>
        </member>
        <member name="T:Dynamo.Nodes.CodeCompletionParser">
            <summary>
            This class exposes utility methods to:
            1. extract variable types from variable declarations such as 'Point' from a : Point;
            2. extract the string to autocomplete on from a block of code
            </summary>
        </member>
        <member name="F:Dynamo.Nodes.CodeCompletionParser.strPrefix">
            <summary>
            Expression to autocomplete on is on top of 'expressionStack'
            </summary>
        </member>
        <member name="F:Dynamo.Nodes.CodeCompletionParser.functionName">
            <summary>
            Function call being currently typed
            </summary>
        </member>
        <member name="F:Dynamo.Nodes.CodeCompletionParser.functionPrefix">
            <summary>
            Identifier or Class name on which function being typed currently is invoked
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.CodeCompletionParser.GetVariableType(System.String,System.String)">
            <summary>
            Parses given block of code and declared variable,
            returns the type of the variable: e.g. in:
            "a : Point;" returns 'Point'
            </summary>
            <param name="code"> block of code being parsed </param>
            <param name="variableName">input declared variable: 'a' in example </param>
            <returns> returns Point in example </returns>
        </member>
        <member name="M:Dynamo.Nodes.CodeCompletionParser.GetStringToComplete(System.String)">
            <summary>
            Given the code that's currently being typed in a CBN,
            this function extracts the expression that needs to be code-completed
            e.g. given "abc.X[{xyz.b.foo((abc" it returns "abc"
            which is the "thing" that needs to be queried for completions
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Dynamo.Nodes.CodeCompletionParser.GetFunctionToComplete(System.String,System.String@,System.String@)">
            <summary>
            Given a block of code that's currently being typed 
            this returns the method name and the type name on which it is invoked
            e.g. "Point.ByCoordinates" returns 'ByCoordinates' as the functionName and 'Point' as functionPrefix
            "abc.X[{xyz.b.foo" returns 'foo' as the functionName and 'xyz.b' as the "functionPrefix" on which it is invoked
            </summary>
            <param name="code"> input code block </param>
            <param name="functionName"> output function name </param>
            <param name="functionPrefix"> output type or variable on which fn is invoked </param>
        </member>
        <member name="M:Dynamo.Nodes.CodeCompletionParser.IsInsideCommentOrString(System.String,System.Int32)">
            <summary>
            Parse text to determine if string being typed at caretPos is in 
            the context of a comment or string or character
            </summary>
            <param name="text"> input block of code </param>
            <param name="caretPos"> caret position in text at which to determine context </param>
            <returns> True if any of above context is true </returns>
        </member>
        <member name="T:Dynamo.Nodes.CustomNodeController`1">
            <summary>
                Controller that synchronizes a node with a custom node definition.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.CustomNodeController`1.IsInSyncWithNode(Dynamo.Models.NodeModel)">
            <summary>
              Return if the custom node instance is in sync with its definition.
              It may be out of sync if .dyf file is opened and updated and then
              .dyn file is opened. 
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.VariableInputNodeController.GetInputIndexFromModel">
            <summary>
                Fetches the index number to use for the next port.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.VariableInputNodeController.RemoveInputFromModel">
            <summary>
            Removes an input from this node. Called when the '-' button is clicked.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.VariableInputNodeController.AddInputToModel">
            <summary>
            Adds an input to this node. Called when the '+' button is clicked.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.VariableInputNodeController.SetNumInputs(System.Int32)">
            <summary>
            Set the number of inputs.  
            </summary>
            <param name="numInputs"></param>
        </member>
        <member name="M:Dynamo.Nodes.VariableInputNodeController.SerializeInputCount(System.Xml.XmlElement,System.Int32)">
            <summary>
                Serializes the input count of a VariableInputNode to Xml.
            </summary>
            <param name="nodeElement"></param>
            <param name="amount"></param>
        </member>
        <member name="T:Dynamo.Nodes.DSVarArgFunction">
            <summary>
                DesignScript var-arg function node. All functions from DesignScript share the
                same function node but internally have different procedure.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.DSVarArgFunction.VarInputController">
            <summary>
                Custom VariableInput controller for DSVarArgFunctions.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.DSVarArgFunction.ZeroTouchVarInputController.GetInputIndexFromModel">
            <summary>
            This method is to get the index of the adding Input when we click +
            nodeController.Definition.Parameters.Count() will return 
            the number of inputs the node got by default. For example, String.Join
            got separator+string0. when we click +, base.GetInputIndexFromModel() return 2,
            (nodeController.Definition.Parameters.Count() -1) return 1. Then the new port will 
            be string1
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Nodes.ZeroTouchVarArgNodeController`1">
            <summary>
                Controller that extends Zero Touch synchronization with VarArg function compilation.
            </summary>
        </member>
        <member name="T:Dynamo.Nodes.DSFunctionBase">
            <summary>
                Base class for NodeModels representing zero-touch-imported-function calls.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.DSFunctionBase.SerializeCore(System.Xml.XmlElement,Dynamo.Models.SaveContext)">
            <summary>
                Copy command will call it to serialize this node to xml data.
            </summary>
        </member>
        <member name="T:Dynamo.Nodes.ZeroTouchNodeController`1">
            <summary>
                Controller that synchronizes a node with a zero-touch function definition.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.ZeroTouchNodeController`1.Description">
            <summary>
                Description of function, taken from Definition.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.ZeroTouchNodeController`1.Category">
            <summary>
                Category of function, taken from Definition.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.ZeroTouchNodeController`1.MangledName">
            <summary>
                MangledName of function, taken from Definition.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.ZeroTouchNodeController`1.IsInstanceMember">
            <summary>
                Is this function an instance member of a class?
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.ZeroTouchNodeController`1.IsStaticMember">
            <summary>
                Is this function a static member of a class?
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.ZeroTouchNodeController`1.IsConstructor">
            <summary>
                Is this function a constructor of a class?
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.ZeroTouchNodeController`1.InitializeFunctionParameters(Dynamo.Models.NodeModel,System.Collections.Generic.IEnumerable{Dynamo.Library.TypedParameter})">
            <summary>
                Initializes a node's InPortData based on a list of parameters.
            </summary>
            <param name="model">Node to initialize.</param>
            <param name="parameters">Parameters used for initialization.</param>
        </member>
        <member name="M:Dynamo.Nodes.ZeroTouchNodeController`1.CreateFunctionObject(Dynamo.Models.NodeModel,ProtoCore.AST.AssociativeAST.AssociativeNode,System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
                Creates a FunctionObject representing a partial application of a function.
            </summary>
            <param name="model">Node to produce FunctionObject for.</param>
            <param name="functionNode">AST representing the function to make a FunctionObject out of.</param>
            <param name="inputs">Arguments to be applied partially.</param>
        </member>
        <member name="T:Dynamo.Nodes.FunctionCallNodeController`1">
            <summary>
                Controller for nodes that act as function calls.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.FunctionCallNodeController`1.Definition">
            <summary>
                A FunctionDescriptor describing the function that this controller will call.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.FunctionCallNodeController`1.NickName">
            <summary>
                NickName for nodes using this controller, based on the underlying FunctionDescriptor.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.FunctionCallNodeController`1.ReturnKeys">
            <summary>
                ReturnKeys for multi-output functions.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.BuildAst(Dynamo.Models.NodeModel,System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
                Produces AST for a function call. Takes into account multi-outputs and partial application.
            </summary>
            <param name="model">NodeModel to produce an AST for.</param>
            <param name="inputAstNodes">Arguments to the function call.</param>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.BuildAstForPartialMultiOutput(Dynamo.Models.NodeModel,ProtoCore.AST.AssociativeAST.AssociativeNode,System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
                Produces AST for a partial function application of a multi-output function.
            </summary>
            <param name="model">NodeModel to produce AST for.</param>
            <param name="rhs">AST representing the partial application. This will need to be used to assign all output port identifiers.</param>
            <param name="resultAst">Result accumulator: add all new output AST to this list.</param>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.AssignIdentifiersForFunctionCall(Dynamo.Models.NodeModel,ProtoCore.AST.AssociativeAST.AssociativeNode,System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
                Produces AST that assigns all necessary Identifiers for the given NodeModel from
                the produced function call AST.
            </summary>
            <param name="model">Model to produce AST for.</param>
            <param name="rhs">AST for the function call. This will need to be used to assign all output port identifiers.</param>
            <param name="resultAst">Result accumulator: add all new output AST to this list.</param>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.BuildOutputAst(Dynamo.Models.NodeModel,System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode},System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
                Produces AST for the given NodeModel that will call the underlying
                Function and assign all Identifiers for the node.
            </summary>
            <param name="model">NodeModel to produce AST for.</param>
            <param name="inputAstNodes">Arguments to the function call.</param>
            <param name="resultAst">Result accumulator: add all new output AST to this list.</param>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.InitializeInputs(Dynamo.Models.NodeModel)">
            <summary>
                Initialize all input ports on the given node based on the underlying
                function.
            </summary>
            <param name="model">Node to initialize.</param>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.InitializeOutputs(Dynamo.Models.NodeModel)">
            <summary>
                Initialize all output ports on the given node based on the underlying
                function.
            </summary>
            <param name="model">Node to initialize.</param>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.GetFunctionApplication(Dynamo.Models.NodeModel,System.Collections.Generic.List{ProtoCore.AST.AssociativeAST.AssociativeNode})">
            <summary>
                Produces AST representing a function application for the given NodeModel, using the
                given arguments. This should not assign any of the node's identifiers.
            </summary>
            <param name="model">Node to produce a function application for.</param>
            <param name="inputAstNodes">Arguments to the function application.</param>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.DeserializeCore(System.Xml.XmlElement,Dynamo.Models.SaveContext)">
            <summary>
                Deserializes Controller information from XML.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.SerializeCore(System.Xml.XmlElement,Dynamo.Models.SaveContext)">
            <summary>
                Serializes Controller information from XML.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.SyncNodeWithDefinition(Dynamo.Models.NodeModel)">
            <summary>
                Synchronizes a node with this controller, based on the underlying function.
            </summary>
            <param name="model">Node to sync.</param>
        </member>
        <member name="E:Dynamo.Nodes.FunctionCallNodeController`1.SyncWithDefinitionStart">
            <summary>
            Event handler for the event when node starts syncing with its 
            definition.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.OnSyncWithDefinitionStart(Dynamo.Models.NodeModel)">
            <summary>
            Start syncing with its definition.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:Dynamo.Nodes.FunctionCallNodeController`1.SyncWithDefinitionEnd">
            <summary>
            Event handler for the event when node finishes syncing with its
            definition.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.FunctionCallNodeController`1.OnSyncWithDefintionEnd(Dynamo.Models.NodeModel)">
            <summary>
            Finish syncing with its definition.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Dynamo.Nodes.FunctionCallBase`2">
            <summary>
                Node base class for all nodes that produce a DS function call.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.FunctionCallBase`2.Controller">
            <summary>
                Controller used to sync node with a function definition.
            </summary>
        </member>
        <member name="P:Dynamo.Nodes.FunctionCallBase`2.CreationName">
            <summary>
            The unique name that the node was created by
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.ProcessError">
            <summary>
                It removes all the in ports and out ports so that the user knows there is an error.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.GetDefinedVariableNames">
            <summary>
                Returns the names of all the variables defined in this code block.
            </summary>
            <returns>List containing all the names</returns>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.GetInportIndex(Dynamo.Nodes.CodeBlockNodeModel,System.String)">
            <summary>
            Returns the index of the port corresponding to the variable name given
            </summary>
            <param name="variableName"> Name of the variable corresponding to an input port </param>
            <returns> Index of the required port in the InPorts collection </returns>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.GetOutportIndex(System.String)">
            <summary>
             Returns the corresponding output port index for a given defined variable 
            </summary>
            <param name="variableName"></param>
            <returns></returns>
        </member>
        <member name="P:Dynamo.Nodes.CodeBlockNodeModel.TempVariables">
            <summary>
            Temporary variables that generated in code.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.GetAstIdentifierForOutputIndexInternal(System.Int32,System.Boolean)">
            <summary>
            For code block nodes, each output identifier of an output port is mapped.
            For an example, "p = 1" would have its internal identifier renamed to 
            "pXXXX", where "XXXX" is the GUID of the code block node. This mapping is 
            done to ensure the uniqueness of the output variable name.
            </summary>
            <param name="portIndex">Output port index</param>
            <param name="forRawName">Set this parameter to true to retrieve the 
            original identifier name "p". If this parameter is false, the mapped 
            identifer name "pXXXX" is returned instead.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.GetTypeHintForOutput(System.Int32)">
            <summary>
            Return possible type of the output at specified output port.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.CreateInputOutputPorts">
            <summary>
            Creates the inport and outport data based on 
            the statements generated from the user code.
            </summary>
            
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.SaveAndDeleteConnectors(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
                Deletes all the connections and saves their data (the start and end port)
                so that they can be recreated if needed.
            </summary>
            <param name="inportConnections">A list of connections that will be destroyed</param>
            <param name="outportConnections"></param>
        </member>
        <member name="M:Dynamo.Nodes.CodeBlockNodeModel.LoadAndCreateConnectors(System.Collections.Specialized.OrderedDictionary,System.Collections.Specialized.OrderedDictionary)">
            <summary>
                Now that the portData has been set for the new ports, we recreate the connections we
                so mercilessly destroyed, restoring peace and balance to the world once again.
            </summary>
            <param name="inportConnections"></param>
            <param name="outportConnections"> List of the connections that were killed</param>
        </member>
        <member name="M:Dynamo.Nodes.Statement.GetReferencedVariableNames(Dynamo.Nodes.Statement,System.Boolean)">
            <summary>
                Returns the names of the variables that have been referenced in the statement
            </summary>
            <param name="s"> Statement whose variable names to be got.</param>
            <param name="onlyTopLevel"> Bool to check if required to return reference variables in sub statements as well</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Nodes.Statement.GetDefinedVariableNames(Dynamo.Nodes.Statement,System.Boolean)">
            <summary>
                Returns the names of the variables that have been declared in the statement
            </summary>
            <param name="s"> Statement whose variable names to be got.</param>
            <param name="onlyTopLevel"> Bool to check if required to return reference variables in sub statements as well</param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Nodes.DSFunction">
            <summary>
                DesignScript function node. All functions from DesignScript share the
                same function node but internally have different procedure.
            </summary>
        </member>
        <member name="T:Dynamo.Nodes.BuiltinNodeCategories">
            <summary>
            Built-in Dynamo Categories. If you want your node to appear in one of the existing Dynamo
            categories, then use these constants. This ensures that if the names of the categories
            change down the road, your node will still be placed there.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.PreprocessTypeName(System.String)">
            <summary>
            <para>This method patches the fullyQualifiedName of a given type. It 
            updates the given name to its newer form (i.e. "Dynamo.Nodes.Xyz")
            if it matches the older form (e.g. "Dynamo.Elements.Xyz").</para>
            <para>The method also attempts to update "XYZ/UV" convention to 
            "Xyz/Uv" to comply with the new Dynamo naming convention.</para>
            </summary>
            <param name="fullyQualifiedName">A fully qualified name. An example
            of this would be "Dynamo.Elements.dynNode".</param>
            <returns>The processed fully qualified name. For an example, the 
            name "Dynamo.Elements.UV" will be returned as "Dynamo.Nodes.Uv".
            </returns>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.TypedParametersToString(Dynamo.Engine.FunctionDescriptor,System.String)">
            <summary>
            This method returns a name for the icon based on name of the node.
            </summary>
            <param name="descriptor">Function descriptor, that contains all info about node.</param>
            <param name="overridePrefix">
            overridePrefix is used as default value for generating node icon name.
            If overridePrefix is empty, it uses QualifiedName property.
            e.g. Autodesk.DesignScript.Geometry.CoordinateSystem.ByOrigin
            </param>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.SetDocumentXmlPath(System.Xml.XmlDocument,System.String)">
            <summary>
            Call this method to associate/remove the target file path with/from
            the given XmlDocument object.
            </summary>
            <param name="document">The XmlDocument with which the target file 
            path is to be associated. This parameter cannot be null.</param>
            <param name="targetFilePath">The target file path to be associated 
            with the given XmlDocument. If this parameter is null or an empty 
            string, then any target file path that was previously associated 
            will be removed.</param>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.GetDocumentXmlPath(System.Xml.XmlDocument)">
            <summary>
            Call this method to retrieve the associated target file path from 
            the given XmlDocument object. An exception will be thrown if such 
            target file path was never associated with the XmlDocument object.
            </summary>
            <param name="document">The XmlDocument object from which the 
            associated target file path is to be retrieved.</param>
            <returns>Returns the associated target file path.</returns>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.SaveTraceDataToXmlDocument(System.Xml.XmlDocument,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Guid,System.Collections.Generic.List{System.String}}})">
            <summary>
            Call this method to serialize given node-data-list pairs into an 
            XmlDocument. Serialized data in the XmlDocument can be loaded by a 
            call to LoadTraceDataFromXmlDocument method.
            </summary>
            <param name="document">The target document to which the trade data 
            is to be written. This parameter cannot be null and must represent 
            a valid XmlDocument object.</param>
            <param name="nodeTraceDataList">A dictionary of node-data-list pairs
            to be saved to the XmlDocument. This parameter cannot be null and 
            must represent a non-empty list of node-data-list pairs.</param>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.LoadTraceDataFromXmlDocument(System.Xml.XmlDocument)">
            <summary>
            Call this method to load serialized node-data-list pairs (through a 
            prior call to SaveTraceDataToXmlDocument) from a given XmlDocument.
            </summary>
            <param name="document">The XmlDocument from which serialized node-
            data-list pairs are to be deserialized.</param>
            <returns>Returns a dictionary of deserialized node-data-list pairs
            loaded from the given XmlDocument.</returns>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.MakeRelativePath(System.String,System.String)">
            <summary>
            Call this method to compute the relative path of a subject path 
            relative to the given base path.
            </summary>
            <param name="basePath">The base path which relative path is to be 
            computed from. This base path does not need to point to a valid file
            on disk, but it cannot be an empty string.</param>
            <param name="subjectPath">The subject path of which the relative
            path is to be computed. If this path is not empty but does not 
            represent a valid path string, a UriFormatException is thrown.</param>
            <returns>Returns the path of the subject relative to the given base 
            path.</returns>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.MakeAbsolutePath(System.String,System.String)">
            <summary>
            Call this method to form the absolute path to target pointed to by 
            relativePath parameter. The absolute path is formed by computing both
            base path and the relative path.
            </summary>
            <param name="basePath">The base path from which the absolute path is 
            to be computed. This argument cannot be null or empty.</param>
            <param name="relativePath">The relative path to the target. This 
            argument cannot be null or empty.</param>
            <returns>Returns the absolute path.</returns>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.WrapText(System.String,System.Int32)">
            <summary>
            Gets words from text, e.g. ImportFromCSV to ("Import","From","CSV")
            </summary>
            <param name="text">incoming string</param>
            <param name="maxCharacters">Max number of characters per row</param>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.ReduceRowCount(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Reduces the number of rows, based on the entries inside rows parameter.
            E.g. rows = { "Insert", "Day", "Of", "Week", "Here" }, maxRows == 3
            Result { "Insert", "Day", "Of Week Here" }
            </summary>
            <param name="rows">Incoming rows</param>
            <param name="maxRows">Max number of rows</param>
        </member>
        <member name="M:Dynamo.Nodes.Utilities.TruncateRows(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Truncate each entry in the given "rows" to a maximum of "maxCharacters".
            For examples, given that "maxCharacters" equals to "8":
            
                { "Surface", "Analysis Data" } => { "Surface", "..s Data" }
                { "By", "Geometry", "Coordinate", "System" } => { "By", "Geometry", "Coordi..", "System" }
                { "By Geometry", "Coordinate System" } => { "By Geo..", "..System" }
            </summary>
            <param name="rows">Incomming rows</param>
            <param name="maxCharacters">Max number characters per row</param>
        </member>
        <member name="T:Dynamo.Nodes.Function">
            <summary>
                DesignScript Custom Node instance.
            </summary>
        </member>
        <member name="M:Dynamo.Nodes.Function.LoadNode(System.Guid,System.Int32,System.Int32)">
            <summary>
                Complete a definition for a proxy custom node instance 
                by adding input and output ports as far as we don't have
                a corresponding custom node workspace
            </summary>
            <param name="funcID">Identifier of the custom node instance</param>
            <param name="inputs">Number of inputs</param>
            <param name="outputs">Number of outputs</param>
        </member>
        <member name="T:Dynamo.Search.Interfaces.ISearchCategory`1">
            <summary>
                A search category.
            </summary>
            <typeparam name="TEntry"></typeparam>
        </member>
        <member name="P:Dynamo.Search.Interfaces.ISearchCategory`1.Name">
            <summary>
                The name of this category.
            </summary>
        </member>
        <member name="P:Dynamo.Search.Interfaces.ISearchCategory`1.Entries">
            <summary>
                Entries contained in this category.
            </summary>
        </member>
        <member name="P:Dynamo.Search.Interfaces.ISearchCategory`1.SubCategories">
            <summary>
                Sub-categories contained in this category
            </summary>
        </member>
        <member name="T:Dynamo.Search.Interfaces.ISearchEntry">
            <summary>
                Has a collection of strings that can be used to identifiy the instance
                in a search.
            </summary>
        </member>
        <member name="P:Dynamo.Search.Interfaces.ISearchEntry.Name">
            <summary>
                Name of this search entry.
            </summary>
        </member>
        <member name="P:Dynamo.Search.Interfaces.ISearchEntry.SearchTags">
            <summary>
                Tags which can be used to search for this entry.
            </summary>
        </member>
        <member name="P:Dynamo.Search.Interfaces.ISearchEntry.SearchTagWeights">
            <summary>
                Every search tag should have weight. This weight will be taken into account during search.
            </summary>
        </member>
        <member name="P:Dynamo.Search.Interfaces.ISearchEntry.Description">
            <summary>
                Description of this search entry.
            </summary>
        </member>
        <member name="T:Dynamo.Search.NodeSearchModel">
            <summary>
                Searchable library of NodeSearchElements that can produce NodeModels.
            </summary>
        </member>
        <member name="M:Dynamo.Search.NodeSearchModel.DumpLibraryToXml(System.String)">
            <summary>
                Dumps the contents of search into an Xml file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Dynamo.Search.NodeSearchModel.ComposeXmlForLibrary">
            <summary>
                Serializes the contents of search into Xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Search.NodeSearchModel.ProcessNodeCategory(System.String,Dynamo.Search.SearchElementGroup@)">
            <summary>
            Call this method to assign a default grouping information if a given category 
            does not have any. A node category's group can either be "Create", "Query" or
            "Actions". If none of the group names above is assigned to the category, it 
            will be assigned a default one that is "Actions".
            
            For examples:
            
                "Core.Evaluate" will be renamed as "Core.Evaluate.Actions"
                "Core.List.Create" will remain as "Core.List.Create"
            
            </summary>
        </member>
        <member name="T:Dynamo.Search.SearchElements.CodeBlockNodeSearchElement">
            <summary>
                Search element for Code Block nodes.
            </summary>
        </member>
        <member name="T:Dynamo.Search.SearchElements.CustomNodeSearchElement">
            <summary>
                Search element for custom nodes.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.CustomNodeSearchElement.Path">
            <summary>
                Path to this custom node in disk, used in the Edit context menu.
            </summary>
        </member>
        <member name="M:Dynamo.Search.SearchElements.CustomNodeSearchElement.SyncWithCustomNodeInfo(Dynamo.CustomNodeInfo)">
            <summary>
                Updates the properties of this search element.
            </summary>
            <param name="info"></param>        
        </member>
        <member name="T:Dynamo.Search.SearchElements.NodeModelSearchElement">
            <summary>
                Search element for basic NodeModels.
            </summary>
        </member>
        <member name="T:Dynamo.Search.SearchElements.NodeModelSearchElementBase">
            <summary>
                Base class for node search elements that can be initialized from TypeLoadData.
            </summary>
        </member>
        <member name="T:Dynamo.Search.SearchElements.NodeSearchElement">
            <summary>
                Base class for all Dynamo Node search elements.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.IsVisibleInSearch">
            <summary>
                Specified whether or not this entry should appear in search.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.CreationName">
            <summary>
            The name that is used during node creation
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.Categories">
            <summary>
                List of nested categories this search element is contained in.
            </summary>
        </member>
        <member name="M:Dynamo.Search.SearchElements.NodeSearchElement.SplitCategoryName(System.String)">
            <summary>
                Split a category name into individual category names splitting be DEFAULT_DELIMITER
            </summary>
            <param name="categoryName">The name</param>
            <returns>A list of output</returns>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.FullName">
            <summary>
                The full name of entry which consists of category name and entry name.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.FullCategoryName">
            <summary>
                The category name of this node.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.Dynamo#Search#Interfaces#ISearchEntry#Name">
            <summary>
                The name of this entry in search.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.Name">
            <summary>
                The name of this entry as it appears in the library.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.Parameters">
            <summary>
                The parameters of this entry, used for overloaded nodes.
            </summary>
        </member>
        <member name="F:Dynamo.Search.SearchElements.NodeSearchElement.Weight">
            <summary>
                The search weight of this entry.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.SearchKeywords">
            <summary>
                Collection of keywords which can be used to search for this element.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.Description">
            <summary>
                Description of the node.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.Group">
            <summary>
                Group to which Node belongs to 
            </summary>        
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.Assembly">
            <summary>
                Group to which Node belongs to 
            </summary>        
        </member>
        <member name="P:Dynamo.Search.SearchElements.NodeSearchElement.ElementType">
            <summary>
                Indicates whether it is custom node or zero-touch element.
                And whether this element comes from package or not.
            </summary>
        </member>
        <member name="E:Dynamo.Search.SearchElements.NodeSearchElement.ItemProduced">
            <summary>
                Event fired when this search element produces a new NodeModel. This typically
                happens when it is selected in the library by the user.
            </summary>
        </member>
        <member name="M:Dynamo.Search.SearchElements.NodeSearchElement.ConstructNewNodeModel">
            <summary>
                Creates a new NodeModel to be inserted into the current Dynamo workspace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Search.SearchElements.NodeSearchElement.ProduceNode">
            <summary>
                Produces a new Node, via the ItemProduced event.
            </summary>
        </member>
        <member name="T:Dynamo.Search.SearchElements.ZeroTouchSearchElement">
            <summary>
                Search element for a Zero Touch node (DSFunction / DSVarArgFunction)
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.ZeroTouchSearchElement.CreationName">
            <summary>
            The name that is used during node creation
            </summary>
        </member>
        <member name="T:Dynamo.Search.SearchElements.SearchElementBase">
            <summary>
            A base class for elements found in search </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.SearchElementBase.CreationName">
            <summary>
            The name that is used during node creation
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchElements.SearchElementBase.Searchable">
            <summary>
            Searchable property </summary>
            <value>
            A bool indicating if the object will appear in searches </value>
        </member>
        <member name="P:Dynamo.Search.SearchElements.SearchElementBase.Type">
            <summary>
            Type property </summary>
            <value>
            A string describing the type of object </value>
        </member>
        <member name="P:Dynamo.Search.SearchElements.SearchElementBase.Description">
            <summary>
            Description property </summary>
            <value>
            A string describing what the node does</value>
        </member>
        <member name="P:Dynamo.Search.SearchElements.SearchElementBase.Keywords">
            <summary>
            Keywords property</summary>
            <value>
            A set of keywords for the object, joined by spaces</value>
        </member>
        <member name="P:Dynamo.Search.SearchElements.SearchElementBase.Weight">
            <summary>
            Weight property </summary>
            <value>
            Number defining the relative importance of the element in search. 
            Higher = closer to the top of search results </value>
        </member>
        <member name="T:Dynamo.Search.SearchLibrary`2">
            <summary>
                Searchable library of item sources.
            </summary>
            <typeparam name="TEntry">Type of searchable elements.</typeparam>
            <typeparam name="TItem">Type of items produced by searchable elements.</typeparam>
        </member>
        <member name="M:Dynamo.Search.SearchLibrary`2.Add(`0)">
            <summary>
                Adds an entry to search.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="M:Dynamo.Search.SearchLibrary`2.Update(`0,System.Boolean)">
            <summary>
                Updates an entry in search.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="E:Dynamo.Search.SearchLibrary`2.ItemProduced">
            <summary>
                Produces an item whenever a search element produces an item.
            </summary>
        </member>
        <member name="T:Dynamo.Search.SearchCategoryUtil">
            <summary>
                Utility methods for categorizing search elements.
            </summary>
        </member>
        <member name="M:Dynamo.Search.SearchCategoryUtil.CategorizeSearchEntries``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.ICollection{System.String}})">
            <summary>
                Categorizes a sequence search entries.
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="entries"></param>
            <param name="categorySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Search.SearchCategoryUtil.GetAllCategoryNames``1(Dynamo.Search.Interfaces.ISearchCategory{``0})">
            <summary>
                Gets all nested categories from a sequence of search entries.
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Search.BrowserItem.GetVisibleLeaves(System.Collections.Generic.List{Dynamo.Search.BrowserItem}@)">
            <summary>
                If this is a leaf and visible, add to items, otherwise, recurse on children
            </summary>
            <param name="items">The accumulator</param>
        </member>
        <member name="P:Dynamo.Search.BrowserItem.Name">
            <summary>
            A name (title) field for the BrowserItem
            </summary>
        </member>
        <member name="F:Dynamo.Search.BrowserItem._height">
            <summary>
            The height of the element in search
            </summary>
        </member>
        <member name="M:Dynamo.Search.BrowserItem.AddChild(Dynamo.Search.BrowserInternalElement)">
            <summary>
                Adds an element as a child of this one, while updating its parent and oldparent field
            </summary>
            <param name="elem">The element in question</param>
        </member>
        <member name="M:Dynamo.Search.BrowserItem.CollapseToLeaves">
            <summary>
            Collapse element and all its children
            </summary>
        </member>
        <member name="M:Dynamo.Search.BrowserItem.SetVisibilityToLeaves(System.Boolean)">
            <summary>
            Hide element and all its children
            </summary>
        </member>
        <member name="F:Dynamo.Search.BrowserItem._visibility">
            <summary>
            Whether the item is visible or not
            </summary>
        </member>
        <member name="F:Dynamo.Search.BrowserItem._isSelected">
            <summary>
            Whether the item is selected or not
            </summary>
        </member>
        <member name="F:Dynamo.Search.BrowserItem._isExpanded">
            <summary>
            Is the element expanded in the browser
            </summary>
        </member>
        <member name="F:Dynamo.Search.BrowserInternalElement._items">
            <summary>
                The items inside of the browser item
            </summary>
        </member>
        <member name="F:Dynamo.Search.BrowserInternalElement._name">
            <summary>
            Name property </summary>
            <value>
            The name of the node </value>
        </member>
        <member name="T:Dynamo.Search.SearchDictionary`1">
            <summary>
                A dictionary of objects for search
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchDictionary`1.SearchEntries">
            <summary>
                All the current entries in search.
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchDictionary`1.NumTags">
            <summary>
                The number of tags in the dictionary
            </summary>
        </member>
        <member name="P:Dynamo.Search.SearchDictionary`1.NumElements">
            <summary>
                The number of elements in the dictionary
            </summary>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Add(`0,System.String,System.Double)">
            <summary>
                Add a single element with a single tag
            </summary>
            <param name="value"> The object to add  </param>
            <param name="tag"> The string to identify it in search </param>
            <param name="weight"></param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Add(System.Collections.Generic.IEnumerable{`0},System.String,System.Double)">
            <summary>
                Add a list of elements with a single tag
            </summary>
            <param name="values"> List of objects to add  </param>
            <param name="tag"> The string to identify it in search </param>
            <param name="weight"></param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Add(`0,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Add a single element with a number of tags
            </summary>
            <param name="value"> The object to add  </param>
            <param name="tags"> The list of strings to identify it in search </param>
            <param name="weights">The list of corresponding weights coefficients</param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Add(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.String},System.Double)">
            <summary>
                Add a coordinated list of objects and strings.
            </summary>
            <param name="values"> The objects to add. Must have the same cardinality as the second parameter</param>
            <param name="tags"> The list of strings to identify it in search. Must have the same cardinality as the first parameter </param>
            <param name="weight"></param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Remove(`0,System.String)">
            <summary>
                Remove an element from the search
            </summary>
            <param name="value"> The object to remove </param>
            <param name="tag">The tag to remove for the given value </param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Remove(`0)">
            <summary>
                Remove an element from the search
            </summary>
            <param name="value"> The object to remove </param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
                Remove elements from search based on a predicate
            </summary>
            <param name="removeCondition"> The predicate with which to test.  True results in removal. </param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Remove(System.Func{`0,System.Boolean},System.Func{System.String,System.Boolean})">
            <summary>
                Removes elements from search, based on separate predicates for values and tags.
            </summary>
            <param name="valueCondition"></param>
            <param name="removeTagCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Remove(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Remove elements from search
            </summary>
            <param name="value"> The object to remove </param>
            <param name="tags"> The list of tags to remove. </param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.ByTag(System.String)">
            <summary>
                Get the elements with a given tag
            </summary>
            <param name="tag"> The tag to match </param>
            <returns> The elements with the given tag </returns>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Contains(`0)">
            <summary>
                Determines if this SearchDictionary contains a specific element.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.MatchWithQueryString(System.String,System.String[])">
            <summary>
            Check if key matches with query string. The query string could
            contains multiple sub query strings which are separated with 
            space character. The function returns true if the key sequentially
            matches with each sub query strings. E.g., 
            "Autodesk.Geometry.Point.ByCoordinate" matches with query string
            "geometry point by".
            </summary>
            <param name="key"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.Search(System.String,System.Int32)">
            <summary>
            Search for elements in the dictionary based on the query
            </summary>
            <param name="query"> The query </param>
            <param name="minResultsForTolerantSearch">Minimum number of results in the original search strategy to justify doing more tolerant search</param>
        </member>
        <member name="M:Dynamo.Search.SearchDictionary`1.GetTags(`0)">
            <summary>
            Get all tags for search specified element
            </summary>
            <param name="element">The element to match</param>
            <returns>All tags of the given element</returns>
        </member>
        <member name="T:Dynamo.Services.ShapewaysClient">
            <summary>
                Class provides the interaction between Dynamo client and Shapeways API
            </summary>
        </member>
        <member name="P:Dynamo.Services.ShapewaysClient.LoginUrl">
            <summary>
            LoginUrl property
            </summary>
            <value>Contains URL to Shapeways login UI</value>
        </member>
        <member name="P:Dynamo.Services.ShapewaysClient.Secret">
            <summary>
            Secret property
            </summary>
            <value>Contains oauth_secret param</value>
        </member>
        <member name="P:Dynamo.Services.ShapewaysClient.Token">
            <summary>
            Token property
            </summary>
            <value>Contains oauth_token param</value>
        </member>
        <member name="P:Dynamo.Services.ShapewaysClient.Verifier">
            <summary>
            Verifier property
            </summary>
            <value>Contains oauth_verifier param</value>
        </member>
        <member name="M:Dynamo.Services.ShapewaysClient.RequestToken">
            <summary>
            Get Oauth request token to authorized with Shapeways service
            </summary>
        </member>
        <member name="M:Dynamo.Services.ShapewaysClient.UploadModel(System.String,System.String)">
            <summary>
            Upload an STL model to Shapeways service using obtained credantials
            </summary>
            <param name="rawData">Raw STL geometry data</param>
            <param name="filename">Gives a name to your uploaded file</param>
        </member>
        <member name="T:Dynamo.Services.StabilityTracking">
            <summary>
            Stability state tracking utils library
            The primary use is for reporting MTBF to instrumentation
            </summary>
        </member>
        <member name="M:Dynamo.Services.StabilityTracking.NotifyCrash">
            <summary>
            Notify the stability tracker that a crash has occured
            </summary>
        </member>
        <member name="P:Dynamo.Services.StabilityUtils.IsLastShutdownClean">
            <summary>
            To check whether the last shutdown is clean(no crash)
            </summary>
        </member>
        <member name="T:Dynamo.Services.StabilityCookie">
            <summary>
            The stability cookie class groups together the usage around the registry key that is written
            to record whether the last shutdown was performed cleanly or not.
            
            If the Write
            </summary>
        </member>
        <member name="M:Dynamo.Services.StabilityCookie.WriteCleanShutdown">
            <summary>
            Record that the shutdown was clean
            </summary>
        </member>
        <member name="M:Dynamo.Services.StabilityCookie.WriteCrashingShutdown">
            <summary>
            Record that the shutdown was as a result of a crash
            </summary>
        </member>
        <member name="M:Dynamo.Services.StabilityCookie.WriteUptimeBeat(System.TimeSpan)">
            <summary>
            Record that the system has been up for the the length of the time in the timespan
            </summary>
            <param name="timespan"></param>
        </member>
        <member name="M:Dynamo.Services.StabilityCookie.Startup">
            <summary>
            Start up and report the status of the last shutdown
            </summary>
        </member>
        <member name="M:Dynamo.Services.StabilityCookie.IsLastShutdownClean">
            <summary>
            To check whether the last shutdown is clean(no crash)
            </summary>
        </member>
        <member name="T:Dynamo.Services.Heartbeat">
            <summary>
            Class to automatically report various metrics of the application usage
            </summary>
        </member>
        <member name="M:Dynamo.Services.Heartbeat.PackFrequencyDict(System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Turn a frequency dictionary into a string that can be sent
            </summary>
            <param name="frequencies"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Services.InstrumentationLogger">
            <summary>
            Interception class to handle whether logging is called or not
            </summary>
        </member>
        <member name="T:Dynamo.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Dynamo.Library.TypedParameter">
            <summary>
                A tuple of parameter and its type.
            </summary>
        </member>
        <member name="P:Dynamo.Migration.Migration.Version">
            <summary>
            A version after which this migration will be applied.
            </summary>
        </member>
        <member name="P:Dynamo.Migration.Migration.Upgrade">
            <summary>
            The action to perform during the upgrade.
            </summary>
        </member>
        <member name="M:Dynamo.Migration.Migration.#ctor(System.Version,System.Action)">
            <summary>
            A migration which can be applied to a workspace to upgrade the workspace to the current version.
            </summary>
            <param name="v">A version number specified as x.x.x.x after which a workspace will be upgraded</param>
            <param name="upgrade">The action to perform during the upgrade.</param>
        </member>
        <member name="T:Dynamo.Migration.MigrationManager.Decision">
            <summary>
            Enumerator to determine if migration should proceed or abort. This 
            enumerator is to be used with MigrationManager.ShouldMigrateFile().
            </summary>
        </member>
        <member name="F:Dynamo.Migration.MigrationManager.Decision.Abort">
            <summary>
            The migration should not proceed and the file open operation 
            should be aborted. This can be used to indicate that a version 
            of file that is no longer supported and no migration path is 
            provided.
            </summary>
        </member>
        <member name="F:Dynamo.Migration.MigrationManager.Decision.Migrate">
            <summary>
            File migration should proceed to migrate the older file version 
            to a newer one.
            </summary>
        </member>
        <member name="F:Dynamo.Migration.MigrationManager.Decision.Retain">
            <summary>
            The file version is up-to-date and the file can be used as-is 
            without migration.
            </summary>
        </member>
        <member name="P:Dynamo.Migration.MigrationManager.MigrationTargets">
            <summary>
            A collection of types which contain migration methods.
            </summary>
        </member>
        <member name="T:Dynamo.Migration.MigrationManager.FutureFileCallback">
            <summary>
                Functions that can be used as a callback in the event a file from a later version of Dynamo
                is attempting to be loaded.
            </summary>
            <param name="fileName"></param>
            <param name="fileVersion"></param>
            <param name="currentVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Dynamo.Migration.MigrationManager.ObsoleteFileCallback">
            <summary>
                Functions that can be used as a callback in the event an obsolete file is attempted to be loaded.
            </summary>
            <param name="fileName"></param>
            <param name="fileVersion"></param>
            <param name="currentVersion"></param>
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.#ctor(Dynamo.Migration.MigrationManager.FutureFileCallback,Dynamo.Migration.MigrationManager.ObsoleteFileCallback)">
            <summary>
            The private constructor.
            </summary>
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.AddMigrationType(Dynamo.Models.TypeLoadData)">
            <summary>
                Adds a new type containing Migration methods into this manager.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.ProcessWorkspace(Dynamo.Models.WorkspaceInfo,System.Xml.XmlDocument,System.Boolean,Dynamo.Models.NodeFactory)">
            <summary>
                Attempts to migrate a workspace to the current version of Dynamo.
            </summary>
            <param name="workspaceInfo"></param>
            <param name="xmlDoc"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.ProcessWorkspaceMigrations(System.Version,System.Xml.XmlDocument,System.Version)">
            <summary>
            Runs all migration methods found on the listed migration target types.
            </summary>
            <param name="currentVersion"></param>
            <param name="xmlDoc"></param>
            <param name="workspaceVersion"></param>
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.BackupOriginalFile(System.String,System.String@)">
            <summary>
            Call this method to backup the DYN file specified by originalPath. The 
            new file will be backed up to a location where Dynamo has write access to.
            </summary>
            <param name="originalPath">Path of the original DYN file to be backed up.</param>
            <param name="backupPath">Path of the backed up file. This value will be a valid 
            file path only if this method returns true.</param>
            <returns>Returns true if the backup was successful, or false otherwise.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.GetUniqueFileName(System.String,System.String)">
            <summary>
            Call this method to get the unique backup file name within the given folder.
            </summary>
            <param name="folder">The folder where file search should happen.</param>
            <param name="fileNameWithExtension">The name of the original file which is 
            to be backed-up. This argument should have an extension, although it is not 
            mandatory.</param>
            <returns>Returns the full path to a unique file name for the backup file.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.GetBackupFolder(System.String,System.Boolean)">
            <summary>
            Call this method with a root directory path information, and then 
            a backup sub-directory will be created below it (if one does not 
            already exist).
            </summary>
            <param name="baseFolder">This is a directory inside which a new 
            backup sub-directory will be created. If this paramter does not 
            represent a valid directory name, an exception will be thrown.
            </param>
            <param name="create">Set this parameter to false if the creation of 
            the backup sub-directory is not desired. Typically this means the
            method is called from within a test case and it is only interested 
            in getting the resulting path back without actually creating a new 
            backup sub-directory.</param>
            <returns>Returns full path to the backup folder created.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.GetUniqueIndex(System.String[])">
            <summary>
            Call this method to determine the next available backup file name from the 
            given set of file names.
            </summary>
            <param name="fileNames">An array of file names, each in the form of 
            'FileName.NNN.backup'.</param>
            <returns>Returns the next available index to use as backup file name</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.ExtractFileIndex(System.String)">
            <summary>
            Call this method to extract the index of a backup file.
            </summary>
            <param name="fileName">The file name of a backup file. This parameter 
            must be in the form of 'FileName.NNN.backup', where 'NNN' is an 
            integer value. The file name must also have a '*.backup' extension.
            </param>
            <returns>Returns the integer equivalent of the backup file index 
            'NNN' if the call is successful.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.VersionFromString(System.String)">
            <summary>
            Remove revision number from 'fileVersion' (so we get '0.6.3.0' 
            instead of '0.6.3.20048'). This way all migration methods with 
            'NodeMigration.from' attribute value '0.6.3.xyz' can be used to 
            migrate nodes in workspace version '0.6.3.ijk' (i.e. the revision 
            number does not have to be exact match for a migration method to 
            work).
            </summary>
            <param name="version">The version string to convert into Version 
            object. Valid examples include "0.6.3.0" and "0.6.3.20048".</param>
            <returns>Returns the Version object representation of 'version' 
            argument, except without the 'revision number'.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.VersionFromWorkspace(Dynamo.Models.WorkspaceModel)">
            <summary>
            Call this method to obtain the version of current WorkspaceModel.
            Note that the revision number is dropped as both "0.7.0.1234" 
            should be treated as the same version as "0.7.0.5678", and no file 
            migration should take place.
            </summary>
            <param name="workspace">The WorkspaceModel to get the Version from.
            </param>
            <returns>Returns the Version object representing the workspace 
            version with the revision set to 0.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.ShouldMigrateFile(System.Version,System.Version,System.Boolean)">
            <summary>
            Call this method to determine if migration should take place 
            for the input DYN/DYF file based on the given version numbers.
            </summary>
            <param name="fileVersion">The version of input file.</param>
            <param name="currVersion">The version of Dynamo software.</param>
            <param name="isTestMode"></param>
            <returns>Returns the decision if the migration should take place or 
            not. See "Decision" enumeration for details of each field.</returns>
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.CreateFunctionNode(System.Xml.XmlDocument,System.Xml.XmlElement,System.Int32,System.String,System.String,System.String)">
            <summary>
            Call this method to create an empty DSFunction node that contains 
            basic function node information.
            </summary>
            <param name="document">The XmlDocument to create the node in.</param>
            <param name="assembly">Name of the assembly that implements this 
            function.</param>
            <param name="nickname">The nickname to display on the node.</param>
            <param name="signature">The signature of the function.</param>
            <returns>Returns the XmlElement that represents a DSFunction node 
            with its basic function information with default attributes.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.CreateFunctionNodeFrom(System.Xml.XmlElement,System.String[])">
            <summary>
            Call this method to create a XmlElement with a set of attributes 
            carried over from the source XmlElement. The new XmlElement will 
            have a name of "Dynamo.Nodes.DSFunction".
            </summary>
            <param name="srcElement">The source XmlElement object.</param>
            <param name="attribNames">The list of attribute names whose values 
            are to be carried over to the resulting XmlElement. This list is 
            mandatory and it cannot be empty. If a specified attribute cannot 
            be found in srcElement, an empty attribute with the same name will 
            be created in the resulting XmlElement.</param>
            <returns>Returns the resulting XmlElement with specified attributes
            duplicated from srcElement. The resulting XmlElement will also have
            a mandatory "type" attribute with value "Dynamo.Nodes.DSFunction".
            </returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.CreateCustomNodeFrom(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Create a custom node as a replacement for an existing node.
            </summary>
            <param name="document"></param>
            <param name="srcElement"></param>
            <param name="id">The custom node id.</param>
            <param name="name">The custom node name.</param>
            <param name="description">The custom node's description.</param>
            <param name="inputs">A list of input names.</param>
            <param name="outputs">A list of output names.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.CreateFunctionNodeFrom(System.Xml.XmlElement)">
            <summary>
            Call this method to create a duplicated XmlElement with 
            all the attributes found from the source XmlElement.
            </summary>
            <param name="srcElement">The source XmlElement to duplicate.</param>
            <returns>Returns the duplicated XmlElement with all attributes 
            found in the source XmlElement. The resulting XmlElement will also 
            have a mandatory "type" attribute with value "Dynamo.Nodes.DSFunction".
            </returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.CreateCodeBlockNodeFrom(System.Xml.XmlElement)">
            <summary>
            Call this method to create an empty Code Block node, with all 
            attributes carried over from an existing src XmlElement.
            </summary>
            <param name="srcElement">The source element from which the Code 
            Block node XmlElement is constructed. All attributes of the source 
            XmlElement will be copied over, and Code Block node specific 
            attributes will be added.</param>
            <returns>Returns an XmlElement that represents the resulting Code
            Block node.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.CloneAndChangeName(System.Xml.XmlElement,System.String,System.String,System.Boolean)">
            <summary>
            Call this method to create a clone of the original XmlElement and 
            change its type at one go. This method preserves all the attributes 
            while updating only the type name.
            </summary>
            <param name="element">The XmlElement to be cloned and the type name 
            updated.</param>
            <param name="type">The fully qualified name of the new type.</param>
            <param name="nickname">The new nickname, by which this node is known.</param>
            <param name="cloneInnerXml">Parameter indicating whether the inner xml of the original node should be cloned.</param>
            <returns>Returns the cloned and updated XmlElement.</returns>
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.CreateDummyNode(System.Xml.XmlElement,System.Int32,System.Int32)">
            <summary>
            Call this method to create a dummy node, should a node failed to be 
            migrated. This results in a dummy node with a description of what the 
            original node type was, and also retain the number of input and output
            ports.
            </summary>
            <param name="element">XmlElement representing the original node which
            has failed migration.</param>
            <param name="inportCount">The number of input ports required on the 
            new dummy node. This number must be a positive number greater or 
            equal to zero.</param>
            <param name="outportCount">The number of output ports required on the 
            new dummy node. This number must be a positive number greater or 
            equal to zero.</param>
            <returns>Returns a new XmlElement representing the dummy node.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.MigrationManager.CreateMissingNode(System.Xml.XmlElement,System.Int32,System.Int32)">
            <summary>
            Call this method to create a dummy node, should a node failed to be 
            migrated. This results in a dummy node with a description of what the 
            original node type was, and also retain the number of input and output
            ports.
            </summary>
            <param name="element">XmlElement representing the original node which
            has failed migration.</param>
            <param name="inportCount">The number of input ports required on the 
            new dummy node. This number must be a positive number greater or 
            equal to zero.</param>
            <param name="outportCount">The number of output ports required on the 
            new dummy node. This number must be a positive number greater or 
            equal to zero.</param>
            <returns>Returns a new XmlElement representing the dummy node.</returns>
            
        </member>
        <member name="T:Dynamo.Migration.PortId">
            <summary>
            This structure uniquely identifies a given port in the graph.
            </summary>
        </member>
        <member name="T:Dynamo.Migration.NodeMigrationData">
            <summary>
            This class contains the resulting nodes as a result of node migration.
            Note that this class may contain other information (e.g. connectors) in
            the future in the event a migration process results in other elements.
            </summary>
            
        </member>
        <member name="M:Dynamo.Migration.NodeMigrationData.FindConnector(Dynamo.Migration.PortId,Dynamo.Migration.PortId)">
            <summary>
            Call this method to find the connector in the associate 
            XmlDocument, given its start and end port information.
            </summary>
            <param name="startPort">The identity of the start port.</param>
            <param name="endPort">The identity of the end port.</param>
            <returns>Returns the notmatching connector if one is found, or null 
            otherwise.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.NodeMigrationData.FindFirstConnector(Dynamo.Migration.PortId)">
            <summary>
            Call this method to retrieve the first connector given a port. This
            method is a near equivalent of FindConnectors, but only return the 
            first connector found. This way the caller codes can be simplified 
            in a way that it does not have the validate the returned list for 
            item count before accessing its element.
            </summary>
            <param name="portId">The identity of the port for which the first 
            connector is to be retrieved.</param>
            <returns>Returns the first connector found to connect to the given 
            port, or null otherwise.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.NodeMigrationData.FindConnectors(Dynamo.Migration.PortId)">
            <summary>
            Given a port, get all connectors that connect to it.
            </summary>
            <param name="portId">The identity of the port for which connectors 
            are to be retrieved.</param>
            <returns>Returns the list of connectors connecting to the given 
            port, or null if no connection is found connecting to it.</returns>
            
        </member>
        <member name="M:Dynamo.Migration.NodeMigrationData.ReconnectToPort(System.Xml.XmlElement,Dynamo.Migration.PortId)">
            <summary>
            Reconnect a given connector to another port identified by "port".
            </summary>
            <param name="connector">The connector to update. Note that this 
            parameter can be null, in which case there won't be any movement 
            performed. This simplifies the caller so that it does not have to 
            do a null-check before every call to this method (connectors may 
            not present).</param>
            <param name="port">The new port to connect to.</param>
            
        </member>
        <member name="T:Dynamo.Migration.NodeMigrationAttribute">
            <summary>
            Marks methods on a NodeModel to be used for version migration.
            </summary>
        </member>
        <member name="P:Dynamo.Migration.NodeMigrationAttribute.From">
            <summary>
            Latest Version this migration applies to.
            </summary>
        </member>
        <member name="P:Dynamo.Migration.NodeMigrationAttribute.To">
            <summary>
            Version this migrates to.
            </summary>
        </member>
        <member name="T:Dynamo.Migration.MigrationReport">
            <summary>
            Class responsible for creation of an XML in following format that records 
            node mapping information - which old node has been converted to which to new node(s) 
            <MigrationReport>
                <NodeMappings>
                    <Node OldName="OldNodeName1">
                      <MigratedNode>NewNodeName1</MigratedNode>
                      <MigratedNode>NewNodeName2</MigratedNode>
                    </Node>        
                    <Node OldName="OldNodeName2">
                        ...
                    </Node>
                    ...
                </NodeMappings>
            </MigrationReport>
            </summary>
        </member>
        <member name="T:Dynamo.CustomNodeDefinition">
            <summary>
                Compiler definition of a Custom Node.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.IsProxy">
            <summary>
                Is this CustomNodeDefinition properly loaded?
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.FunctionName">
            <summary>
                Function name.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.FunctionId">
            <summary>
                Function unique ID.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.DisplayParameters">
            <summary>
                User-friendly parameters
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.Parameters">
            <summary>
                Function parameters.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.ReturnKeys">
            <summary>
                If the function returns a dictionary, this specifies all keys in
                that dictionary.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.FunctionBody">
            <summary>
                NodeModels making up the body of the custom node.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.OutputNodes">
            <summary>
                Identifiers associated with the outputs of the custom node.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.DisplayName">
            <summary>
                User friendly name on UI.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.ReturnType">
            <summary>
                Return type.
            </summary>
        </member>
        <member name="P:Dynamo.CustomNodeDefinition.MangledName">
            <summary>
            Name to create custom node
            </summary>
        </member>
        <member name="T:Dynamo.CustomNodeInfo">
            <summary>
                Basic information about a custom node.
            </summary>
        </member>
        <member name="T:Dynamo.PreferenceSettings">
            <summary>
            PreferenceSettings is a class for GUI to persist certain settings.
            Upon running of the GUI, those settings that are persistent will be loaded
            from a XML file from DYNAMO_SETTINGS_FILE.
            When GUI is closed, the settings into the XML file.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.LibraryWidth">
            <summary>
            The width of the library pane.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.ConsoleHeight">
            <summary>
            The height of the console display.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.ShowConnector">
            <summary>
            Should connectors be visible?
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.ConnectorType">
            <summary>
            The types of connector: Bezier or Polyline.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.IsBackgroundPreviewActive">
            <summary>
            Should the background 3D preview be shown?
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.NumberFormat">
            <summary>
            The decimal precision used to display numbers.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.MaxNumRecentFiles">
            <summary>
            The maximum number of recent file paths to be saved.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.RecentFiles">
            <summary>
            A list of recently opened file paths.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.BackupFiles">
            <summary>
            A list of backup file paths.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.CustomPackageFolders">
            <summary>
            A list of folders containing zero-touch nodes and custom nodes.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.PackageDirectoriesToUninstall">
            <summary>
            A list of packages used by the Package Manager to determine
            which packages are marked for deletion.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.WindowX">
            <summary>
            The last X coordinate of the Dynamo window.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.WindowY">
            <summary>
            The last Y coordinate of the Dynamo window.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.WindowW">
            <summary>
            The last width of the Dynamo window.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.WindowH">
            <summary>
            The last height of the Dynamo window.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.UseHardwareAcceleration">
            <summary>
            Should Dynamo use hardware acceleration if it is supported?
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.BackupInterval">
            <summary>
            This defines how long (in milliseconds) will the graph be automatically saved.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.BackupFilesCount">
            <summary>
            This defines how many files will be backed up.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.PackageDownloadTouAccepted">
            <summary>
            Indicates if the user has accepted the terms of 
            use for downloading packages from package manager.
            </summary>
        </member>
        <member name="P:Dynamo.PreferenceSettings.ShowEdges">
            <summary>
            Indicates whether surface and solid edges will 
            be rendered.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Dynamo.PreferenceSettings.OpenFileInManualExecutionMode" -->
        <member name="M:Dynamo.PreferenceSettings.Save(System.String)">
            <summary>
            Save PreferenceSettings in XML File Path if possible,
            else return false
            </summary>
            <param name="filePath">Path of the XML File</param>
            <returns>Whether file is saved or error occurred.</returns>
        </member>
        <member name="M:Dynamo.PreferenceSettings.SaveInternal(System.String)">
            <summary>
            Save PreferenceSettings in a default directory when no path is 
            specified.
            </summary>
            <param name="preferenceFilePath">The file path to save preference
            settings to. If this parameter is null or empty string, preference 
            settings will be saved to the default path.</param>
            <returns>Whether file is saved or error occurred.</returns>
        </member>
        <member name="M:Dynamo.PreferenceSettings.Load(System.String)">
            <summary>
            Return PreferenceSettings from XML path if possible,
            else return PreferenceSettings with default values
            </summary>
            <param name="filePath">Path of the XML File</param>
            <returns>
            Stored PreferenceSettings from xml file or
            Default PreferenceSettings if xml file is not found.
            </returns>
        </member>
        <member name="P:Dynamo.LogEventArgs.Message">
            <summary>
            The message to be logged.
            </summary>
        </member>
        <member name="P:Dynamo.LogEventArgs.Level">
            <summary>
            The log level at which to log the message.
            </summary>
        </member>
        <member name="M:Dynamo.DynamoLogger.#ctor(Dynamo.Core.DebugSettings,System.String)">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Dynamo.DynamoLogger.Log(System.String,Dynamo.LogLevel,System.Boolean)">
            <summary>
            Log the message to the the correct path
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Dynamo.DynamoLogger.Log(System.String)">
            <summary>
            Log a message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Dynamo.DynamoLogger.Log(System.Exception)">
            <summary>
            Log an exception
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Dynamo.DynamoLogger.Log(System.String,System.String)">
            <summary>
            Log some data with an associated tag
            </summary>
            <param name="tag"></param>
            <param name="data"></param>
        </member>
        <member name="M:Dynamo.DynamoLogger.StartLogging(System.String)">
            <summary>
            Begin logging.
            </summary>
        </member>
        <member name="M:Dynamo.DynamoLogger.Dispose(System.Boolean)">
            <summary>
            Dispose of the logger and finish logging.
            </summary>
        </member>
        <member name="P:Dynamo.Selection.DynamoSelection.Selection">
            <summary>
            Returns a collection of ISelectable elements.
            </summary>
        </member>
        <member name="M:Dynamo.Selection.DynamoSelection.selection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            A callback for automatically selecting and deselecting elements 
            when they are added to the Selection collection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Dynamo.Selection.DynamoSelection.ClearSelection">
            <summary>
            Clears the selection, deslecting everything that is selected
            </summary>
        </member>
        <member name="T:Dynamo.Selection.SmartCollection`1">
            <summary>
            A resetable observable collection
            See: http://stackoverflow.com/questions/13302933/how-to-avoid-firing-observablecollection-collectionchanged-multiple-times-when-r
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dynamo.Selection.SmartCollection`1.AddUnique(`0)">
            <summary>
            Adds an item only if the sequence does not have it yet
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="T:Dynamo.UpdateManager.IUpdateManager">
            <summary>
            An interface which describes properties and methods for
            updating the application.
            </summary>
        </member>
        <member name="M:Dynamo.UpdateManager.IDynamoLookUp.GetDynamoInstallLocations">
            <summary>
            Gets installation path for all version of this Dynamo Product
            installed on this system.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.IDynamoLookUp.LatestProduct">
            <summary>
            Gets the version of latest installed product
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.IUpdateManagerConfiguration.DownloadSourcePath">
            <summary>
            Defines download location for new installer
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.IUpdateManagerConfiguration.SignatureSourcePath">
            <summary>
            Defines location for signature file to validate the new installer.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.IUpdateManagerConfiguration.CheckNewerDailyBuild">
            <summary>
            Defines whether to consider daily builds for update, default is false.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.IUpdateManagerConfiguration.ForceUpdate">
            <summary>
            Defines whether to force update, default vlaue is false.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.IUpdateManagerConfiguration.InstallerNameBase">
            <summary>
            Gets the base name of the installer to be used for upgrade.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.IUpdateManagerConfiguration.DynamoLookUp">
            <summary>
            Gets IDynamoLookUp interface to search Dynamo installations on the system.
            </summary>
        </member>
        <member name="T:Dynamo.UpdateManager.IAppVersionInfo">
            <summary>
            An interface to describe available
            application update info.
            </summary>
        </member>
        <member name="T:Dynamo.UpdateManager.IAsynchronousRequest">
            <summary>
            An interface to describe an asynchronous web
            request for update data.
            </summary>
        </member>
        <member name="T:Dynamo.UpdateManager.UpdateRequest">
            <summary>
            The UpdateRequest class encapsulates a request for 
            getting update information from the web.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateRequest.OnRequestCompleted">
            <summary>
            An action to be invoked upon completion of the request.
            This action is invoked regardless of the success of the request.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateRequest.Data">
            <summary>
            The data returned from the request.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateRequest.Error">
            <summary>
            Any error information returned from the request.
            </summary>
        </member>
        <member name="F:Dynamo.UpdateManager.UpdateRequest.manager">
            <summary>
            UpdateManager instance that created this request.
            </summary>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateRequest.#ctor(System.Uri,Dynamo.UpdateManager.IUpdateManager)">
            <summary>
            The constructor.
            </summary>
            <param name="path">Uri that needs to be read to get the update information.</param>
            <param name="manager">The update manager which is making this request.</param>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateRequest.ReadResult(System.Object,System.Net.OpenReadCompletedEventArgs)">
            <summary>
            Event handler for the web client's requestion completed event. Reads
            the request's result information and subsequently triggers
            the UpdateDataAvailable event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Dynamo.UpdateManager.UpdateManagerConfiguration">
            <summary>
            Defines Update Manager Configuration settings.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManagerConfiguration.DownloadSourcePath">
            <summary>
            Defines download location for new installer
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManagerConfiguration.SignatureSourcePath">
            <summary>
            Defines location for signature file to validate the new installer.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManagerConfiguration.CheckNewerDailyBuild">
            <summary>
            Defines whether to consider daily builds for update, default is false.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManagerConfiguration.ForceUpdate">
            <summary>
            Defines whether to force update, default vlaue is false.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManagerConfiguration.InstallerNameBase">
            <summary>
            Gets the base name of the installer to be used for upgrade.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManagerConfiguration.ConfigFilePath">
            <summary>
            Return file path for the overriding config file.
            </summary>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManagerConfiguration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManagerConfiguration.Load(System.String,Dynamo.UpdateManager.IUpdateManager)">
            <summary>
            Loads the configurations from given xml file.
            </summary>
            <param name="filePath">Xml file path that contains configuration details.</param>
            <param name="updateManager"></param>
            <returns>UpdateManagerConfiguration</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManagerConfiguration.Save(System.String,Dynamo.UpdateManager.IUpdateManager)">
            <summary>
            Saves this configuration to a given file in xml format.
            </summary>
            <param name="filePath">File path to save this configuration.</param>
            <param name="updateManager"></param>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManagerConfiguration.GetSettings(Dynamo.UpdateManager.IDynamoLookUp,Dynamo.UpdateManager.IUpdateManager)">
            <summary>
            Utility method to get the settings
            </summary>
            <param name="lookUp">IDynamoLookUp instance</param>
            <param name="updateManager"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManagerConfiguration.TryGetConfigFilePath(System.String@)">
            <summary>
            Gets the update manager config file path.
            </summary>
            <param name="filePath">Full path for the config file</param>
            <returns>True if file exists.</returns>
        </member>
        <member name="T:Dynamo.UpdateManager.UpdateManager">
            <summary>
            This class provides services for product update management.
            </summary>
        </member>
        <member name="E:Dynamo.UpdateManager.UpdateManager.UpdateDownloaded">
            <summary>
            Occurs when RequestUpdateDownload operation completes.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManager.ProductVersion">
            <summary>
            Obtains product version string
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManager.AvailableVersion">
            <summary>
                Obtains available update version string 
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManager.UpdateFileLocation">
            <summary>
            Obtains downloaded update file location.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManager.DownloadedUpdateInfo">
            <summary>
                Dirty patch: Set to the value of UpdateInfo once the new update installer has been
                downloaded.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManager.CheckNewerDailyBuilds">
            <summary>
            This flag is available via the debug menu to
            allow the update manager to check for newer daily 
            builds as well.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManager.ForceUpdate">
            <summary>
            Apply the most recent update, regardless
            of whether it is newer than the current version.
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.UpdateManager.Configuration">
            <summary>
            Returns the configuration settings.
            </summary>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.CheckForProductUpdate(Dynamo.UpdateManager.IAsynchronousRequest)">
            <summary>
            Async call to request the update version info from the web. 
            This call raises UpdateFound event notification, if an update is
            found.
            </summary>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.UpdateDataAvailable(Dynamo.UpdateManager.IAsynchronousRequest)">
            <summary>
            Callback for the UpdateRequest's UpdateDataAvailable event.
            Reads the request's data, and parses for available versions. 
            If a more recent version is available, the UpdateInfo object 
            will be set. 
            </summary>
            <param name="request">An instance of an update request.</param>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.GetLatestBuildFromS3(Dynamo.UpdateManager.IAsynchronousRequest,System.Boolean)">
            <summary>
            Get the file name of the latest build on S3
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.GetBuildTimeFromFilePath(System.String,System.String)">
            <summary>
            Get a build time from a file path.
            </summary>
            <param name="filePath"></param>
            <returns>A DateTime or the DateTime MinValue.</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.GetVersionString(System.String,System.String)">
            <summary>
            Find the version string within a file name 
            by removing the base install name.
            </summary>
            <param name="installNameBase"></param>
            <param name="filePath"></param>
            <returns>A version string like "x.x.x.x" or null if one cannot be found.</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.GetCurrentBinaryVersion">
            <summary>
            Get a binary version for the executing assembly
            </summary>
            <returns>A BinaryVersion</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.GetBinaryVersionFromFilePath(System.String,System.String)">
            <summary>
            Get a BinaryVersion from a file path.
            </summary>
            <param name="installNameBase">The base install name.</param>
            <param name="filePath">The path name of the file.</param>
            <returns>A BinaryVersion or null if one can not be parse from the file path.</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.IsDailyBuild(System.String,System.String)">
            <summary>
            Check if a file name is a daily build.
            </summary>
            <param name="installNameBase"></param>
            <param name="fileName"></param>
            <returns>True if this is a daily build, otherwise false.</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.IsStableBuild(System.String,System.String)">
            <summary>
            Check if a file name is a stable build.
            </summary>
            <param name="installNameBase"></param>
            <param name="fileName"></param>
            <returns>True if this is a stable build, otherwise false.</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.DownloadUpdatePackageAsynchronously(System.String,Dynamo.UpdateManager.BinaryVersion,System.String)">
            <summary>
            Async call to request downloading a file from web.
            This call raises UpdateDownloaded event notification.
            </summary>
            <param name="url">Web URL for file to download.</param>
            <param name="version">The version of package that is to be downloaded.</param>
            <param name="tempPath">Temp folder path where the update package
            to be downloaded.</param>
            <returns>Request status, it may return false if invalid URL was passed.</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.DownloadSignatureFileAsynchronously(System.String,System.String)">
            <summary>
            Async call to download the signature file.
            </summary>
            <param name="url">Signature file url for download.</param>
            <param name="tempPath">Temp folder path where the signature file 
            to be downloaded.</param>
            <returns></returns>
        </member>
        <member name="M:Dynamo.UpdateManager.UpdateManager.CheckForProductUpdate(Dynamo.UpdateManager.IUpdateManager)">
            <summary>
            Checks for the product update by requesting for update version info 
            from configured download source path. This method will skip the 
            update check if a newer version of the product is already installed.
            </summary>
            <param name="manager">Update manager instance using which product
            update check nees to be done.</param>
        </member>
        <member name="T:Dynamo.UpdateManager.DynamoLookUp">
            <summary>
            Lookup for installed products
            </summary>
        </member>
        <member name="P:Dynamo.UpdateManager.DynamoLookUp.LatestProduct">
            <summary>
            Gets the version of latest product
            </summary>
        </member>
        <member name="M:Dynamo.UpdateManager.DynamoLookUp.GetDynamoVersion(System.String)">
            <summary>
            Locates DynamoCore.dll at given install path and gets file version
            </summary>
            <param name="installPath">Dynamo install path</param>
            <returns>Dynamo version if valid Dynamo exists else null</returns>
        </member>
        <member name="M:Dynamo.UpdateManager.DynamoLookUp.GetDynamoInstallLocations">
            <summary>
            Gets all dynamo install path on the system by looking into the Windows registry. 
            </summary>
            <returns>List of Dynamo install path</returns>
        </member>
        <member name="T:Dynamo.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ArggOKButton">
            <summary>
              Looks up a localized string similar to Arrrrg, ok.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.BackUpOriginalFileMessage">
            <summary>
              Looks up a localized string similar to Original file &apos;{0}&apos; gets backed up at &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.BadIdentifierSyntax">
            <summary>
              Looks up a localized string similar to Bad identifier syntax: &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.BadRangeSyntax">
            <summary>
              Looks up a localized string similar to Bad range syntax: not of format \&quot;start..end[..(increment|#count)]\&quot;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.BuildSublistsDescription">
            <summary>
              Looks up a localized string similar to Build sublists from a list using DesignScript range syntax..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ButtonDownloadLastest">
            <summary>
              Looks up a localized string similar to Download latest version.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ButtonProcess">
            <summary>
              Looks up a localized string similar to Proceed anyway.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CancelButton">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CannotHave0Step">
            <summary>
              Looks up a localized string similar to Can&apos;t have 0 step..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CannotOpenFile">
            <summary>
              Looks up a localized string similar to Your file cannot be opened.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ClearingWorkflow">
            <summary>
              Looks up a localized string similar to Clearing workflow....
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ClearingWorkSpace">
            <summary>
              Looks up a localized string similar to Clearing workspace....
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CodeBlockDescription">
            <summary>
              Looks up a localized string similar to Allows for DesignScript code to be authored directly.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CodeBlockNodeDescription">
            <summary>
              Looks up a localized string similar to Allows for DesignScript code to be authored directly.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CodeBlockSearchTags">
            <summary>
              Looks up a localized string similar to codeblock;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ComposeFunctionNodeDescription">
            <summary>
              Looks up a localized string similar to Composes two single parameter functions into one function..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ComposeFunctionPortDataFunctionToolTip">
            <summary>
              Looks up a localized string similar to A Function.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ComposeFunctionPortDataResultToolTip">
            <summary>
              Looks up a localized string similar to Composed function: g(f(x)).
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CouldNotCompressFile">
            <summary>
              Looks up a localized string similar to Could not compress file.  Is the file in use?.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CouldNotGetLatestBuild">
            <summary>
              Looks up a localized string similar to Couldn&apos;t get the latest build from S3.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CouldNotGetUpdateData">
            <summary>
              Looks up a localized string similar to Couldn&apos;t get update data from {0}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CouldNotLoadTypes">
            <summary>
              Looks up a localized string similar to Could not load types..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CouldNotRepairOneNodeHoles">
            <summary>
              Looks up a localized string similar to Could not repair 1-node holes.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CreatingConnectorError">
            <summary>
              Looks up a localized string similar to ERROR : Could not create connector between {0} and {1}..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CustomNodeCouldNotBeInitialized">
            <summary>
              Looks up a localized string similar to Custom node \&quot;{0}\&quot; could not be initialized..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CustomNodeDesciption">
            <summary>
              Looks up a localized string similar to Instance of a Custom Node.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CustomNodeFolderLoadFailure">
            <summary>
              Looks up a localized string similar to Failed to load custom node directory. Do you have permission to access {0}?.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.CustomNodeNotLoaded">
            <summary>
              Looks up a localized string similar to Custom node definition is not loaded!.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DefaultCustomNodeCategory">
            <summary>
              Looks up a localized string similar to Custom nodes.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DefaultValue">
            <summary>
              Looks up a localized string similar to Default value.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DefaultValueDisabled">
            <summary>
              Looks up a localized string similar to (disabled).
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DisplayEngineFailureMessageDescription">
             <summary>
               Looks up a localized string similar to The virtual machine that powers Dynamo is experiencing some unexpected errors internally and is likely &quot;having great difficulties pulling itself together. It is &quot;recommended that you save your work now and reload the file. Giving the Dynamo VM a new lease of life can potentially make it feel happier and behave better. 
            
            If you don&apos;t mind, it would be helpful for you to send us your file. That will make it quicker for us to get these issues fixed..
             </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DllLoadException">
            <summary>
              Looks up a localized string similar to Dll Load Exception:.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DownloadLatestButton">
            <summary>
              Looks up a localized string similar to Download latest version.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DSFunctionNodeDescription">
            <summary>
              Looks up a localized string similar to DesignScript Builtin Functions.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DulicatedPackage">
            <summary>
              Looks up a localized string similar to A duplicate of the package called {0} was found at {1}.  Ignoring it..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DummyNodeDescription">
            <summary>
              Looks up a localized string similar to This is an obsolete node.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DuplicateMigrationTypeRegistered">
            <summary>
              Looks up a localized string similar to Duplicate migration type registered for {0}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.DynamoUpToDate">
            <summary>
              Looks up a localized string similar to Dynamo is up to date..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ElapsedWhenLoadingXml">
            <summary>
              Looks up a localized string similar to {0} elapsed for loading xml..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.EvaluationCompleted">
            <summary>
              Looks up a localized string similar to Evaluation completed in {0}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ExceptionEncountered">
            <summary>
              Looks up a localized string similar to Exception encountered scanning the package directory at {0}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FailedToGetMirrorVariable">
            <summary>
              Looks up a localized string similar to Failed to get mirror for variable:  {0}; reason: {1}..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FailedToLoad">
            <summary>
              Looks up a localized string similar to Failed to load {0}\n, Exception: {1}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FailedToLoadCustomNode">
            <summary>
              Looks up a localized string similar to Failed to load custom node: {0}.  Replacing with proxy custom node..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FailedToLoadHeader">
            <summary>
              Looks up a localized string similar to ERROR: The header for the custom node at {0} failed to load.  It will be left out of search..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FailedToLoadType">
            <summary>
              Looks up a localized string similar to Failed to load type from {0}. The type was {1}..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FailedToSave">
            <summary>
              Looks up a localized string similar to Failed to save {0}\n, Exception: {1}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FileBackUpLocation">
            <summary>
              Looks up a localized string similar to Original file &apos;{0}&apos; gets backed up at &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FileCannotBeOpened">
            <summary>
              Looks up a localized string similar to Your file cannot be opened..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FileNotOpenedCorrectly">
            <summary>
              Looks up a localized string similar to Your file may not open correctly.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FunctionDescription">
            <summary>
              Looks up a localized string similar to Instance of a Custom Node.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FunctionNodeDescription">
            <summary>
              Looks up a localized string similar to DesignScript Builtin Functions.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FutureFileDescription">
            <summary>
              Looks up a localized string similar to Your file &apos;{0}&apos; was created in future version &apos;{1}&apos; and may not open correctly in your installed version of Dynamo &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FutureFileSummary">
            <summary>
              Looks up a localized string similar to Your file may not open correctly.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.FutureFileTitle">
            <summary>
              Looks up a localized string similar to Future File.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.GoodByeLog">
            <summary>
              Looks up a localized string similar to Goodbye.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.GroupDefaultText">
            <summary>
              Looks up a localized string similar to &lt;Click here to edit the group title&gt;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.HeaderAction">
            <summary>
              Looks up a localized string similar to ACTIONS.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.HeaderCreate">
            <summary>
              Looks up a localized string similar to CREATE.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.HeaderQuery">
            <summary>
              Looks up a localized string similar to QUERY.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.IdentifiersNotFound">
            <summary>
              Looks up a localized string similar to No identifiers found..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.IncompatibleOfFileAndDynamo">
            <summary>
              Looks up a localized string similar to Your file &apos;{0}&apos; of version &apos;{1}&apos; cannot be opened by this version of Dynamo ({2}).
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.IncorrectlyFormattedNodeLibraryDisplay">
            <summary>
              Looks up a localized string similar to This is the incorrectly formatted library name:.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.IncorrectlyFormattedNodeLibraryWarning">
            <summary>
              Looks up a localized string similar to Incorrectly formatted package node library encountered, this may result in a package assembly not being loaded!.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.IncorrectVersionToOpenFile">
            <summary>
              Looks up a localized string similar to Your file &apos;{0}&apos; was created in future version &apos;{1}&apos; and may not open correctly in your installed version of Dynamo &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.InputLabel">
            <summary>
              Looks up a localized string similar to INPUT.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.InputNodeDescription">
            <summary>
              Looks up a localized string similar to A function parameter, use with custom nodes.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.InputNodeSearchTags">
            <summary>
              Looks up a localized string similar to variable;argument;parameter.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.InvalidCustomNodeFolderWarning">
            <summary>
              Looks up a localized string similar to The folder &apos;{0}&apos; does not exist.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.InvalidLibraryFormat">
            <summary>
              Looks up a localized string similar to Invalid library format..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.InvalidStartOrEndOfRange">
            <summary>
              Looks up a localized string similar to The start or end of a range is greater than the number of available elements in the list..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.LibraryBuildError">
            <summary>
              Looks up a localized string similar to Build error for library: {0}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.LibraryHasBeenLoaded">
            <summary>
              Looks up a localized string similar to Library {0} has been loaded..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.LibraryIsDumped">
            <summary>
              Looks up a localized string similar to Library is dumped to \&quot;{0}\&quot;..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.LibraryPathCannotBeFound">
            <summary>
              Looks up a localized string similar to Cannot find library path: {0}..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.LoadingNodeDefinition">
            <summary>
              Looks up a localized string similar to Loading node definition for &quot;{0}&quot; from: {1}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.LocateInDisk">
            <summary>
              Looks up a localized string similar to Locate in Disk...
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.MalformedHeaderPackage">
            <summary>
              Looks up a localized string similar to {0} contains a package with a malformed header.  Ignoring it..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.MoreButtonTextFormat">
            <summary>
              Looks up a localized string similar to SHOW MORE ({0}).
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.MoveLabel">
            <summary>
              Looks up a localized string similar to Move.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.NewNoteString">
            <summary>
              Looks up a localized string similar to New Note.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.NoBinFolder">
            <summary>
              Looks up a localized string similar to {0} contains a package without a bin folder.  Ignoring it..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.NodeProblemEncountered">
            <summary>
              Looks up a localized string similar to Whilst preparing to run, this node encountered a problem. Please talk to the creators of the node, and give them this message:.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.NoDescriptionAvailable">
            <summary>
              Looks up a localized string similar to No description available.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.NoHeaderPackage">
            <summary>
              Looks up a localized string similar to {0} contains a package without a header.  Ignoring it..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.NoMatchesFound">
            <summary>
              Looks up a localized string similar to No matches found.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.NothingIsSelectedWarning">
            <summary>
              Looks up a localized string similar to Nothing is selected..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.NumberNodeDescription">
            <summary>
              Looks up a localized string similar to Creates a number..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ObsoleteFileDescription">
            <summary>
              Looks up a localized string similar to Your file &apos;{0}&apos; of version &apos;{1}&apos; cannot be opened by this version of Dynamo ({2}).
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ObsoleteFileTitle">
            <summary>
              Looks up a localized string similar to Obsolete File.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.OKButton">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.OpeningHomeWorkspace">
            <summary>
              Looks up a localized string similar to Opening home workspace {0}....
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.OpenWorkbenchError">
            <summary>
              Looks up a localized string similar to There was an error opening the workbench..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.OpenWorkspaceError">
            <summary>
              Looks up a localized string similar to There was an error opening the workspace..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.OutputLabel">
            <summary>
              Looks up a localized string similar to OUTPUT.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.OutputNodeDescription">
            <summary>
              Looks up a localized string similar to A function output, use with custom nodes.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PackageEmpty">
            <summary>
              Looks up a localized string similar to The package was found to be empty and was not installed..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PackageTooLarge">
            <summary>
              Looks up a localized string similar to The package is too large!  The package must be less than 15 MB!.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PathNotRegconizableAsStableOrDailyBuild">
            <summary>
              Looks up a localized string similar to The specified file path is not recognizable as a stable or a daily build.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PortDataFunctionOutputToolTip">
            <summary>
              Looks up a localized string similar to function output.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PortDataInputToolTip">
            <summary>
              Looks up a localized string similar to Input #{0}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PortDataOutputToolTip">
            <summary>
              Looks up a localized string similar to Output #{0}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PortDataParameterToolTip">
            <summary>
              Looks up a localized string similar to parameter.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PortDataPathToFileToolTip">
            <summary>
              Looks up a localized string similar to Path to the file.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PortDataReturnValueToolTip">
            <summary>
              Looks up a localized string similar to return value.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PortDataSymbolToolTip">
            <summary>
              Looks up a localized string similar to Symbol.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.PortDataVariableToolTip">
            <summary>
              Looks up a localized string similar to variable.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ProceedButton">
            <summary>
              Looks up a localized string similar to Proceed anyway.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangeEndCouldNotBeParsed">
            <summary>
              Looks up a localized string similar to Range end could not be parsed..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangeOrApprIdentifierAlrUsed">
            <summary>
              Looks up a localized string similar to Cannot use range or approx. identifier on increment field when one has already been used to specify a count..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangePortDataAmountToolTip">
            <summary>
              Looks up a localized string similar to Amount of numbers in the sequence.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangePortDataEndToolTip">
            <summary>
              Looks up a localized string similar to Number or letter to end the sequence at.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangePortDataSeqToolTip">
            <summary>
              Looks up a localized string similar to New sequence.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangePortDataStartToolTip">
            <summary>
              Looks up a localized string similar to Number or letter to start the sequence at.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangePortDataStepToolTip">
            <summary>
              Looks up a localized string similar to Space between numbers or letters.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangeStepCouldNotBeParsed">
            <summary>
              Looks up a localized string similar to Range step could not be parsed..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RangeValuesGreaterThanZero">
            <summary>
              Looks up a localized string similar to Range values must be greater than zero..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RemoveLabel">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RequestingVersionUpdate">
            <summary>
              Looks up a localized string similar to Requesting version update info....
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RunTypeToolTipAutomatically">
            <summary>
              Looks up a localized string similar to Run whenever an input to the graph is updated..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RunTypeToolTipManually">
            <summary>
              Looks up a localized string similar to Run when you click the Run button..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RunTypeToolTipPeriodicallyDisabled">
            <summary>
              Looks up a localized string similar to Run Periodic is only available when there are nodes in the graph that support periodic update..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.RunTypeToolTipPeriodicallyEnabled">
            <summary>
              Looks up a localized string similar to Run at the specified interval..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SavingInProgress">
            <summary>
              Looks up a localized string similar to Saving {0} ....
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SearchTextBlockText">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.StringNodeDescription">
            <summary>
              Looks up a localized string similar to Creates a string..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SublistPortDataResultToolTip">
            <summary>
              Looks up a localized string similar to The sublists..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SublistsPortDataListToolTip">
            <summary>
              Looks up a localized string similar to The list from which to create sublists..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SublistsPortDataOffsetToolTip">
            <summary>
              Looks up a localized string similar to The offset to apply to the sub-list. Ex. The range &quot;0..2&quot; with an offset of 1 will yield sublists {0,1,2}{1,2,3}{2,3,4}....
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SubmitBugButton">
            <summary>
              Looks up a localized string similar to Submit Bug To Github.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SubmitBugToGithub">
            <summary>
              Looks up a localized string similar to Submit Bug To Github.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SymbolNodeDescription">
             <summary>
               Looks up a localized string similar to A function parameter, use with custom nodes.
            
            You can specify the type and default value for parameter. E.g.,
            
            input : var[]..[]
            value : bool = false.
             </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.SymbolSearchTags">
            <summary>
              Looks up a localized string similar to variable;argument;parameter.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ToolTipForTempVar">
            <summary>
              Looks up a localized string similar to Statement Output.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ToolTipFunctionOutput">
            <summary>
              Looks up a localized string similar to function output.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ToolTipInput">
            <summary>
              Looks up a localized string similar to Input #.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ToolTipOutput">
            <summary>
              Looks up a localized string similar to Output #.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ToolTipReturnValue">
            <summary>
              Looks up a localized string similar to return value.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.ToolTipSymbol">
            <summary>
              Looks up a localized string similar to Symbol.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.TopResult">
            <summary>
              Looks up a localized string similar to Top Result.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UnableToCreateCustomNodeID">
            <summary>
              Looks up a localized string similar to Unable to create instance of custom node with id: \&quot;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UnhandledExceptionInDynamoEngine">
            <summary>
              Looks up a localized string similar to Unhandled exception in Dynamo engine.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UnhandledExceptionSummary">
            <summary>
              Looks up a localized string similar to Unhandled exception in Dynamo engine.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UnhandledExceptionTitle">
            <summary>
              Looks up a localized string similar to Unhandled Exception.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UnknownVersion">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UpdateAvailable">
            <summary>
              Looks up a localized string similar to Update available: {0}.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UpdateDownloadComplete">
            <summary>
              Looks up a localized string similar to Update download complete..
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UpdateDownloadProgress">
            <summary>
              Looks up a localized string similar to Update download progress: {0}%.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UpdateDownloadStarted">
            <summary>
              Looks up a localized string similar to Update download started....
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.UsageReportingErrorMessage">
             <summary>
               Looks up a localized string similar to Uh oh...
             We&apos;re sorry - we tried to save your decisions, but something went wrong. The decision probably hasn&apos;t been saved. This really shouldn&apos;t have happened. Please get in touch via GitHub and send us this information.
            You can also try deleting [FILEPATH] and trying again.
            Depending on your previous choice, instrumentation may still be running, if you&apos;re worried about this, please consider not using Dynamo until we&apos;ve got back to you to solve the problem.
            Sorry about that..
             </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.WarningCannotFindType">
            <summary>
              Looks up a localized string similar to Cannot find type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.WarningInvalidInput">
             <summary>
               Looks up a localized string similar to Invalid input.
            
            The name of parameter should start with alphabetic character. You can specify its type and default value. E.g., 
            
            input : var[]..[]
            value: bool = false.
             </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.WatermarkLabelText">
            <summary>
              Looks up a localized string similar to Your code goes here.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.WelcomeMessage">
            <summary>
              Looks up a localized string similar to Welcome to Dynamo!.
            </summary>
        </member>
        <member name="P:Dynamo.Properties.Resources.WorkbenchNotOpen">
            <summary>
              Looks up a localized string similar to Workbench could not be opened..
            </summary>
        </member>
        <member name="F:net.riversofdata.dhlogger.Log.dbMutex">
            <summary>
            This mutex guards transactions on the memory store
            </summary>
        </member>
        <member name="P:net.riversofdata.dhlogger.Log.AppName">
            <summary>
            The name of the application associated with the log entries
            </summary>
        </member>
        <member name="P:net.riversofdata.dhlogger.Log.UserID">
            <summary>
            A Guid string for the user associated with the log entries
            </summary>
        </member>
        <member name="P:net.riversofdata.dhlogger.Log.SessionID">
            <summary>
            A Guid string for the session that the user is engaging with
            </summary>
        </member>
        <member name="F:net.riversofdata.dhlogger.Log.uploadedItemsMutex">
            <summary>
            An object used to guard the uploadedItemsCount
            </summary>
        </member>
        <member name="P:net.riversofdata.dhlogger.Log.UploadedItems">
            <summary>
            The number of items that this log entity has successfully uploaded
            This may be greater than the number of calls due to splitting of large entries
            </summary>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new log instance
            </summary>
            <param name="appName">The name of the application associated with this log</param>
            <param name="userID">A statistically unique string associated with the user, e.g. a GUID</param>
            <param name="sessionID">A statistically unique string associated with the session, e.g. a GUID</param>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.Debug(System.String,System.String)">
            <summary>
            Log an item at debug priority
            </summary>
            <param name="tag">Tag associated with the log item</param>
            <param name="text">Text to log</param>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.Error(System.String,System.String)">
            <summary>
            Log an item at error priority
            </summary>
            <param name="tag">Tag associated with the log item</param>
            <param name="text">Text to log</param>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.Info(System.String,System.String)">
            <summary>
            Log an item at info priority
            </summary>
            <param name="tag">Tag associated with the log item</param>
            <param name="text">Text to log</param>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.Verbose(System.String,System.String)">
            <summary>
            Log an item at verbose priority
            </summary>
            <param name="tag">Tag associated with the log item</param>
            <param name="text">Text to log</param>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.PrepAndPushItem(System.String,System.String,System.String)">
            <summary>
            Methods that preps a write request
            This method calls recursively up to once if the text is too large and needs
            splitting
            </summary>
            <param name="tag"></param>
            <param name="priority"></param>
            <param name="text"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:net.riversofdata.dhlogger.Log.PushItem(System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <member name="M:net.riversofdata.dhlogger.Log.UploaderExec">
            <summary>
            Core thread method for handling the upload
            </summary>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.UploadItem(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Code to transfer an item iver the network
            </summary>
            <param name="item"></param>
            <returns>true if success, false otherwise</returns>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.SplitText(System.String)">
            <summary>
            Split a string into shorter strings as defined by the const
            params
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.ValidateInput(System.String,System.String)">
            <summary>
            Do input validation tests
            </summary>
            <param name="tag"></param>
            <param name="text"></param>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.ValidateTextContent(System.String)">
            <summary>
            Ensure that the text that is being sent is only alphanumeric
            and hypen
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:net.riversofdata.dhlogger.Log.ValidateLength(System.String)">
            <summary>
            Ensure that the names and tags fit within the safe window after
            we've put a GUID and a serial on the end of them
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
    </members>
</doc>
